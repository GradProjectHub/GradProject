{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p> <p>\u8d77\u52d5\u30b3\u30de\u30f3\u30c9\u306f mkdocs serve\u30b3\u30de\u30f3\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> main.go<pre><code># Code block content\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nfunc main() {\n    fmt.Println(time.Now())\n}\n</code></pre>"},{"location":"%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E7%94%BB%E5%83%8F/","title":"\u753b\u50cf\u306e\u4fdd\u5b58","text":"<p>CloudStorage\u3092\u4f7f\u7528\u3059\u308b\u3002 markers\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4e0b\u306b\u9023\u756a\u3067\u4fdd\u5b58\u3059\u308b\u3002</p>"},{"location":"%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E7%94%BB%E5%83%8F/#_2","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30eb\u30fc\u30eb","text":"<pre><code>// Firebase\u30b9\u30c8\u30ec\u30fc\u30b8\u30eb\u30fc\u30eb\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u6307\u5b9a\nrules_version = '2';\n\n// \u30b9\u30c8\u30ec\u30fc\u30b8\u30b5\u30fc\u30d3\u30b9\u306e\u8a2d\u5b9a\nservice firebase.storage {\n  // \u30d0\u30b1\u30c3\u30c8\uff08\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u5bb9\u5668\uff09\u306b\u5bfe\u3059\u308b\u30eb\u30fc\u30eb\n  match /b/{bucket}/o {\n    // markers\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u4efb\u610f\u306e\u30d5\u30a1\u30a4\u30eb\uff08{markerId}\uff09\u306b\u5bfe\u3059\u308b\u30eb\u30fc\u30eb\n    match /markers/{markerId} {\n      // \u8aad\u307f\u53d6\u308a\u30eb\u30fc\u30eb\n      allow read: if request.auth != null;\n      // \u2191 Firebase Authentication\u3067\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u307f\n      // \u30de\u30fc\u30ab\u30fc\u753b\u50cf\u306e\u8aad\u307f\u53d6\u308a\u3092\u8a31\u53ef\n\n      // \u66f8\u304d\u8fbc\u307f\u30eb\u30fc\u30eb\n      allow write: if false;\n      // \u2191 \u3059\u3079\u3066\u306e\u66f8\u304d\u8fbc\u307f\u64cd\u4f5c\uff08create, update, delete\uff09\u3092\u7981\u6b62\n      // \u30de\u30fc\u30ab\u30fc\u753b\u50cf\u306e\u8ffd\u52a0\u30fb\u66f4\u65b0\u30fb\u524a\u9664\u306fFirebase Console\u7d4c\u7531\u3067\n      // \u958b\u767a\u8005\u306e\u307f\u304c\u5b9f\u884c\u53ef\u80fd\n    }\n  }\n}\n</code></pre>"},{"location":"%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E7%94%BB%E5%83%8F/#cloud-storage","title":"Cloud Storage\u7121\u6599\u67a0","text":"<p>\u7121\u6599\u67a0\u3067\u3042\u308bspark\u30d7\u30e9\u30f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a</p> GB\uff08\u4fdd\u5b58\uff09 5GB GB\uff08\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\uff09 1 GB/\u65e5 \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9 \u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 2 \u4e07/\u65e5 \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 \u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3 5 \u4e07/\u65e5"},{"location":"%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E7%94%BB%E5%83%8F/#_3","title":"\u30de\u30fc\u30ab\u30fc\u753b\u50cf\u306e\u30e6\u30fc\u30b6\u8a2d\u5b9a","text":"<p>\u5404\u30e6\u30fc\u30b6\u3054\u3068\u306e\u8a2d\u5b9a\u60c5\u5831\u3092Realtime Database\u306b\u4fdd\u6301\u3059\u308b\u3002</p>"},{"location":"%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E7%94%BB%E5%83%8F/#_4","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30eb\u30fc\u30eb","text":"<pre><code>{\n  \"rules\": {\n    // \u30e6\u30fc\u30b6\u30fc\u306e\u30de\u30fc\u30ab\u30fc\u8a2d\u5b9a\u3092\u4fdd\u5b58\u3059\u308b\u30eb\u30fc\u30c8\u30d1\u30b9\n    \"user_marker_settings\": {\n      // $uid\u306f\u52d5\u7684\u306a\u30e6\u30fc\u30b6\u30fcID\uff08Firebase Authentication\u304b\u3089\u53d6\u5f97\u3057\u305fUID\uff09\n      \"$uid\": {\n        // \u8aad\u307f\u53d6\u308a\u30eb\u30fc\u30eb\n        \".read\": \"auth != null &amp;&amp; auth.uid == $uid\",\n        // \u2191 \u8a8d\u8a3c\u3055\u308c\u3066\u3044\u3066\uff08auth != null\uff09\u3001\n        // \u304b\u3064\u81ea\u5206\u306e\u30c7\u30fc\u30bf\uff08auth.uid == $uid\uff09\u306e\u307f\u8aad\u307f\u53d6\u308a\u53ef\u80fd\n\n        // \u66f8\u304d\u8fbc\u307f\u30eb\u30fc\u30eb\n        \".write\": \"auth != null &amp;&amp; auth.uid == $uid\",\n        // \u2191 \u8a8d\u8a3c\u3055\u308c\u3066\u3044\u3066\u3001\u304b\u3064\u81ea\u5206\u306e\u30c7\u30fc\u30bf\u306e\u307f\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\n\n        // \u30a2\u30cb\u30e1\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n        \"anime\": {\n          \".validate\": \"newData.isString() &amp;&amp; newData.val().matches(/^marker[1-9][0-9]*$/)\"\n          // \u2191 \u5024\u304c\u6587\u5b57\u5217\u3067\u3001\u304b\u3064'marker'\u3067\u59cb\u307e\u308a1\u4ee5\u4e0a\u306e\u6570\u5b57\u304c\u7d9a\u304f\u5f62\u5f0f\u306e\u307f\u8a31\u53ef\n          // \u4f8b\uff1a'marker1', 'marker2', 'marker10' \u306a\u3069\n        },\n\n        // \u30c9\u30e9\u30de\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\uff08\u30a2\u30cb\u30e1\u3068\u540c\u3058\u30eb\u30fc\u30eb\uff09\n        \"drama\": {\n          \".validate\": \"newData.isString() &amp;&amp; newData.val().matches(/^marker[1-9][0-9]*$/)\"\n        },\n\n        // \u6620\u753b\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\uff08\u30a2\u30cb\u30e1\u3068\u540c\u3058\u30eb\u30fc\u30eb\uff09\n        \"movie\": {\n          \".validate\": \"newData.isString() &amp;&amp; newData.val().matches(/^marker[1-9][0-9]*$/)\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E7%94%BB%E5%83%8F/#realtime-database","title":"Realtime Database\u7121\u6599\u67a0","text":"\u540c\u6642\u63a5\u7d9a\u00a0 100 GB\uff08\u4fdd\u5b58\uff09 1 GB GB\uff08\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\uff09 10 GB/\u6708"},{"location":"DB/model/point_logs.go/","title":"PointLog\u69cb\u9020\u4f53\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u3068\u5229\u7528\u4f8b","text":"<p>\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001<code>PointLog</code>\u69cb\u9020\u4f53\u3068\u305d\u306e\u95a2\u9023\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u958b\u767a\u8005\u5411\u3051\u306b\u5177\u4f53\u7684\u306a\u5229\u7528\u4f8b\u3082\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_1","title":"\u6982\u8981","text":"<p><code>PointLog</code>\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e<code>point_logs</code>\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u3059Go\u306e\u69cb\u9020\u4f53\u3067\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u30dd\u30a4\u30f3\u30c8\u306e\u5c65\u6b74\u60c5\u5831\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\u672c\u30b3\u30fc\u30c9\u306fSQLBoiler\u306b\u3088\u3063\u3066\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u304a\u308a\u3001ORM\uff08Object-Relational Mapping\uff09\u3068\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u7c21\u6f54\u306b\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_2","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u30a4\u30f3\u30dd\u30fc\u30c8","text":"<pre><code>package models\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"reflect\"\n    \"strconv\"\n    \"strings\"\n    \"sync\"\n    \"time\"\n\n    \"github.com/friendsofgo/errors\"\n    \"github.com/volatiletech/sqlboiler/v4/boil\"\n    \"github.com/volatiletech/sqlboiler/v4/queries\"\n    \"github.com/volatiletech/sqlboiler/v4/queries/qm\"\n    \"github.com/volatiletech/sqlboiler/v4/queries/qmhelper\"\n    \"github.com/volatiletech/strmangle\"\n)\n</code></pre> <ul> <li>package models: \u3053\u306e\u30b3\u30fc\u30c9\u306f<code>models</code>\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>\u30a4\u30f3\u30dd\u30fc\u30c8: \u5fc5\u8981\u306a\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</li> <li><code>context</code>, <code>database/sql</code>, <code>time</code>\u306a\u3069\u306e\u6a19\u6e96\u30d1\u30c3\u30b1\u30fc\u30b8\u3002</li> <li><code>errors</code>, <code>sqlboiler</code>, <code>strmangle</code>\u306a\u3069\u306e\u5916\u90e8\u30d1\u30c3\u30b1\u30fc\u30b8\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#pointlog_1","title":"PointLog\u69cb\u9020\u4f53","text":"<pre><code>type PointLog struct {\n    CreatedAt time.Time `boil:\"created_at\" json:\"created_at\" toml:\"created_at\" yaml:\"created_at\"`\n    UserID    uint      `boil:\"user_id\" json:\"user_id\" toml:\"user_id\" yaml:\"user_id\"`\n    Point     int       `boil:\"point\" json:\"point\" toml:\"point\" yaml:\"point\"`\n\n    R *pointLogR `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n    L pointLogL  `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n}\n</code></pre> <p><code>PointLog</code>\u69cb\u9020\u4f53\u306f\u3001<code>point_logs</code>\u30c6\u30fc\u30d6\u30eb\u306e\u5404\u30ab\u30e9\u30e0\u306b\u5bfe\u5fdc\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002</p> <ul> <li>CreatedAt: <code>time.Time</code>\u578b\u3002\u30ec\u30b3\u30fc\u30c9\u306e\u4f5c\u6210\u65e5\u6642\u3092\u8868\u3057\u307e\u3059\u3002</li> <li>UserID: <code>uint</code>\u578b\u3002\u30e6\u30fc\u30b6\u30fc\u306eID\u3092\u8868\u3057\u307e\u3059\u3002</li> <li>Point: <code>int</code>\u578b\u3002\u30dd\u30a4\u30f3\u30c8\u306e\u5024\u3092\u8868\u3057\u307e\u3059\u3002</li> </ul> <p>\u30bf\u30b0\u306b\u306f\u4ee5\u4e0b\u306e\u7528\u9014\u304c\u3042\u308a\u307e\u3059\u3002</p> <ul> <li>boil: SQLBoiler\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3002</li> <li>json, toml, yaml: \u305d\u308c\u305e\u308c\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\uff0f\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6307\u5b9a\u3002</li> </ul> <p><code>R</code>\u3068<code>L</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3059\u3002</p> <ul> <li>R *pointLogR: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002</li> <li>L pointLogL: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_3","title":"\u30ab\u30e9\u30e0\u540d\u306e\u5b9a\u7fa9","text":"<pre><code>var PointLogColumns = struct {\n    CreatedAt string\n    UserID    string\n    Point     string\n}{\n    CreatedAt: \"created_at\",\n    UserID:    \"user_id\",\n    Point:     \"point\",\n}\n\nvar PointLogTableColumns = struct {\n    CreatedAt string\n    UserID    string\n    Point     string\n}{\n    CreatedAt: \"point_logs.created_at\",\n    UserID:    \"point_logs.user_id\",\n    Point:     \"point_logs.point\",\n}\n</code></pre> <ul> <li>PointLogColumns: \u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u540d\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>PointLogTableColumns: \u30c6\u30fc\u30d6\u30eb\u540d\u3092\u542b\u3081\u305f\u5b8c\u5168\u306a\u30ab\u30e9\u30e0\u540d\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#where","title":"Where\u53e5\u306e\u30d8\u30eb\u30d1\u30fc","text":"<pre><code>var PointLogWhere = struct {\n    CreatedAt whereHelpertime_Time\n    UserID    whereHelperuint\n    Point     whereHelperint\n}{\n    CreatedAt: whereHelpertime_Time{field: \"`point_logs`.`created_at`\"},\n    UserID:    whereHelperuint{field: \"`point_logs`.`user_id`\"},\n    Point:     whereHelperint{field: \"`point_logs`.`point`\"},\n}\n</code></pre> <ul> <li>PointLogWhere: \u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u308b\u969b\u306b\u4f7f\u7528\u3059\u308bWhere\u53e5\u306e\u30d8\u30eb\u30d1\u30fc\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_4","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u5b9a\u7fa9","text":"<pre><code>var PointLogRels = struct {\n    User string\n}{\n    User: \"User\",\n}\n\ntype pointLogR struct {\n    User *User `boil:\"User\" json:\"User\" toml:\"User\" yaml:\"User\"`\n}\n</code></pre> <ul> <li>PointLogRels: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u540d\u524d\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>pointLogR: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3059\u308b\u69cb\u9020\u4f53\u3067\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_5","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u521d\u671f\u5316\u3068\u53d6\u5f97","text":"<pre><code>func (*pointLogR) NewStruct() *pointLogR {\n    return &amp;pointLogR{}\n}\n\nfunc (r *pointLogR) GetUser() *User {\n    if r == nil {\n        return nil\n    }\n    return r.User\n}\n</code></pre> <ul> <li><code>NewStruct()</code>: \u65b0\u3057\u3044<code>pointLogR</code>\u69cb\u9020\u4f53\u3092\u751f\u6210\u3057\u307e\u3059\u3002</li> <li><code>GetUser()</code>: <code>User</code>\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_6","title":"\u30ed\u30fc\u30c9\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>type pointLogL struct{}\n</code></pre> <ul> <li>pointLogL: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u308b\u69cb\u9020\u4f53\u3067\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_7","title":"\u30ab\u30e9\u30e0\u3068\u30ad\u30fc\u306e\u5b9a\u7fa9","text":"<pre><code>var (\n    pointLogAllColumns            = []string{\"created_at\", \"user_id\", \"point\"}\n    pointLogColumnsWithoutDefault = []string{\"user_id\", \"point\"}\n    pointLogColumnsWithDefault    = []string{\"created_at\"}\n    pointLogPrimaryKeyColumns     = []string{\"created_at\", \"user_id\"}\n    pointLogGeneratedColumns      = []string{}\n)\n</code></pre> <ul> <li>pointLogAllColumns: \u5168\u3066\u306e\u30ab\u30e9\u30e0\u540d\u3002</li> <li>pointLogColumnsWithoutDefault: \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u305f\u306a\u3044\u30ab\u30e9\u30e0\u540d\u3002</li> <li>pointLogColumnsWithDefault: \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u30ab\u30e9\u30e0\u540d\u3002</li> <li>pointLogPrimaryKeyColumns: \u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3068\u306a\u308b\u30ab\u30e9\u30e0\u540d\u3002</li> <li>pointLogGeneratedColumns: \u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u30ab\u30e9\u30e0\u540d\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_8","title":"\u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u3068\u30af\u30a8\u30ea\u69cb\u9020\u4f53","text":"<pre><code>type (\n    PointLogSlice []*PointLog\n    PointLogHook  func(context.Context, boil.ContextExecutor, *PointLog) error\n\n    pointLogQuery struct {\n        *queries.Query\n    }\n)\n</code></pre> <ul> <li>PointLogSlice: <code>PointLog</code>\u69cb\u9020\u4f53\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u30b9\u30e9\u30a4\u30b9\u3002\u8907\u6570\u306e<code>PointLog</code>\u3092\u6271\u3046\u969b\u306b\u4f7f\u7528\u3002</li> <li>PointLogHook: \u30d5\u30c3\u30af\u95a2\u6570\u306e\u578b\u5b9a\u7fa9\u3002\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306e\u524d\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308b\u30ab\u30b9\u30bf\u30e0\u30ed\u30b8\u30c3\u30af\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3002</li> <li>pointLogQuery: \u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u69cb\u9020\u4f53\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_9","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u95a2\u9023\u306e\u5909\u6570","text":"<pre><code>var (\n    pointLogType                 = reflect.TypeOf(&amp;PointLog{})\n    pointLogMapping              = queries.MakeStructMapping(pointLogType)\n    pointLogPrimaryKeyMapping, _ = queries.BindMapping(pointLogType, pointLogMapping, pointLogPrimaryKeyColumns)\n    pointLogInsertCacheMut       sync.RWMutex\n    pointLogInsertCache          = make(map[string]insertCache)\n    pointLogUpdateCacheMut       sync.RWMutex\n    pointLogUpdateCache          = make(map[string]updateCache)\n    pointLogUpsertCacheMut       sync.RWMutex\n    pointLogUpsertCache          = make(map[string]insertCache)\n)\n</code></pre> <ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5: \u633f\u5165\u3001\u66f4\u65b0\u3001\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u64cd\u4f5c\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>sync.RWMutex: \u30ad\u30e3\u30c3\u30b7\u30e5\u3078\u306e\u4e26\u884c\u30a2\u30af\u30bb\u30b9\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306e\u8aad\u307f\u66f8\u304d\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_10","title":"\u305d\u306e\u4ed6\u306e\u4f9d\u5b58\u6027","text":"<pre><code>var (\n    _ = time.Second\n    _ = qmhelper.Where\n)\n</code></pre> <ul> <li>\u4f9d\u5b58\u6027\u306e\u7dad\u6301: \u3053\u308c\u3089\u306e\u672a\u4f7f\u7528\u5909\u6570\u306f\u3001\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u6700\u9069\u5316\u3067\u524a\u9664\u3055\u308c\u308b\u306e\u3092\u9632\u3050\u305f\u3081\u306b\u5b58\u5728\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_11","title":"\u30d5\u30c3\u30af\u306e\u5b9a\u7fa9\u3068\u7ba1\u7406","text":""},{"location":"DB/model/point_logs.go/#_12","title":"\u30d5\u30c3\u30af\u7528\u306e\u5909\u6570\u3068\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9","text":"<pre><code>var pointLogAfterSelectMu sync.Mutex\nvar pointLogAfterSelectHooks []PointLogHook\n\nvar pointLogBeforeInsertMu sync.Mutex\nvar pointLogBeforeInsertHooks []PointLogHook\n// \u4ed6\u306e\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3082\u540c\u69d8\u306b\u5b9a\u7fa9\n</code></pre> <ul> <li>\u30d5\u30c3\u30af: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306e\u524d\u5f8c\u306b\u30ab\u30b9\u30bf\u30e0\u30ed\u30b8\u30c3\u30af\u3092\u633f\u5165\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3002</li> <li>\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9: \u30d5\u30c3\u30af\u306e\u767b\u9332\u3084\u5b9f\u884c\u6642\u306e\u4e26\u884c\u6027\u3092\u5236\u5fa1\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_13","title":"\u30d5\u30c3\u30af\u306e\u5b9f\u884c\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>func (o *PointLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {\n    if boil.HooksAreSkipped(ctx) {\n        return nil\n    }\n\n    for _, hook := range pointLogAfterSelectHooks {\n        if err := hook(ctx, exec, o); err != nil {\n            return err\n        }\n    }\n\n    return nil\n}\n</code></pre> <ul> <li>\u30d5\u30c3\u30af\u306e\u5b9f\u884c: \u767b\u9332\u3055\u308c\u305f\u5404\u30d5\u30c3\u30af\u3092\u9806\u6b21\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>HooksAreSkipped: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u30d5\u30c3\u30af\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_14","title":"\u30d5\u30c3\u30af\u306e\u767b\u9332","text":"<pre><code>func AddPointLogHook(hookPoint boil.HookPoint, pointLogHook PointLogHook) {\n    switch hookPoint {\n    case boil.AfterSelectHook:\n        pointLogAfterSelectMu.Lock()\n        pointLogAfterSelectHooks = append(pointLogAfterSelectHooks, pointLogHook)\n        pointLogAfterSelectMu.Unlock()\n    // \u4ed6\u306e\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3082\u540c\u69d8\u306b\u51e6\u7406\n    }\n}\n</code></pre> <ul> <li>AddPointLogHook: \u30d5\u30c3\u30af\u95a2\u6570\u3092\u7279\u5b9a\u306e\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u767b\u9332\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_15","title":"\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9","text":""},{"location":"DB/model/point_logs.go/#one","title":"One\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>func (q pointLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PointLog, error) {\n    o := &amp;PointLog{}\n\n    queries.SetLimit(q.Query, 1)\n\n    err := q.Bind(ctx, exec, o)\n    if err != nil {\n        if errors.Is(err, sql.ErrNoRows) {\n            return nil, sql.ErrNoRows\n        }\n        return nil, errors.Wrap(err, \"models: failed to execute a one query for point_logs\")\n    }\n\n    if err := o.doAfterSelectHooks(ctx, exec); err != nil {\n        return o, err\n    }\n\n    return o, nil\n}\n</code></pre> <ul> <li>One: \u30af\u30a8\u30ea\u304b\u30891\u4ef6\u306e<code>PointLog</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li><code>PointLog</code>\u69cb\u9020\u4f53\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3002</li> <li>\u30af\u30a8\u30ea\u306e\u30ea\u30df\u30c3\u30c8\u30921\u306b\u8a2d\u5b9a\u3002</li> <li><code>Bind</code>\u30e1\u30bd\u30c3\u30c9\u3067\u7d50\u679c\u3092\u30d0\u30a4\u30f3\u30c9\u3002</li> <li>\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30a8\u30e9\u30fc\u3092\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3059\u3002</li> <li><code>AfterSelect</code>\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3002</li> <li>\u7d50\u679c\u3092\u8fd4\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_16","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":""},{"location":"DB/model/point_logs.go/#_17","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a","text":"<pre><code>import (\n    \"context\"\n    \"database/sql\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n    \"github.com/yourusername/yourproject/models\"\n)\n\nfunc main() {\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\n    db, err := sql.Open(\"mysql\", \"user:password@tcp(localhost:3306)/dbname\")\n    if err != nil {\n        panic(err)\n    }\n    defer db.Close()\n\n    // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n    ctx := context.Background()\n\n    // \u4ee5\u4e0b\u3067PointLog\u306e\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_18","title":"\u30ec\u30b3\u30fc\u30c9\u306e\u53d6\u5f97","text":"<pre><code>// \u30e6\u30fc\u30b6\u30fcID\u304c1\u306e\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u3092\u53d6\u5f97\npointLog, err := models.PointLogs(models.PointLogWhere.UserID.EQ(1)).One(ctx, db)\nif err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        // \u30ec\u30b3\u30fc\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306e\u51e6\u7406\n    } else {\n        // \u305d\u306e\u4ed6\u306e\u30a8\u30e9\u30fc\u51e6\u7406\n        panic(err)\n    }\n} else {\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u5229\u7528\n    fmt.Printf(\"UserID: %d, Point: %d, CreatedAt: %s\\n\", pointLog.UserID, pointLog.Point, pointLog.CreatedAt)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_19","title":"\u30ec\u30b3\u30fc\u30c9\u306e\u633f\u5165","text":"<pre><code>newPointLog := &amp;models.PointLog{\n    UserID: 1,\n    Point:  100,\n    // CreatedAt\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u73fe\u5728\u6642\u523b\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3053\u3068\u3092\u60f3\u5b9a\n}\n\nerr = newPointLog.Insert(ctx, db, boil.Infer())\nif err != nil {\n    // \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    panic(err)\n} else {\n    fmt.Println(\"\u65b0\u3057\u3044\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_20","title":"\u30ec\u30b3\u30fc\u30c9\u306e\u66f4\u65b0","text":"<pre><code>// \u65e2\u5b58\u306e\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u3092\u66f4\u65b0\npointLog.Point += 50\n\n_, err = pointLog.Update(ctx, db, boil.Infer())\nif err != nil {\n    // \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    panic(err)\n} else {\n    fmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u304c\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_21","title":"\u30ec\u30b3\u30fc\u30c9\u306e\u524a\u9664","text":"<pre><code>_, err = pointLog.Delete(ctx, db)\nif err != nil {\n    // \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    panic(err)\n} else {\n    fmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_22","title":"\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u4f7f\u7528","text":"<pre><code>tx, err := db.BeginTx(ctx, nil)\nif err != nil {\n    panic(err)\n}\n\ndefer tx.Rollback()\n\n// \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5185\u3067\u306e\u64cd\u4f5c\nnewPointLog := &amp;models.PointLog{\n    UserID: 1,\n    Point:  200,\n}\n\nerr = newPointLog.Insert(ctx, tx, boil.Infer())\nif err != nil {\n    panic(err)\n}\n\n// \u305d\u306e\u4ed6\u306e\u64cd\u4f5c...\n\n// \u30b3\u30df\u30c3\u30c8\nif err = tx.Commit(); err != nil {\n    panic(err)\n} else {\n    fmt.Println(\"\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u6210\u529f\u3057\u307e\u3057\u305f\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_23","title":"\u30d5\u30c3\u30af\u306e\u4f7f\u7528","text":"<pre><code>// \u30d5\u30c3\u30af\u95a2\u6570\u306e\u5b9a\u7fa9\nfunc afterInsertHook(ctx context.Context, exec boil.ContextExecutor, p *models.PointLog) error {\n    fmt.Printf(\"\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u304c\u633f\u5165\u3055\u308c\u307e\u3057\u305f: UserID=%d, Point=%d\\n\", p.UserID, p.Point)\n    return nil\n}\n\n// \u30d5\u30c3\u30af\u306e\u767b\u9332\nmodels.AddPointLogHook(boil.AfterInsertHook, afterInsertHook)\n\n// \u633f\u5165\u64cd\u4f5c\uff08\u30d5\u30c3\u30af\u304c\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\uff09\nnewPointLog := &amp;models.PointLog{\n    UserID: 2,\n    Point:  300,\n}\n\nerr = newPointLog.Insert(ctx, db, boil.Infer())\nif err != nil {\n    panic(err)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_24","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0: SQL\u64cd\u4f5c\u306f\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u9069\u5207\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f7f\u7528: <code>context.Context</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u30b7\u30b0\u30ca\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> <li>SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3078\u306e\u5bfe\u7b56: \u30d1\u30e9\u30e1\u30fc\u30bf\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u3066\u3001SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u9632\u304e\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#all","title":"<code>All</code> \u95a2\u6570","text":"<pre><code>// All returns all PointLog records from the query.\nfunc (q pointLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (PointLogSlice, error) {\n    var o []*PointLog\n\n    err := q.Bind(ctx, exec, &amp;o)\n    if err != nil {\n        return nil, errors.Wrap(err, \"models: failed to assign all query results to PointLog slice\")\n    }\n\n    if len(pointLogAfterSelectHooks) != 0 {\n        for _, obj := range o {\n            if err := obj.doAfterSelectHooks(ctx, exec); err != nil {\n                return o, err\n            }\n        }\n    }\n\n    return o, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_25","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>All</code> \u95a2\u6570\u306f\u3001\u30af\u30a8\u30ea\u304b\u3089\u3059\u3079\u3066\u306e <code>PointLog</code> \u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3084\u30ad\u30e3\u30f3\u30bb\u30eb\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3067\u3059\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>PointLogSlice</code>: <code>PointLog</code> \u306e\u30b9\u30e9\u30a4\u30b9\uff08\u30ea\u30b9\u30c8\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_26","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li><code>var o []*PointLog</code>:</li> <li><code>PointLog</code> \u578b\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\u3053\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u305f\u30ec\u30b3\u30fc\u30c9\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002</li> <li><code>err := q.Bind(ctx, exec, &amp;o)</code>:</li> <li>\u30af\u30a8\u30ea\u7d50\u679c\u3092 <code>o</code> \u306b\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002</li> <li>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002</li> <li><code>if len(pointLogAfterSelectHooks) != 0</code>:</li> <li><code>AfterSelect</code> \u306e\u30d5\u30c3\u30af\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li><code>return o, nil</code>:</li> <li>\u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070\u3001\u53d6\u5f97\u3057\u305f <code>PointLog</code> \u306e\u30b9\u30e9\u30a4\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_27","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\npointLogs, err := PointLogs().All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfor _, log := range pointLogs {\n    fmt.Printf(\"UserID: %d, CreatedAt: %s\\n\", log.UserID, log.CreatedAt)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#count","title":"<code>Count</code> \u95a2\u6570","text":"<pre><code>// Count returns the count of all PointLog records in the query.\nfunc (q pointLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    var count int64\n\n    queries.SetSelect(q.Query, nil)\n    queries.SetCount(q.Query)\n\n    err := q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to count point_logs rows\")\n    }\n\n    return count, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_28","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: \u30af\u30a8\u30ea\u306b\u4e00\u81f4\u3059\u308b <code>PointLog</code> \u30ec\u30b3\u30fc\u30c9\u306e\u7dcf\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li><code>queries.SetSelect(q.Query, nil)</code>:<ul> <li>SELECT \u53e5\u3092\u30af\u30ea\u30a2\u3057\u307e\u3059\u3002</li> </ul> </li> <li><code>queries.SetCount(q.Query)</code>:<ul> <li>\u30af\u30a8\u30ea\u3092 COUNT \u30af\u30a8\u30ea\u306b\u5909\u63db\u3057\u307e\u3059\u3002</li> </ul> </li> <li><code>q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)</code>:<ul> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092 <code>count</code> \u306b\u30b9\u30ad\u30e3\u30f3\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30a8\u30e9\u30fc\u51e6\u7406\u3068\u7d50\u679c\u306e\u8fd4\u5374\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_29","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\ncount, err := PointLogs().Count(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"Total PointLog records: %d\\n\", count)\n</code></pre>"},{"location":"DB/model/point_logs.go/#exists","title":"<code>Exists</code> \u95a2\u6570","text":"<pre><code>// Exists checks if the row exists in the table.\nfunc (q pointLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {\n    var count int64\n\n    queries.SetSelect(q.Query, nil)\n    queries.SetCount(q.Query)\n    queries.SetLimit(q.Query, 1)\n\n    err := q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)\n    if err != nil {\n        return false, errors.Wrap(err, \"models: failed to check if point_logs exists\")\n    }\n\n    return count &gt; 0, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_30","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: \u30af\u30a8\u30ea\u306b\u4e00\u81f4\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>SELECT \u53e5\u3092\u30af\u30ea\u30a2\u3057\u3001COUNT \u30af\u30a8\u30ea\u306b\u5909\u63db\u3002</li> <li>\u30ea\u30df\u30c3\u30c8\u3092 1 \u306b\u8a2d\u5b9a\uff08\u5b58\u5728\u78ba\u8a8d\u306e\u305f\u3081\u306b\u6700\u5c0f\u9650\u306e\u30c7\u30fc\u30bf\u53d6\u5f97\uff09\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092 <code>count</code> \u306b\u30b9\u30ad\u30e3\u30f3\u3002</li> <li><code>count &gt; 0</code> \u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_31","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\nexists, err := PointLogs(qm.Where(\"user_id = ?\", 123)).Exists(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nif exists {\n    fmt.Println(\"PointLog exists for user_id 123\")\n} else {\n    fmt.Println(\"No PointLog found for user_id 123\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#user","title":"<code>User</code> \u95a2\u6570","text":"<pre><code>// User pointed to by the foreign key.\nfunc (o *PointLog) User(mods ...qm.QueryMod) userQuery {\n    queryMods := []qm.QueryMod{\n        qm.Where(\"`user_id` = ?\", o.UserID),\n    }\n\n    queryMods = append(queryMods, mods...)\n\n    return Users(queryMods...)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_32","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u304b\u3089\u95a2\u9023\u3059\u308b <code>User</code> \u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092\u751f\u6210\u3057\u307e\u3059\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30af\u30a8\u30ea\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u3092\u8a2d\u5b9a\u3057\u3001<code>user_id</code> \u3092\u6761\u4ef6\u306b\u8ffd\u52a0\u3002</li> <li>\u8ffd\u52a0\u306e\u30af\u30a8\u30ea\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u304c\u3042\u308c\u3070\u305d\u308c\u3089\u3092\u7d50\u5408\u3002</li> <li><code>Users</code> \u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3001\u30af\u30a8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_33","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\npointLog, err := FindPointLog(ctx, db, someTime, someUserID)\nif err != nil {\n    log.Fatal(err)\n}\n\nuser, err := pointLog.User().One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"User Name: %s\\n\", user.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#loaduser","title":"<code>LoadUser</code> \u95a2\u6570","text":"<pre><code>// LoadUser allows an eager lookup of values, cached into the\n// loaded structs of the objects. This is for an N-1 relationship.\nfunc (pointLogL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePointLog interface{}, mods queries.Applicator) error {\n    // \u95a2\u6570\u5185\u306e\u8a73\u7d30\u306a\u51e6\u7406...\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_34","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f\u305d\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u5bfe\u3057\u3066\u3001\u95a2\u9023\u3059\u308b <code>User</code> \u3092\u4e00\u62ec\u30ed\u30fc\u30c9\u3057\u307e\u3059\uff08Eager Loading\uff09\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>singular bool</code>: \u5358\u4e00\u306e <code>PointLog</code> \u304b\u8907\u6570\u304b\u3092\u6307\u5b9a\u3002</li> <li><code>maybePointLog interface{}</code>: <code>PointLog</code> \u307e\u305f\u306f <code>[]*PointLog</code> \u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002</li> <li><code>mods queries.Applicator</code>: \u30af\u30a8\u30ea\u306b\u9069\u7528\u3059\u308b\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_35","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u5224\u5b9a\u3068\u53d6\u5f97:</li> <li>\u5358\u4e00\u304b\u8907\u6570\u304b\u3092\u5224\u5b9a\u3057\u3001\u9069\u5207\u306a\u578b\u306b\u30a2\u30b5\u30fc\u30c8\u3057\u307e\u3059\u3002</li> <li>\u95a2\u9023\u3059\u308b UserID \u306e\u53ce\u96c6:</li> <li><code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u95a2\u9023\u3059\u308b <code>UserID</code> \u3092\u53ce\u96c6\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u306e\u4f5c\u6210\u3068\u5b9f\u884c:</li> <li><code>UserID</code> \u3092\u6761\u4ef6\u306b <code>users</code> \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u95a2\u9023\u3059\u308b <code>User</code> \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u7d50\u679c\u306e\u30de\u30c3\u30d4\u30f3\u30b0:</li> <li>\u53d6\u5f97\u3057\u305f <code>User</code> \u3092 <code>PointLog</code> \u306e\u30d5\u30a3\u30fc\u30eb\u30c9 <code>R.User</code> \u306b\u683c\u7d0d\u3057\u307e\u3059\u3002</li> <li><code>User</code> \u306e\u30d5\u30a3\u30fc\u30eb\u30c9 <code>R.PointLogs</code> \u306b\u3082\u95a2\u9023\u4ed8\u3051\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_36","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\npointLogs, err := PointLogs().All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u95a2\u9023\u3059\u308bUser\u3092\u4e00\u62ec\u30ed\u30fc\u30c9\nerr = pointLogL{}.LoadUser(ctx, db, false, &amp;pointLogs, nil)\nif err != nil {\n    log.Fatal(err)\n}\n\nfor _, log := range pointLogs {\n    fmt.Printf(\"PointLog CreatedAt: %s, User Name: %s\\n\", log.CreatedAt, log.R.User.Name)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#setuser","title":"<code>SetUser</code> \u95a2\u6570","text":"<pre><code>// SetUser of the pointLog to the related item.\n// Sets o.R.User to related.\n// Adds o to related.R.PointLogs.\nfunc (o *PointLog) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {\n    // \u95a2\u6570\u5185\u306e\u8a73\u7d30\u306a\u51e6\u7406...\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_37","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b <code>User</code> \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u53cc\u65b9\u5411\u306e\u95a2\u9023\u4ed8\u3051\u3082\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>insert bool</code>: <code>related</code> \u306a <code>User</code> \u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3059\u308b\u304b\u3069\u3046\u304b\u3002</li> <li><code>related *User</code>: \u95a2\u9023\u4ed8\u3051\u308b <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_38","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li><code>insert</code> \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u5834\u5408\u3001<code>related</code> \u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3057\u307e\u3059\u3002</li> <li><code>point_logs</code> \u30c6\u30fc\u30d6\u30eb\u306e <code>user_id</code> \u3092\u66f4\u65b0\u3057\u3001<code>related.UserID</code> \u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u95a2\u9023\u4ed8\u3051\u3092\u66f4\u65b0\u3057\u307e\u3059:</li> <li><code>o.R.User</code> \u306b <code>related</code> \u3092\u8a2d\u5b9a\u3002</li> <li><code>related.R.PointLogs</code> \u306b <code>o</code> \u3092\u8ffd\u52a0\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_39","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\nuser := &amp;User{Name: \"New User\"}\npointLog := &amp;PointLog{CreatedAt: time.Now()}\n\nerr = pointLog.SetUser(ctx, db, true, user)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"User and PointLog have been associated and saved.\")\n</code></pre>"},{"location":"DB/model/point_logs.go/#pointlogs","title":"<code>PointLogs</code> \u95a2\u6570","text":"<pre><code>// PointLogs retrieves all the records using an executor.\nfunc PointLogs(mods ...qm.QueryMod) pointLogQuery {\n    mods = append(mods, qm.From(\"`point_logs`\"))\n    q := NewQuery(mods...)\n    if len(queries.GetSelect(q)) == 0 {\n        queries.SetSelect(q, []string{\"`point_logs`.*\"})\n    }\n\n    return pointLogQuery{q}\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_40","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>point_logs</code> \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u751f\u6210\u3057\u307e\u3059\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30af\u30a8\u30ea\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u306b <code>FROM 'point_logs'</code> \u3092\u8ffd\u52a0\u3002</li> <li>\u65b0\u3057\u3044\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3002</li> <li>SELECT \u53e5\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001<code>point_logs</code> \u306e\u5168\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_41","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// \u7279\u5b9a\u306e\u6761\u4ef6\u3067PointLogs\u3092\u53d6\u5f97\npointLogs, err := PointLogs(qm.Where(\"user_id = ?\", 123)).All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfor _, log := range pointLogs {\n    fmt.Printf(\"PointLog CreatedAt: %s\\n\", log.CreatedAt)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#findpointlog","title":"<code>FindPointLog</code> \u95a2\u6570","text":"<pre><code>// FindPointLog retrieves a single record by ID with an executor.\n// If selectCols is empty Find will return all columns.\nfunc FindPointLog(ctx context.Context, exec boil.ContextExecutor, createdAt time.Time, userID uint, selectCols ...string) (*PointLog, error) {\n    pointLogObj := &amp;PointLog{}\n\n    sel := \"*\"\n    if len(selectCols) &gt; 0 {\n        sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), \",\")\n    }\n    query := fmt.Sprintf(\n        \"select %s from `point_logs` where `created_at`=? AND `user_id`=?\", sel,\n    )\n\n    q := queries.Raw(query, createdAt, userID)\n\n    err := q.Bind(ctx, exec, pointLogObj)\n    if err != nil {\n        if errors.Is(err, sql.ErrNoRows) {\n            return nil, sql.ErrNoRows\n        }\n        return nil, errors.Wrap(err, \"models: unable to select from point_logs\")\n    }\n\n    if err = pointLogObj.doAfterSelectHooks(ctx, exec); err != nil {\n        return pointLogObj, err\n    }\n\n    return pointLogObj, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_42","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: \u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\uff08<code>created_at</code> \u3068 <code>user_id</code>\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001\u5358\u4e00\u306e <code>PointLog</code> \u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li><code>selectCols</code> \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070\u3001\u305d\u306e\u30ab\u30e9\u30e0\u306e\u307f\u3092\u9078\u629e\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u3001\u6307\u5b9a\u3055\u308c\u305f <code>createdAt</code> \u3068 <code>userID</code> \u3067\u691c\u7d22\u3002</li> <li>\u7d50\u679c\u3092 <code>pointLogObj</code> \u306b\u30d0\u30a4\u30f3\u30c9\u3002</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406\u3068\u7d50\u679c\u306e\u8fd4\u5374\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_43","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\ncreatedAt := time.Now().Add(-24 * time.Hour)\nuserID := uint(123)\n\npointLog, err := FindPointLog(ctx, db, createdAt, userID)\nif err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        fmt.Println(\"No PointLog found.\")\n    } else {\n        log.Fatal(err)\n    }\n} else {\n    fmt.Printf(\"Found PointLog: %+v\\n\", pointLog)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#insert","title":"<code>Insert</code> \u95a2\u6570","text":"<pre><code>// Insert a single record using an executor.\n// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.\nfunc (o *PointLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {\n    // \u95a2\u6570\u5185\u306e\u8a73\u7d30\u306a\u51e6\u7406...\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_44","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u65b0\u898f\u633f\u5165\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>columns boil.Columns</code>: \u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u901a\u5e38\u306f <code>boil.Infer()</code> \u3092\u4f7f\u7528\u3057\u3066\u81ea\u52d5\u63a8\u8ad6\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_45","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u8a2d\u5b9a:</li> <li><code>CreatedAt</code> \u304c\u672a\u8a2d\u5b9a\u306e\u5834\u5408\u3001\u73fe\u5728\u6642\u523b\u3067\u8a2d\u5b9a\u3002</li> <li>BeforeInsert \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> <li>\u633f\u5165\u524d\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u5b9f\u884c\u3002</li> <li>\u30af\u30a8\u30ea\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u78ba\u8a8d\u3068\u69cb\u7bc9:</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\u306e\u305f\u3081\u3001\u30af\u30a8\u30ea\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u78ba\u8a8d\u3057\u3001\u306a\u3051\u308c\u3070\u69cb\u7bc9\u3002</li> <li>\u5024\u306e\u62bd\u51fa\u3068\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</li> <li>\u69cb\u7bc9\u3057\u305f\u30af\u30a8\u30ea\u306b\u5bfe\u3057\u3066\u3001\u5024\u3092\u6e21\u3057\u3066\u5b9f\u884c\u3002</li> <li>AfterInsert \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> <li>\u633f\u5165\u5f8c\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u5b9f\u884c\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_46","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\npointLog := &amp;PointLog{\n    UserID:    123,\n    CreatedAt: time.Now(),\n    // \u305d\u306e\u4ed6\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\n}\n\nerr = pointLog.Insert(ctx, db, boil.Infer())\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"PointLog has been inserted.\")\n</code></pre>"},{"location":"DB/model/point_logs.go/#update","title":"<code>Update</code> \u95a2\u6570","text":"<pre><code>// Update uses an executor to update the PointLog.\n// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.\n// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.\nfunc (o *PointLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {\n    var err error\n    if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {\n        return 0, err\n    }\n    key := makeCacheKey(columns, nil)\n    pointLogUpdateCacheMut.RLock()\n    cache, cached := pointLogUpdateCache[key]\n    pointLogUpdateCacheMut.RUnlock()\n\n    if !cached {\n        wl := columns.UpdateColumnSet(\n            pointLogAllColumns,\n            pointLogPrimaryKeyColumns,\n        )\n\n        if !columns.IsWhitelist() {\n            wl = strmangle.SetComplement(wl, []string{\"created_at\"})\n        }\n        if len(wl) == 0 {\n            return 0, errors.New(\"models: unable to update point_logs, could not build whitelist\")\n        }\n\n        cache.query = fmt.Sprintf(\"UPDATE `point_logs` SET %s WHERE %s\",\n            strmangle.SetParamNames(\"`\", \"`\", 0, wl),\n            strmangle.WhereClause(\"`\", \"`\", 0, pointLogPrimaryKeyColumns),\n        )\n        cache.valueMapping, err = queries.BindMapping(pointLogType, pointLogMapping, append(wl, pointLogPrimaryKeyColumns...))\n        if err != nil {\n            return 0, err\n        }\n    }\n\n    values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, cache.query)\n        fmt.Fprintln(writer, values)\n    }\n    var result sql.Result\n    result, err = exec.ExecContext(ctx, cache.query, values...)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to update point_logs row\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by update for point_logs\")\n    }\n\n    if !cached {\n        pointLogUpdateCacheMut.Lock()\n        pointLogUpdateCache[key] = cache\n        pointLogUpdateCacheMut.Unlock()\n    }\n\n    return rowsAff, o.doAfterUpdateHooks(ctx, exec)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_47","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3067\u3059\u3002</li> <li><code>columns boil.Columns</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_48","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>BeforeUpdate \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> <li>\u66f4\u65b0\u524d\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u4f5c\u6210\u3068\u30c1\u30a7\u30c3\u30af:</li> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f7f\u7528\u3057\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u307e\u3059\u3002</li> <li>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7:</li> <li><code>columns.UpdateColumnSet</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u66f4\u65b0\u5bfe\u8c61\u306e\u30ab\u30e9\u30e0\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002</li> <li><code>columns</code> \u304c\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u3067\u306a\u3044\u5834\u5408\u3001<code>created_at</code> \u30ab\u30e9\u30e0\u3092\u9664\u5916\u3057\u307e\u3059\u3002</li> <li>\u66f4\u65b0\u3059\u3079\u304d\u30ab\u30e9\u30e0\u304c\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</li> <li><code>UPDATE</code> \u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u8a2d\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u3068\u6761\u4ef6\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u5024\u306e\u30de\u30c3\u30d4\u30f3\u30b0:</li> <li><code>cache.valueMapping</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</li> <li>\u69cb\u7bc9\u3057\u305f\u30af\u30a8\u30ea\u3068\u5024\u3067 <code>exec.ExecContext</code> \u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97:</li> <li><code>result.RowsAffected()</code> \u3067\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>AfterUpdate \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> <li>\u66f4\u65b0\u5f8c\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_49","title":"\u6ce8\u610f\u70b9","text":"<ul> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3082\u3001\u81ea\u52d5\u7684\u306b\u30ec\u30b3\u30fc\u30c9\u306f\u66f4\u65b0\u3055\u308c\u307e\u305b\u3093\u3002\u6700\u65b0\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f\u3001<code>.Reload()</code> \u3092\u4f7f\u7528\u3057\u3066\u30ec\u30b3\u30fc\u30c9\u3092\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_50","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// \u66f4\u65b0\u3057\u305f\u3044PointLog\u3092\u53d6\u5f97\npointLog, err := FindPointLog(ctx, db, someTime, someUserID)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\npointLog.Points = 100\n\n// \u66f4\u65b0\u3092\u5b9f\u884c\nrowsAff, err := pointLog.Update(ctx, db, boil.Infer()) // \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3092\u81ea\u52d5\u63a8\u8ad6\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"Updated %d rows.\\n\", rowsAff)\n\n// \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30ec\u30b3\u30fc\u30c9\u3092\u30ea\u30ed\u30fc\u30c9\nerr = pointLog.Reload(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#updateall","title":"<code>UpdateAll</code> \u95a2\u6570","text":"<pre><code>// UpdateAll updates all rows with the specified column values.\nfunc (q pointLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {\n    queries.SetUpdate(q.Query, cols)\n\n    result, err := q.Query.ExecContext(ctx, exec)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to update all for point_logs\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to retrieve rows affected for point_logs\")\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_51","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: \u30af\u30a8\u30ea\u306b\u4e00\u81f4\u3059\u308b\u3059\u3079\u3066\u306e <code>PointLog</code> \u30ec\u30b3\u30fc\u30c9\u3092\u4e00\u62ec\u3067\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>cols M</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3068\u5024\u306e\u30de\u30c3\u30d7\u3002<code>M</code> \u306f <code>map[string]interface{}</code> \u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_52","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u306e\u8a2d\u5b9a:</li> <li><code>queries.SetUpdate</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3068\u5024\u3092\u30af\u30a8\u30ea\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97:</li> <li><code>result.RowsAffected()</code> \u3067\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_53","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// user_id\u304c123\u306ePointLog\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u4e00\u62ec\u3067200\u306b\u66f4\u65b0\nrowsAff, err := PointLogs(qm.Where(\"user_id = ?\", 123)).UpdateAll(ctx, db, M{\n    \"points\": 200,\n})\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"Updated %d rows.\\n\", rowsAff)\n</code></pre>"},{"location":"DB/model/point_logs.go/#updateall_1","title":"<code>UpdateAll</code> \u30e1\u30bd\u30c3\u30c9\uff08\u30b9\u30e9\u30a4\u30b9\u7528\uff09","text":"<pre><code>// UpdateAll updates all rows with the specified column values, using an executor.\nfunc (o PointLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {\n    ln := int64(len(o))\n    if ln == 0 {\n        return 0, nil\n    }\n\n    if len(cols) == 0 {\n        return 0, errors.New(\"models: update all requires at least one column argument\")\n    }\n\n    // \u4ee5\u4e0b\u3001\u66f4\u65b0\u51e6\u7406\u306e\u5b9f\u88c5...\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_54","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u306e\u30b9\u30e9\u30a4\u30b9\uff08\u8907\u6570\u306e\u30ec\u30b3\u30fc\u30c9\uff09\u306b\u5bfe\u3057\u3066\u3001\u4e00\u62ec\u3067\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>cols M</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3068\u5024\u306e\u30de\u30c3\u30d7\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_55","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30ec\u30b3\u30fc\u30c9\u6570\u306e\u78ba\u8a8d:</li> <li>\u30b9\u30e9\u30a4\u30b9\u304c\u7a7a\u306e\u5834\u5408\u306f\u3001\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3057\u307e\u3059\u3002</li> <li>\u66f4\u65b0\u30ab\u30e9\u30e0\u306e\u78ba\u8a8d:</li> <li>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</li> <li>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u540d\u3068\u5024\u3092\u6e96\u5099\u3057\u307e\u3059\u3002</li> <li>\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3001\u5404\u30ec\u30b3\u30fc\u30c9\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306e\u6761\u4ef6\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</li> <li>\u69cb\u7bc9\u3057\u305f\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_56","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// PointLog\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u53d6\u5f97\npointLogs, err := PointLogs(qm.Where(\"user_id = ?\", 123)).All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5168\u3066\u306ePointLog\u306e\u30dd\u30a4\u30f3\u30c8\u3092300\u306b\u66f4\u65b0\nrowsAff, err := pointLogs.UpdateAll(ctx, db, M{\n    \"points\": 300,\n})\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"Updated %d rows.\\n\", rowsAff)\n</code></pre>"},{"location":"DB/model/point_logs.go/#upsert","title":"<code>Upsert</code> \u95a2\u6570","text":"<pre><code>var mySQLPointLogUniqueColumns = []string{}\n\n// Upsert attempts an insert using an executor, and does an update or ignore on conflict.\n// See boil.Columns documentation for how to properly use updateColumns and insertColumns.\nfunc (o *PointLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {\n    if o == nil {\n        return errors.New(\"models: no point_logs provided for upsert\")\n    }\n    if !boil.TimestampsAreSkipped(ctx) {\n        currTime := time.Now().In(boil.GetLocation())\n\n        if o.CreatedAt.IsZero() {\n            o.CreatedAt = currTime\n        }\n    }\n\n    if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {\n        return err\n    }\n\n    // \u4ee5\u4e0b\u3001Upsert\u51e6\u7406\u306e\u5b9f\u88c5...\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_57","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u633f\u5165\u3057\u3001\u30e6\u30cb\u30fc\u30af\u5236\u7d04\u306b\u9055\u53cd\u3059\u308b\u5834\u5408\u306f\u66f4\u65b0\u307e\u305f\u306f\u7121\u8996\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>updateColumns boil.Columns</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</li> <li><code>insertColumns boil.Columns</code>: \u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_58","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30c1\u30a7\u30c3\u30af\u3068\u521d\u671f\u8a2d\u5b9a:</li> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c <code>nil</code> \u3067\u306a\u3044\u304b\u78ba\u8a8d\u3002</li> <li>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u8a2d\u5b9a\u3002</li> <li>BeforeUpsert \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> <li>Upsert \u524d\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u5b9f\u884c\u3002</li> <li>\u30e6\u30cb\u30fc\u30af\u30ab\u30e9\u30e0\u306e\u78ba\u8a8d:</li> <li><code>mySQLPointLogUniqueColumns</code> \u306b\u57fa\u3065\u3044\u3066\u3001\u30e6\u30cb\u30fc\u30af\u306a\u30ab\u30e9\u30e0\u3092\u78ba\u8a8d\u3002</li> <li>\u30e6\u30cb\u30fc\u30af\u30ab\u30e9\u30e0\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u4f5c\u6210\u3068\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</li> <li>\u30af\u30a8\u30ea\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u307e\u3059\u3002</li> <li><code>INSERT</code> \u30af\u30a8\u30ea\u3068 <code>ON DUPLICATE KEY UPDATE</code> \u90e8\u5206\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>AfterUpsert \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> <li>Upsert \u5f8c\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u5b9f\u884c\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_59","title":"\u6ce8\u610f\u70b9","text":"<ul> <li>\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001<code>mySQLPointLogUniqueColumns</code> \u304c\u7a7a\u306e\u305f\u3081\u3001\u30e6\u30cb\u30fc\u30af\u30ab\u30e9\u30e0\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002</li> <li>\u6b63\u3057\u304f\u52d5\u4f5c\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u3001\u30e6\u30cb\u30fc\u30af\u5236\u7d04\u3092\u6301\u3064\u30ab\u30e9\u30e0\u3092 <code>mySQLPointLogUniqueColumns</code> \u306b\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_60","title":"\u5229\u7528\u4f8b","text":"<pre><code>// \u4f8b\u3068\u3057\u3066\u3001\u30e6\u30cb\u30fc\u30af\u30ab\u30e9\u30e0\u3092\u8a2d\u5b9a\nvar mySQLPointLogUniqueColumns = []string{\"user_id\", \"created_at\"}\n\n// \u4ee5\u4e0b\u3001Upsert\u306e\u5229\u7528\u4f8b\nctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\npointLog := &amp;PointLog{\n    UserID:    123,\n    CreatedAt: time.Now(),\n    Points:    100,\n}\n\n// \u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3068\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\ninsertCols := boil.Whitelist(\"user_id\", \"created_at\", \"points\")\nupdateCols := boil.Whitelist(\"points\")\n\nerr = pointLog.Upsert(ctx, db, updateCols, insertCols)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"Upsert completed.\")\n</code></pre>"},{"location":"DB/model/point_logs.go/#delete","title":"<code>Delete</code> \u95a2\u6570","text":"<pre><code>// Delete deletes a single PointLog record with an executor.\n// Delete will match against the primary key column to find the record to delete.\nfunc (o *PointLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    if o == nil {\n        return 0, errors.New(\"models: no PointLog provided for delete\")\n    }\n\n    if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {\n        return 0, err\n    }\n\n    args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pointLogPrimaryKeyMapping)\n    sql := \"DELETE FROM `point_logs` WHERE `created_at`=? AND `user_id`=?\"\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, args...)\n    }\n    result, err := exec.ExecContext(ctx, sql, args...)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to delete from point_logs\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by delete for point_logs\")\n    }\n\n    if err := o.doAfterDeleteHooks(ctx, exec); err != nil {\n        return 0, err\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_61","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_62","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30c1\u30a7\u30c3\u30af:</li> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c <code>nil</code> \u3067\u306a\u3044\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> <li>BeforeDelete \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> <li>\u524a\u9664\u524d\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u524a\u9664\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</li> <li>\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\uff08<code>created_at</code> \u3068 <code>user_id</code>\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001\u524a\u9664\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</li> <li>\u69cb\u7bc9\u3057\u305f\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97:</li> <li><code>result.RowsAffected()</code> \u3067\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>AfterDelete \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> <li>\u524a\u9664\u5f8c\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_63","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// \u524a\u9664\u3057\u305f\u3044PointLog\u3092\u53d6\u5f97\npointLog, err := FindPointLog(ctx, db, someTime, someUserID)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u524a\u9664\u3092\u5b9f\u884c\nrowsAff, err := pointLog.Delete(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"Deleted %d rows.\\n\", rowsAff)\n</code></pre>"},{"location":"DB/model/point_logs.go/#deleteall","title":"<code>DeleteAll</code> \u95a2\u6570\uff08\u30af\u30a8\u30ea\u7528\uff09","text":"<pre><code>// DeleteAll deletes all matching rows.\nfunc (q pointLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    if q.Query == nil {\n        return 0, errors.New(\"models: no pointLogQuery provided for delete all\")\n    }\n\n    queries.SetDelete(q.Query)\n\n    result, err := q.Query.ExecContext(ctx, exec)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to delete all from point_logs\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by deleteall for point_logs\")\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_64","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>pointLogQuery</code> \u306b\u57fa\u3065\u3044\u3066\u3001\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u3059\u3079\u3066\u306e <code>PointLog</code> \u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u6e21\u3057\u307e\u3059\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3067\u3059\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_65","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30af\u30a8\u30ea\u306e\u691c\u8a3c:</li> <li>\u30af\u30a8\u30ea\u304c <code>nil</code> \u3067\u306a\u3044\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> <li> <p><code>nil</code> \u306e\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u524a\u9664\u30af\u30a8\u30ea\u306e\u8a2d\u5b9a:</p> </li> <li> <p><code>queries.SetDelete(q.Query)</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u30af\u30a8\u30ea\u3092\u524a\u9664\u64cd\u4f5c\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</p> </li> <li> <p><code>q.Query.ExecContext(ctx, exec)</code> \u3092\u4f7f\u7528\u3057\u3066\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97:</p> </li> <li> <p><code>result.RowsAffected()</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u7d50\u679c\u306e\u8fd4\u5374:</p> </li> <li>\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3068\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_66","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// \u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308bPointLog\u3092\u3059\u3079\u3066\u524a\u9664\uff08\u4f8b\uff1auser_id\u304c123\u306e\u30ec\u30b3\u30fc\u30c9\uff09\nrowsAff, err := PointLogs(qm.Where(\"user_id = ?\", 123)).DeleteAll(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"Deleted %d rows.\\n\", rowsAff)\n</code></pre>"},{"location":"DB/model/point_logs.go/#deleteall_1","title":"<code>DeleteAll</code> \u95a2\u6570\uff08\u30b9\u30e9\u30a4\u30b9\u7528\uff09","text":"<pre><code>// DeleteAll deletes all rows in the slice, using an executor.\nfunc (o PointLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    if len(o) == 0 {\n        return 0, nil\n    }\n\n    if len(pointLogBeforeDeleteHooks) != 0 {\n        for _, obj := range o {\n            if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {\n                return 0, err\n            }\n        }\n    }\n\n    var args []interface{}\n    for _, obj := range o {\n        pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pointLogPrimaryKeyMapping)\n        args = append(args, pkeyArgs...)\n    }\n\n    sql := \"DELETE FROM `point_logs` WHERE \" +\n        strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pointLogPrimaryKeyColumns, len(o))\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, args)\n    }\n    result, err := exec.ExecContext(ctx, sql, args...)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to delete all from pointLog slice\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by deleteall for point_logs\")\n    }\n\n    if len(pointLogAfterDeleteHooks) != 0 {\n        for _, obj := range o {\n            if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {\n                return 0, err\n            }\n        }\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_67","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLogSlice</code>\uff08<code>PointLog</code> \u306e\u30b9\u30e9\u30a4\u30b9\uff09\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>o PointLogSlice</code>: \u524a\u9664\u5bfe\u8c61\u306e <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_68","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30b9\u30e9\u30a4\u30b9\u306e\u691c\u8a3c:</li> <li> <p>\u30b9\u30e9\u30a4\u30b9\u306e\u9577\u3055\u304c0\u3067\u3042\u308c\u3070\u3001\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3057\u307e\u3059\u3002</p> </li> <li> <p>BeforeDelete \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</p> </li> <li> <p>\u524a\u9664\u524d\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u524a\u9664\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</p> </li> <li> <p>\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3092\u53ce\u96c6\u3057\u3001\u524a\u9664\u30af\u30a8\u30ea\u306e\u6761\u4ef6\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</p> </li> <li> <p>\u69cb\u7bc9\u3057\u305f\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97:</p> </li> <li> <p><code>result.RowsAffected()</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>AfterDelete \u30d5\u30c3\u30af\u306e\u5b9f\u884c:</p> </li> <li>\u524a\u9664\u5f8c\u306e\u30d5\u30c3\u30af\u304c\u3042\u308c\u3070\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_69","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// \u524a\u9664\u5bfe\u8c61\u306ePointLog\u3092\u53d6\u5f97\npointLogs, err := PointLogs(qm.Where(\"user_id = ?\", 123)).All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30b9\u30e9\u30a4\u30b9\u5185\u306ePointLog\u3092\u3059\u3079\u3066\u524a\u9664\nrowsAff, err := pointLogs.DeleteAll(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"Deleted %d rows.\\n\", rowsAff)\n</code></pre>"},{"location":"DB/model/point_logs.go/#reload","title":"<code>Reload</code> \u95a2\u6570","text":"<pre><code>// Reload refetches the object from the database\n// using the primary keys with an executor.\nfunc (o *PointLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {\n    ret, err := FindPointLog(ctx, exec, o.CreatedAt, o.UserID)\n    if err != nil {\n        return err\n    }\n\n    *o = *ret\n    return nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_70","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u518d\u53d6\u5f97\u3057\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6700\u65b0\u306e\u72b6\u614b\u306b\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30c7\u30fc\u30bf\u306e\u518d\u53d6\u5f97:<ul> <li>\u73fe\u5728\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\uff08<code>CreatedAt</code> \u3068 <code>UserID</code>\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001<code>FindPointLog</code> \u95a2\u6570\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u66f4\u65b0:<ul> <li>\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3067\u73fe\u5728\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> </ul> </li> </ul>"},{"location":"DB/model/point_logs.go/#_71","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// \u65e2\u5b58\u306ePointLog\u3092\u53d6\u5f97\npointLog, err := FindPointLog(ctx, db, someTime, someUserID)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u4ed6\u306e\u51e6\u7406\u3067\u30c7\u30fc\u30bf\u304c\u66f4\u65b0\u3055\u308c\u305f\u3068\u4eee\u5b9a\u3057\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ea\u30ed\u30fc\u30c9\nerr = pointLog.Reload(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"Reloaded PointLog: %+v\\n\", pointLog)\n</code></pre>"},{"location":"DB/model/point_logs.go/#reloadall","title":"<code>ReloadAll</code> \u95a2\u6570","text":"<pre><code>// ReloadAll refetches every row with matching primary key column values\n// and overwrites the original object slice with the newly updated slice.\nfunc (o *PointLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {\n    if o == nil || len(*o) == 0 {\n        return nil\n    }\n\n    slice := PointLogSlice{}\n    var args []interface{}\n    for _, obj := range *o {\n        pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pointLogPrimaryKeyMapping)\n        args = append(args, pkeyArgs...)\n    }\n\n    sql := \"SELECT `point_logs`.* FROM `point_logs` WHERE \" +\n        strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pointLogPrimaryKeyColumns, len(*o))\n\n    q := queries.Raw(sql, args...)\n\n    err := q.Bind(ctx, exec, &amp;slice)\n    if err != nil {\n        return errors.Wrap(err, \"models: unable to reload all in PointLogSlice\")\n    }\n\n    *o = slice\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_72","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLogSlice</code> \u5185\u306e\u5168\u3066\u306e <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u518d\u53d6\u5f97\u3057\u3001\u30b9\u30e9\u30a4\u30b9\u3092\u6700\u65b0\u306e\u72b6\u614b\u306b\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30b9\u30e9\u30a4\u30b9\u306e\u691c\u8a3c:<ul> <li>\u30b9\u30e9\u30a4\u30b9\u304c <code>nil</code> \u307e\u305f\u306f\u7a7a\u306e\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30c7\u30fc\u30bf\u306e\u518d\u53d6\u5f97:<ul> <li>\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3092\u53ce\u96c6\u3057\u3001\u305d\u308c\u3089\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u4e00\u62ec\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30b9\u30e9\u30a4\u30b9\u306e\u66f4\u65b0:<ul> <li>\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3067\u30b9\u30e9\u30a4\u30b9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> </ul> </li> </ul>"},{"location":"DB/model/point_logs.go/#_73","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// PointLog\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u53d6\u5f97\npointLogs, err := PointLogs(qm.Where(\"user_id = ?\", 123)).All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30b9\u30e9\u30a4\u30b9\u5185\u306ePointLog\u3092\u3059\u3079\u3066\u30ea\u30ed\u30fc\u30c9\nerr = (&amp;pointLogs).ReloadAll(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"Reloaded all PointLogs.\")\n</code></pre>"},{"location":"DB/model/point_logs.go/#pointlogexists","title":"<code>PointLogExists</code> \u95a2\u6570","text":"<pre><code>// PointLogExists checks if the PointLog row exists.\nfunc PointLogExists(ctx context.Context, exec boil.ContextExecutor, createdAt time.Time, userID uint) (bool, error) {\n    var exists bool\n    sql := \"select exists(select 1 from `point_logs` where `created_at`=? AND `user_id`=? limit 1)\"\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, createdAt, userID)\n    }\n    row := exec.QueryRowContext(ctx, sql, createdAt, userID)\n\n    err := row.Scan(&amp;exists)\n    if err != nil {\n        return false, errors.Wrap(err, \"models: unable to check if point_logs exists\")\n    }\n\n    return exists, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_74","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: \u6307\u5b9a\u3057\u305f\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\uff08<code>createdAt</code> \u3068 <code>userID</code>\uff09\u306b\u8a72\u5f53\u3059\u308b <code>PointLog</code> \u30ec\u30b3\u30fc\u30c9\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>createdAt time.Time</code>: \u30ec\u30b3\u30fc\u30c9\u306e <code>CreatedAt</code> \u5024\u3002</li> <li><code>userID uint</code>: \u30ec\u30b3\u30fc\u30c9\u306e <code>UserID</code> \u5024\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>bool</code>: \u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308c\u3070 <code>true</code>\u3001\u5b58\u5728\u3057\u306a\u3051\u308c\u3070 <code>false</code> \u3092\u8fd4\u3057\u307e\u3059\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_75","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30af\u30a8\u30ea\u306e\u4f5c\u6210:</li> <li> <p><code>EXISTS</code> \u3092\u4f7f\u3063\u305f\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u6307\u5b9a\u3057\u305f\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u306b\u4e00\u81f4\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u53d6\u5f97:</p> </li> <li> <p>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092 <code>exists</code> \u5909\u6570\u306b\u30b9\u30ad\u30e3\u30f3\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u7d50\u679c\u306e\u8fd4\u5374:</p> </li> <li>\u30ec\u30b3\u30fc\u30c9\u306e\u5b58\u5728\u6709\u7121\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/point_logs.go/#_76","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\ncreatedAt := time.Now().Add(-24 * time.Hour)\nuserID := uint(123)\n\nexists, err := PointLogExists(ctx, db, createdAt, userID)\nif err != nil {\n    log.Fatal(err)\n}\n\nif exists {\n    fmt.Println(\"The PointLog exists.\")\n} else {\n    fmt.Println(\"The PointLog does not exist.\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#exists_1","title":"<code>Exists</code> \u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// Exists checks if the PointLog row exists.\nfunc (o *PointLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {\n    return PointLogExists(ctx, exec, o.CreatedAt, o.UserID)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_77","title":"\u89e3\u8aac","text":"<ul> <li>\u76ee\u7684: <code>PointLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li><code>PointLogExists</code> \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057:<ul> <li>\u73fe\u5728\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3001<code>PointLogExists</code> \u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u7d50\u679c\u306e\u8fd4\u5374:<ul> <li>\u30ec\u30b3\u30fc\u30c9\u306e\u5b58\u5728\u6709\u7121\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul> </li> </ul>"},{"location":"DB/model/point_logs.go/#_78","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\ndefer db.Close()\n\n// \u65e2\u5b58\u306ePointLog\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\npointLog := &amp;PointLog{\n    CreatedAt: someTime,\n    UserID:    someUserID,\n}\n\n// \u30ec\u30b3\u30fc\u30c9\u306e\u5b58\u5728\u3092\u78ba\u8a8d\nexists, err := pointLog.Exists(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nif exists {\n    fmt.Println(\"The PointLog exists.\")\n} else {\n    fmt.Println(\"The PointLog does not exist.\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichy","title":"Seichy\u69cb\u9020\u4f53\u3068\u95a2\u9023\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u89e3\u8aac","text":"<p><code>Seichy</code>\u69cb\u9020\u4f53\u3068\u305d\u306e\u95a2\u9023\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u3001\u958b\u767a\u8005\u5411\u3051\u306b\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u3066\u3044\u307e\u3059\u3002\u5404\u30b3\u30fc\u30c9\u90e8\u5206\u306e\u5f79\u5272\u3084\u5229\u7528\u65b9\u6cd5\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u52b9\u679c\u7684\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_79","title":"\u306f\u3058\u3081\u306b","text":"<p><code>Seichy</code>\u69cb\u9020\u4f53\u306f\u3001SQLBoiler\u3092\u4f7f\u7528\u3057\u3066\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u3059\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\u3053\u306e\u69cb\u9020\u4f53\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u52b9\u7387\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#seichy_1","title":"Seichy\u69cb\u9020\u4f53\u306e\u5b9a\u7fa9","text":"<pre><code>// Seichy\u306f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u3059\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\ntype Seichy struct {\n    SeichiID   int           `boil:\"seichi_id\" json:\"seichi_id\" toml:\"seichi_id\" yaml:\"seichi_id\"`\n    UserID     uint          `boil:\"user_id\" json:\"user_id\" toml:\"user_id\" yaml:\"user_id\"`\n    SeichiName string        `boil:\"seichi_name\" json:\"seichi_name\" toml:\"seichi_name\" yaml:\"seichi_name\"`\n    Comment    null.String   `boil:\"comment\" json:\"comment,omitempty\" toml:\"comment\" yaml:\"comment,omitempty\"`\n    Latitude   types.Decimal `boil:\"latitude\" json:\"latitude\" toml:\"latitude\" yaml:\"latitude\"`\n    Longitude  types.Decimal `boil:\"longitude\" json:\"longitude\" toml:\"longitude\" yaml:\"longitude\"`\n    PlaceID    int           `boil:\"place_id\" json:\"place_id\" toml:\"place_id\" yaml:\"place_id\"`\n    ContentID  int           `boil:\"content_id\" json:\"content_id\" toml:\"content_id\" yaml:\"content_id\"`\n    CreatedAt  null.Time     `boil:\"created_at\" json:\"created_at,omitempty\" toml:\"created_at\" yaml:\"created_at,omitempty\"`\n    UpdatedAt  null.Time     `boil:\"updated_at\" json:\"updated_at,omitempty\" toml:\"updated_at\" yaml:\"updated_at,omitempty\"`\n\n    R *seichyR `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n    L seichyL  `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_80","title":"\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u89e3\u8aac","text":"<ul> <li>SeichiID (<code>int</code>): \u8056\u5730\u306e\u4e00\u610f\u306a\u8b58\u5225\u5b50\u3002\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3068\u3057\u3066\u6a5f\u80fd\u3057\u307e\u3059\u3002</li> <li>UserID (<code>uint</code>): \u8056\u5730\u3092\u767b\u9332\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306eID\u3002\u5916\u90e8\u30ad\u30fc\u3068\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u30c6\u30fc\u30d6\u30eb\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u307e\u3059\u3002</li> <li>SeichiName (<code>string</code>): \u8056\u5730\u306e\u540d\u524d\u3002</li> <li>Comment (<code>null.String</code>): \u8056\u5730\u306b\u95a2\u3059\u308b\u30b3\u30e1\u30f3\u30c8\u3002<code>null</code>\u3092\u8a31\u5bb9\u3059\u308b\u305f\u3081<code>null.String</code>\u578b\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>Latitude (<code>types.Decimal</code>): \u8056\u5730\u306e\u7def\u5ea6\u3002<code>types.Decimal</code>\u578b\u306f\u6b63\u78ba\u306a\u5c0f\u6570\u70b9\u6570\u3092\u8868\u73fe\u3057\u307e\u3059\u3002</li> <li>Longitude (<code>types.Decimal</code>): \u8056\u5730\u306e\u7d4c\u5ea6\u3002</li> <li>PlaceID (<code>int</code>): \u5834\u6240\u306eID\u3002<code>Place</code>\u30c6\u30fc\u30d6\u30eb\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u307e\u3059\u3002</li> <li>ContentID (<code>int</code>): \u30b3\u30f3\u30c6\u30f3\u30c4\u306eID\u3002<code>Content</code>\u30c6\u30fc\u30d6\u30eb\u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u307e\u3059\u3002</li> <li>CreatedAt (<code>null.Time</code>): \u30ec\u30b3\u30fc\u30c9\u306e\u4f5c\u6210\u65e5\u6642\u3002\u81ea\u52d5\u751f\u6210\u3055\u308c\u3001<code>null</code>\u3092\u8a31\u5bb9\u3057\u307e\u3059\u3002</li> <li>UpdatedAt (<code>null.Time</code>): \u30ec\u30b3\u30fc\u30c9\u306e\u66f4\u65b0\u65e5\u6642\u3002\u81ea\u52d5\u751f\u6210\u3055\u308c\u3001<code>null</code>\u3092\u8a31\u5bb9\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_81","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a3\u30fc\u30eb\u30c9","text":"<ul> <li>R (<code>*seichyR</code>): \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3002</li> <li>L (<code>seichyL</code>): \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30ed\u30fc\u30c9\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30d5\u30a3\u30fc\u30eb\u30c9\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_82","title":"\u30ab\u30e9\u30e0\u540d\u306e\u5b9a\u7fa9","text":"<pre><code>var SeichyColumns = struct {\n    SeichiID   string\n    UserID     string\n    SeichiName string\n    Comment    string\n    Latitude   string\n    Longitude  string\n    PlaceID    string\n    ContentID  string\n    CreatedAt  string\n    UpdatedAt  string\n}{\n    SeichiID:   \"seichi_id\",\n    UserID:     \"user_id\",\n    SeichiName: \"seichi_name\",\n    Comment:    \"comment\",\n    Latitude:   \"latitude\",\n    Longitude:  \"longitude\",\n    PlaceID:    \"place_id\",\n    ContentID:  \"content_id\",\n    CreatedAt:  \"created_at\",\n    UpdatedAt:  \"updated_at\",\n}\n</code></pre> <p>\u30ab\u30e9\u30e0\u540d\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u308b\u969b\u306b\u30bf\u30a4\u30dd\u306a\u3069\u306e\u30df\u30b9\u3092\u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#sqlboilerwhere","title":"SQLBoiler\u306b\u3088\u308bWhere\u30d8\u30eb\u30d1\u30fc\u306e\u751f\u6210","text":"<p><code>whereHelper</code>\u69cb\u9020\u4f53\u306f\u3001\u30af\u30a8\u30ea\u6761\u4ef6\u3092\u7c21\u6f54\u306b\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u3067\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#nullstringwhere","title":"null.String\u7528\u306eWhere\u30d8\u30eb\u30d1\u30fc","text":"<pre><code>type whereHelpernull_String struct{ field string }\n\n// \u7b49\u4fa1\u6bd4\u8f03\nfunc (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {\n    return qmhelper.WhereNullEQ(w.field, false, x)\n}\n\n// \u975e\u7b49\u4fa1\u6bd4\u8f03\nfunc (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {\n    return qmhelper.WhereNullEQ(w.field, true, x)\n}\n\n// \u305d\u306e\u4ed6\u306e\u6bd4\u8f03\u6f14\u7b97\u5b50\nfunc (w whereHelpernull_String) LT(x null.String) qm.QueryMod { /* ... */ }\nfunc (w whereHelpernull_String) LTE(x null.String) qm.QueryMod { /* ... */ }\nfunc (w whereHelpernull_String) GT(x null.String) qm.QueryMod { /* ... */ }\nfunc (w whereHelpernull_String) GTE(x null.String) qm.QueryMod { /* ... */ }\n\n// LIKE\u53e5\nfunc (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {\n    return qm.Where(w.field+\" LIKE ?\", x)\n}\n\n// IN\u53e5\nfunc (w whereHelpernull_String) IN(slice []string) qm.QueryMod { /* ... */ }\n</code></pre> <p>\u3053\u308c\u3089\u306e\u30d8\u30eb\u30d1\u30fc\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u6761\u4ef6\u4ed8\u304d\u30af\u30a8\u30ea\u3092\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#seichywhere","title":"SeichyWhere\u69cb\u9020\u4f53","text":"<pre><code>var SeichyWhere = struct {\n    SeichiID   whereHelperint\n    UserID     whereHelperuint\n    SeichiName whereHelperstring\n    Comment    whereHelpernull_String\n    Latitude   whereHelpertypes_Decimal\n    Longitude  whereHelpertypes_Decimal\n    PlaceID    whereHelperint\n    ContentID  whereHelperint\n    CreatedAt  whereHelpernull_Time\n    UpdatedAt  whereHelpernull_Time\n}{\n    SeichiID:   whereHelperint{field: \"`seichies`.`seichi_id`\"},\n    UserID:     whereHelperuint{field: \"`seichies`.`user_id`\"},\n    SeichiName: whereHelperstring{field: \"`seichies`.`seichi_name`\"},\n    // \u7701\u7565\n}\n</code></pre> <p><code>SeichyWhere</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u30af\u30a8\u30ea\u5185\u3067\u306e\u6761\u4ef6\u6307\u5b9a\u3092\u7c21\u6f54\u306b\u884c\u3048\u307e\u3059\u3002</p> <p>\u5229\u7528\u4f8b:</p> <pre><code>seichies, err := models.Seichies(\n    models.SeichyWhere.SeichiName.LIKE(\"%\u795e\u793e%\"),\n).All(ctx, db)\n</code></pre>"},{"location":"DB/model/point_logs.go/#_83","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u5b9a\u7fa9","text":"<pre><code>// SeichyRels\u306f\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u540d\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\nvar SeichyRels = struct {\n    User    string\n    Place   string\n    Content string\n}{\n    User:    \"User\",\n    Place:   \"Place\",\n    Content: \"Content\",\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_84","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u7528\u69cb\u9020\u4f53","text":"<pre><code>// seichyR\u306f\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\ntype seichyR struct {\n    User    *User    `boil:\"User\" json:\"User\" toml:\"User\" yaml:\"User\"`\n    Place   *Place   `boil:\"Place\" json:\"Place\" toml:\"Place\" yaml:\"Place\"`\n    Content *Content `boil:\"Content\" json:\"Content\" toml:\"Content\" yaml:\"Content\"`\n}\n</code></pre> <p>\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3067\u3001\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u4e00\u5ea6\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p> <p>\u5229\u7528\u4f8b:</p> <pre><code>seichi, err := models.Seichies(\n    qm.Load(models.SeichyRels.User),\n).One(ctx, db)\n\nfmt.Println(seichi.R.User.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#_85","title":"\u30ad\u30e3\u30c3\u30b7\u30f3\u30b0\u3068\u540c\u671f","text":"<pre><code>var (\n    seichyInsertCacheMut       sync.RWMutex\n    seichyInsertCache          = make(map[string]insertCache)\n    seichyUpdateCacheMut       sync.RWMutex\n    seichyUpdateCache          = make(map[string]updateCache)\n    seichyUpsertCacheMut       sync.RWMutex\n    seichyUpsertCache          = make(map[string]insertCache)\n)\n</code></pre> <p>\u30af\u30a8\u30ea\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306b\u3001\u633f\u5165\u30fb\u66f4\u65b0\u30fb\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u6d3b\u7528\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_86","title":"\u30d5\u30c3\u30af\u306e\u5b9a\u7fa9","text":"<pre><code>var seichyAfterSelectMu sync.Mutex\nvar seichyAfterSelectHooks []SeichyHook\n// \u305d\u306e\u4ed6\u306e\u30d5\u30c3\u30af...\n</code></pre> <p>\u30d5\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u7279\u5b9a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u3092\u633f\u5165\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_87","title":"\u30d5\u30c3\u30af\u306e\u7a2e\u985e","text":"<ul> <li>AfterSelect: \u30ec\u30b3\u30fc\u30c9\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u9078\u629e\u3055\u308c\u305f\u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</li> <li>BeforeInsert: \u30ec\u30b3\u30fc\u30c9\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3055\u308c\u308b\u524d\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</li> <li>AfterInsert: \u30ec\u30b3\u30fc\u30c9\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3055\u308c\u305f\u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</li> <li>BeforeUpdate: \u30ec\u30b3\u30fc\u30c9\u304c\u66f4\u65b0\u3055\u308c\u308b\u524d\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</li> <li>AfterUpdate: \u30ec\u30b3\u30fc\u30c9\u304c\u66f4\u65b0\u3055\u308c\u305f\u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</li> <li>BeforeDelete: \u30ec\u30b3\u30fc\u30c9\u304c\u524a\u9664\u3055\u308c\u308b\u524d\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</li> <li>AfterDelete: \u30ec\u30b3\u30fc\u30c9\u304c\u524a\u9664\u3055\u308c\u305f\u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</li> <li>BeforeUpsert: \u30ec\u30b3\u30fc\u30c9\u304c\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u3055\u308c\u308b\u524d\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</li> <li>AfterUpsert: \u30ec\u30b3\u30fc\u30c9\u304c\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u3055\u308c\u305f\u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_88","title":"\u30d5\u30c3\u30af\u306e\u5b9f\u88c5\u4f8b","text":"<pre><code>func init() {\n    models.AddSeichyHook(boil.BeforeInsertHook, seichyBeforeInsert)\n}\n\nfunc seichyBeforeInsert(ctx context.Context, exec boil.ContextExecutor, s *models.Seichy) error {\n    // \u30ab\u30b9\u30bf\u30e0\u51e6\u7406\n    s.CreatedAt = null.TimeFrom(time.Now())\n    return nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_89","title":"\u5229\u7528\u4f8b","text":""},{"location":"DB/model/point_logs.go/#seichy_2","title":"\u65b0\u3057\u3044Seichy\u30ec\u30b3\u30fc\u30c9\u306e\u4f5c\u6210","text":"<pre><code>seichi := &amp;models.Seichy{\n    UserID:     1,\n    SeichiName: \"\u4f0f\u898b\u7a32\u8377\u5927\u793e\",\n    Latitude:   types.NewDecimal(decimal.NewFromFloat(34.967140)),\n    Longitude:  types.NewDecimal(decimal.NewFromFloat(135.772673)),\n    PlaceID:    100,\n    ContentID:  200,\n}\n\n// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\nerr := seichi.Insert(ctx, db, boil.Infer())\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichy_3","title":"Seichy\u30ec\u30b3\u30fc\u30c9\u306e\u53d6\u5f97\u3068\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9","text":"<pre><code>// ID\u304c1\u306eSeichy\u3092\u53d6\u5f97\u3057\u3001\u95a2\u9023\u3059\u308bUser\u3092\u30ed\u30fc\u30c9\nseichi, err := models.Seichies(\n    models.SeichyWhere.SeichiID.EQ(1),\n    qm.Load(models.SeichyRels.User),\n).One(ctx, db)\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30ed\u30fc\u30c9\u3055\u308c\u305fUser\u3092\u4f7f\u7528\nfmt.Println(\"Seichi Name:\", seichi.SeichiName)\nfmt.Println(\"Registered by:\", seichi.R.User.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichy_4","title":"Seichy\u30ec\u30b3\u30fc\u30c9\u306e\u66f4\u65b0","text":"<pre><code>// \u30ec\u30b3\u30fc\u30c9\u306e\u53d6\u5f97\nseichi, err := models.Seichies(\n    models.SeichyWhere.SeichiID.EQ(1),\n).One(ctx, db)\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u66f4\u65b0\nseichi.Comment = null.StringFrom(\"\u3068\u3066\u3082\u7f8e\u3057\u3044\u5834\u6240\u3067\u3059\")\n\n// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\n_, err = seichi.Update(ctx, db, boil.Infer())\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichy_5","title":"Seichy\u30ec\u30b3\u30fc\u30c9\u306e\u524a\u9664","text":"<pre><code>// \u30ec\u30b3\u30fc\u30c9\u306e\u53d6\u5f97\nseichi, err := models.Seichies(\n    models.SeichyWhere.SeichiID.EQ(1),\n).One(ctx, db)\n\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30ec\u30b3\u30fc\u30c9\u306e\u524a\u9664\n_, err = seichi.Delete(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre> <p>\u6ce8\u610f: <code>SQLBoiler</code>\u3001<code>null</code>\u3001<code>types.Decimal</code>\u3001\u304a\u3088\u3073\u305d\u306e\u4ed6\u306e\u5916\u90e8\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#seichy_6","title":"Seichy\u69cb\u9020\u4f53\u3068\u95a2\u9023\u3059\u308b\u30d5\u30c3\u30af\u30fb\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u306e\u8a73\u7d30\u89e3\u8aac","text":"<p><code>Seichy</code>\u69cb\u9020\u4f53\u306b\u95a2\u9023\u3059\u308b\u30d5\u30c3\u30af\u95a2\u6570\u3084\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u3001\u958b\u767a\u8005\u5411\u3051\u306b\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\u5404\u30b3\u30fc\u30c9\u90e8\u5206\u306e\u5f79\u5272\u3084\u5229\u7528\u65b9\u6cd5\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u52b9\u679c\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_90","title":"\u30d5\u30c3\u30af\u95a2\u6570\u306e\u8a73\u7d30","text":"<p>\u30d5\u30c3\u30af\u95a2\u6570\u306f\u3001\u7279\u5b9a\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306e\u524d\u5f8c\u306b\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u3092\u633f\u5165\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c8\u30ea\u30ac\u30fc\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_91","title":"\u30d5\u30c3\u30af\u95a2\u6570\u306e\u5b9a\u7fa9","text":"<pre><code>type SeichyHook func(context.Context, boil.ContextExecutor, *Seichy) error\n</code></pre> <p><code>SeichyHook</code>\u306f\u3001<code>Seichy</code>\u69cb\u9020\u4f53\u306b\u5bfe\u3057\u3066\u9069\u7528\u3055\u308c\u308b\u30d5\u30c3\u30af\u95a2\u6570\u306e\u578b\u5b9a\u7fa9\u3067\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_92","title":"\u30d5\u30c3\u30af\u95a2\u6570\u306e\u5b9f\u884c","text":"<p>\u5404\u64cd\u4f5c\uff08<code>Insert</code>\u3001<code>Update</code>\u3001<code>Delete</code>\u3001<code>Upsert</code>\u306a\u3069\uff09\u306e\u524d\u5f8c\u3067\u3001\u5bfe\u5fdc\u3059\u308b\u30d5\u30c3\u30af\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#dobeforeupdatehooks","title":"doBeforeUpdateHooks","text":"<pre><code>func (o *Seichy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {\n    if boil.HooksAreSkipped(ctx) {\n        return nil\n    }\n\n    for _, hook := range seichyBeforeUpdateHooks {\n        if err := hook(ctx, exec, o); err != nil {\n            return err\n        }\n    }\n\n    return nil\n}\n</code></pre> <p><code>doBeforeUpdateHooks</code>\u306f\u3001\u66f4\u65b0\u64cd\u4f5c\u306e\u524d\u306b\u767b\u9332\u3055\u308c\u305f\u30d5\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <ul> <li>boil.HooksAreSkipped(ctx): \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u30d5\u30c3\u30af\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u8a2d\u5b9a\u304c\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3057\u307e\u3059\u3002</li> <li>seichyBeforeUpdateHooks: \u767b\u9332\u3055\u308c\u305f\u5168\u3066\u306e<code>BeforeUpdate</code>\u30d5\u30c3\u30af\u95a2\u6570\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li>\u30d5\u30c3\u30af\u95a2\u6570\u304c\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_93","title":"\u305d\u306e\u4ed6\u306e\u30d5\u30c3\u30af\u95a2\u6570","text":"<p>\u540c\u69d8\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3001\u4ee5\u4e0b\u306e\u30d5\u30c3\u30af\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002</p> <ul> <li><code>doAfterUpdateHooks</code>: \u66f4\u65b0\u64cd\u4f5c\u306e\u5f8c\u306b\u5b9f\u884c\u3002</li> <li><code>doBeforeDeleteHooks</code>: \u524a\u9664\u64cd\u4f5c\u306e\u524d\u306b\u5b9f\u884c\u3002</li> <li><code>doAfterDeleteHooks</code>: \u524a\u9664\u64cd\u4f5c\u306e\u5f8c\u306b\u5b9f\u884c\u3002</li> <li><code>doBeforeUpsertHooks</code>: \u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u64cd\u4f5c\u306e\u524d\u306b\u5b9f\u884c\u3002</li> <li><code>doAfterUpsertHooks</code>: \u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u64cd\u4f5c\u306e\u5f8c\u306b\u5b9f\u884c\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_94","title":"\u30d5\u30c3\u30af\u95a2\u6570\u306e\u767b\u9332","text":"<pre><code>func AddSeichyHook(hookPoint boil.HookPoint, seichyHook SeichyHook) {\n    switch hookPoint {\n    case boil.AfterSelectHook:\n        //...\n    case boil.BeforeInsertHook:\n        //...\n    // \u305d\u306e\u4ed6\u306e\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\n    }\n}\n</code></pre> <p><code>AddSeichyHook</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u7279\u5b9a\u306e\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u30d5\u30c3\u30af\u95a2\u6570\u3092\u767b\u9332\u3067\u304d\u307e\u3059\u3002</p> <ul> <li>hookPoint: \u30d5\u30c3\u30af\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u6307\u5b9a\u3059\u308b\u3002<code>boil.BeforeInsertHook</code>\u306a\u3069\u3002</li> <li>seichyHook: \u767b\u9332\u3059\u308b\u30d5\u30c3\u30af\u95a2\u6570\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_95","title":"\u5229\u7528\u4f8b","text":"<pre><code>func init() {\n    models.AddSeichyHook(boil.BeforeInsertHook, beforeInsertSeichy)\n}\n\nfunc beforeInsertSeichy(ctx context.Context, exec boil.ContextExecutor, s *models.Seichy) error {\n    // \u4f8b: \u4f5c\u6210\u65e5\u6642\u3092\u8a2d\u5b9a\n    s.CreatedAt = null.TimeFrom(time.Now())\n    return nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_96","title":"\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u306e\u8a73\u7d30","text":"<p><code>Seichy</code>\u69cb\u9020\u4f53\u306b\u5bfe\u3059\u308b\u30af\u30a8\u30ea\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#one_1","title":"One\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>func (q seichyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Seichy, error) {\n    o := &amp;Seichy{}\n\n    queries.SetLimit(q.Query, 1)\n\n    err := q.Bind(ctx, exec, o)\n    if err != nil {\n        if errors.Is(err, sql.ErrNoRows) {\n            return nil, sql.ErrNoRows\n        }\n        return nil, errors.Wrap(err, \"models: failed to execute a one query for seichies\")\n    }\n\n    if err := o.doAfterSelectHooks(ctx, exec); err != nil {\n        return o, err\n    }\n\n    return o, nil\n}\n</code></pre> <ul> <li>One: \u30af\u30a8\u30ea\u306e\u7d50\u679c\u304b\u30891\u3064\u306e<code>Seichy</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>SetLimit: \u53d6\u5f97\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u6570\u30921\u306b\u8a2d\u5b9a\u3002</li> <li>Bind: \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092<code>Seichy</code>\u69cb\u9020\u4f53\u306b\u30d0\u30a4\u30f3\u30c9\u3002</li> <li>doAfterSelectHooks: \u9078\u629e\u5f8c\u306e\u30d5\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_97","title":"\u5229\u7528\u4f8b","text":"<pre><code>seichi, err := models.Seichies(\n    models.SeichyWhere.SeichiID.EQ(1),\n).One(ctx, db)\n\nif err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        // \u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306e\u51e6\u7406\n    } else {\n        log.Fatal(err)\n    }\n}\n\nfmt.Println(\"Seichi Name:\", seichi.SeichiName)\n</code></pre>"},{"location":"DB/model/point_logs.go/#all_1","title":"All\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>func (q seichyQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeichySlice, error) {\n    var o []*Seichy\n\n    err := q.Bind(ctx, exec, &amp;o)\n    if err != nil {\n        return nil, errors.Wrap(err, \"models: failed to assign all query results to Seichy slice\")\n    }\n\n    if len(seichyAfterSelectHooks) != 0 {\n        for _, obj := range o {\n            if err := obj.doAfterSelectHooks(ctx, exec); err != nil {\n                return o, err\n            }\n        }\n    }\n\n    return o, nil\n}\n</code></pre> <ul> <li>All: \u30af\u30a8\u30ea\u306e\u7d50\u679c\u304b\u3089\u5168\u3066\u306e<code>Seichy</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>Bind: \u7d50\u679c\u3092\u30b9\u30e9\u30a4\u30b9\u306b\u30d0\u30a4\u30f3\u30c9\u3002</li> <li>doAfterSelectHooks: \u5404\u30ec\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u9078\u629e\u5f8c\u306e\u30d5\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_98","title":"\u5229\u7528\u4f8b","text":"<pre><code>seichies, err := models.Seichies(\n    models.SeichyWhere.UserID.EQ(1),\n).All(ctx, db)\n\nif err != nil {\n    log.Fatal(err)\n}\n\nfor _, s := range seichies {\n    fmt.Println(\"Seichi:\", s.SeichiName)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#count_1","title":"Count\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>func (q seichyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    var count int64\n\n    queries.SetSelect(q.Query, nil)\n    queries.SetCount(q.Query)\n\n    err := q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to count seichies rows\")\n    }\n\n    return count, nil\n}\n</code></pre> <ul> <li>Count: \u30af\u30a8\u30ea\u306e\u7d50\u679c\u306e\u30ec\u30b3\u30fc\u30c9\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_99","title":"\u5229\u7528\u4f8b","text":"<pre><code>count, err := models.Seichies(\n    models.SeichyWhere.UserID.EQ(1),\n).Count(ctx, db)\n\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"Total Seichies:\", count)\n</code></pre>"},{"location":"DB/model/point_logs.go/#exists_2","title":"Exists\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>func (q seichyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {\n    var count int64\n\n    queries.SetSelect(q.Query, nil)\n    queries.SetCount(q.Query)\n    queries.SetLimit(q.Query, 1)\n\n    err := q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)\n    if err != nil {\n        return false, errors.Wrap(err, \"models: failed to check if seichies exists\")\n    }\n\n    return count &gt; 0, nil\n}\n</code></pre> <ul> <li>Exists: \u30af\u30a8\u30ea\u306b\u8a72\u5f53\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_100","title":"\u5229\u7528\u4f8b","text":"<pre><code>exists, err := models.Seichies(\n    models.SeichyWhere.SeichiName.EQ(\"\u4f0f\u898b\u7a32\u8377\u5927\u793e\"),\n).Exists(ctx, db)\n\nif err != nil {\n    log.Fatal(err)\n}\n\nif exists {\n    fmt.Println(\"The seichi exists.\")\n} else {\n    fmt.Println(\"The seichi does not exist.\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_101","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u53d6\u5f97","text":"<p><code>Seichy</code>\u69cb\u9020\u4f53\u306f\u3001\u4ed6\u306e\u30c6\u30fc\u30d6\u30eb\u3068\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\uff08\u5916\u90e8\u30ad\u30fc\uff09\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3001\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#user_1","title":"User\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>func (o *Seichy) User(mods ...qm.QueryMod) userQuery {\n    queryMods := []qm.QueryMod{\n        qm.Where(\"`user_id` = ?\", o.UserID),\n    }\n\n    queryMods = append(queryMods, mods...)\n\n    return Users(queryMods...)\n}\n</code></pre> <ul> <li>User: <code>Seichy</code>\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f<code>User</code>\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_102","title":"\u5229\u7528\u4f8b","text":"<pre><code>user, err := seichi.User().One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"User Name:\", user.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#place","title":"Place\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>func (o *Seichy) Place(mods ...qm.QueryMod) placeQuery {\n    queryMods := []qm.QueryMod{\n        qm.Where(\"`place_id` = ?\", o.PlaceID),\n    }\n\n    queryMods = append(queryMods, mods...)\n\n    return Places(queryMods...)\n}\n</code></pre> <ul> <li>Place: <code>Seichy</code>\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f<code>Place</code>\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_103","title":"\u5229\u7528\u4f8b","text":"<pre><code>place, err := seichi.Place().One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"Place Name:\", place.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#content","title":"Content\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>func (o *Seichy) Content(mods ...qm.QueryMod) contentQuery {\n    queryMods := []qm.QueryMod{\n        qm.Where(\"`content_id` = ?\", o.ContentID),\n    }\n\n    queryMods = append(queryMods, mods...)\n\n    return Contents(queryMods...)\n}\n</code></pre> <ul> <li>Content: <code>Seichy</code>\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f<code>Content</code>\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_104","title":"\u5229\u7528\u4f8b","text":"<pre><code>content, err := seichi.Content().One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"Content Title:\", content.Title)\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichy_7","title":"Seichy \u578b\u306e\u95a2\u9023\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u306b\u95a2\u3059\u308b\u8a73\u7d30\u306a\u89e3\u8aac","text":"<p><code>LoadUser</code> \u304a\u3088\u3073 <code>LoadPlace</code> \u95a2\u6570\u306b\u3064\u3044\u3066\u3001\u30b3\u30fc\u30c9\u306e\u5168\u3066\u306e\u90e8\u5206\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3042\u308a\u3001N\u5bfe1\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u6301\u3064\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3092\u884c\u3044\u307e\u3059\u3002\u958b\u767a\u8005\u304c\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u7406\u89e3\u3057\u3001\u9069\u5207\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u4f8b\u3082\u542b\u3081\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#loaduser_1","title":"<code>LoadUser</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_105","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>LoadUser</code> \u95a2\u6570\u306f\u3001<code>Seichy</code> \u69cb\u9020\u4f53\uff08\u307e\u305f\u306f\u305d\u306e\u30b9\u30e9\u30a4\u30b9\uff09\u306b\u95a2\u9023\u3059\u308b <code>User</code> \u30c7\u30fc\u30bf\u3092\u4e00\u62ec\u3067\u30ed\u30fc\u30c9\u3057\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001N\u5bfe1\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306b\u304a\u3044\u3066\u3001\u95a2\u9023\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_106","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (seichyL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeichy interface{}, mods queries.Applicator) error\n</code></pre> <ul> <li><code>ctx context.Context</code>\uff1a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3092\u6e21\u3059\u305f\u3081\u306e\u3082\u306e\u3002</li> <li><code>e boil.ContextExecutor</code>\uff1a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3002</li> <li><code>singular bool</code>\uff1a\u5358\u4e00\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3001\u30b9\u30e9\u30a4\u30b9\uff08\u8907\u6570\uff09\u306e\u3069\u3061\u3089\u3092\u51e6\u7406\u3059\u308b\u304b\u3092\u6307\u5b9a\u3002</li> <li><code>maybeSeichy interface{}</code>\uff1a\u30ed\u30fc\u30c9\u5bfe\u8c61\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f\u305d\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>mods queries.Applicator</code>\uff1a\u30af\u30a8\u30ea\u306b\u9069\u7528\u3059\u308b\u8ffd\u52a0\u306e\u4fee\u98fe\u5b50\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_107","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#1","title":"1. \u5909\u6570\u306e\u5ba3\u8a00","text":"<pre><code>var slice []*Seichy\nvar object *Seichy\n</code></pre> <ul> <li>\u5358\u4e00\u307e\u305f\u306f\u8907\u6570\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#2","title":"2. \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3","text":"<pre><code>if singular {\n    var ok bool\n    object, ok = maybeSeichy.(*Seichy)\n    if !ok {\n        object = new(Seichy)\n        ok = queries.SetFromEmbeddedStruct(&amp;object, &amp;maybeSeichy)\n        if !ok {\n            return errors.New(fmt.Sprintf(\"failed to set %T from embedded struct %T\", object, maybeSeichy))\n        }\n    }\n} else {\n    s, ok := maybeSeichy.(*[]*Seichy)\n    if ok {\n        slice = *s\n    } else {\n        ok = queries.SetFromEmbeddedStruct(&amp;slice, maybeSeichy)\n        if !ok {\n            return errors.New(fmt.Sprintf(\"failed to set %T from embedded struct %T\", slice, maybeSeichy))\n        }\n    }\n}\n</code></pre> <ul> <li><code>singular</code> \u30d5\u30e9\u30b0\u306b\u57fa\u3065\u3044\u3066\u3001<code>maybeSeichy</code> \u3092\u9069\u5207\u306a\u578b\u306b\u30a2\u30b5\u30fc\u30c8\u3057\u307e\u3059\u3002</li> <li>\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u57cb\u3081\u8fbc\u307f\u69cb\u9020\u4f53\u304b\u3089\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#3-id","title":"3. \u95a2\u9023\u3059\u308b\u30e6\u30fc\u30b6\u30fcID\u3092\u53ce\u96c6","text":"<pre><code>args := make(map[interface{}]struct{})\nif singular {\n    if object.R == nil {\n        object.R = &amp;seichyR{}\n    }\n    args[object.UserID] = struct{}{}\n\n} else {\n    for _, obj := range slice {\n        if obj.R == nil {\n            obj.R = &amp;seichyR{}\n        }\n\n        args[obj.UserID] = struct{}{}\n\n    }\n}\n</code></pre> <ul> <li>\u91cd\u8907\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u3001\u30de\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fcID\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002</li> <li><code>object.R</code> \u304c <code>nil</code> \u306e\u5834\u5408\u3001\u65b0\u3057\u3044\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#4-id","title":"4. \u30e6\u30fc\u30b6\u30fcID\u304c\u306a\u3044\u5834\u5408\u306e\u65e9\u671f\u30ea\u30bf\u30fc\u30f3","text":"<pre><code>if len(args) == 0 {\n    return nil\n}\n</code></pre> <ul> <li>\u30e6\u30fc\u30b6\u30fcID\u304c\u53ce\u96c6\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#5","title":"5. \u30af\u30a8\u30ea\u306e\u4f5c\u6210","text":"<pre><code>argsSlice := make([]interface{}, len(args))\ni := 0\nfor arg := range args {\n    argsSlice[i] = arg\n    i++\n}\n\nquery := NewQuery(\n    qm.From(`users`),\n    qm.WhereIn(`users.user_id in ?`, argsSlice...),\n)\nif mods != nil {\n    mods.Apply(query)\n}\n</code></pre> <ul> <li>\u30de\u30c3\u30d7\u304b\u3089\u30b9\u30e9\u30a4\u30b9\u306b\u30e6\u30fc\u30b6\u30fcID\u3092\u5909\u63db\u3057\u307e\u3059\u3002</li> <li><code>users</code> \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5bfe\u8c61\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> <li>\u8ffd\u52a0\u306e\u30af\u30a8\u30ea\u4fee\u98fe\u5b50\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u308c\u3092\u9069\u7528\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#6","title":"6. \u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u53d6\u5f97","text":"<pre><code>results, err := query.QueryContext(ctx, e)\nif err != nil {\n    return errors.Wrap(err, \"failed to eager load User\")\n}\n\nvar resultSlice []*User\nif err = queries.Bind(results, &amp;resultSlice); err != nil {\n    return errors.Wrap(err, \"failed to bind eager loaded slice User\")\n}\n\nif err = results.Close(); err != nil {\n    return errors.Wrap(err, \"failed to close results of eager load for users\")\n}\nif err = results.Err(); err != nil {\n    return errors.Wrap(err, \"error occurred during iteration of eager loaded relations for users\")\n}\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u7d50\u679c\u3092 <code>User</code> \u578b\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002</li> <li>\u7d50\u679c\u30bb\u30c3\u30c8\u3092\u30af\u30ed\u30fc\u30ba\u3057\u3001\u30a8\u30e9\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#7","title":"7. \u30d5\u30c3\u30af\u306e\u5b9f\u884c","text":"<pre><code>if len(userAfterSelectHooks) != 0 {\n    for _, obj := range resultSlice {\n        if err := obj.doAfterSelectHooks(ctx, e); err != nil {\n            return err\n        }\n    }\n}\n</code></pre> <ul> <li><code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001<code>AfterSelect</code> \u30d5\u30c3\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#8","title":"8. \u7d50\u679c\u306e\u95a2\u9023\u4ed8\u3051","text":"<pre><code>if len(resultSlice) == 0 {\n    return nil\n}\n\nif singular {\n    foreign := resultSlice[0]\n    object.R.User = foreign\n    if foreign.R == nil {\n        foreign.R = &amp;userR{}\n    }\n    foreign.R.Seichies = append(foreign.R.Seichies, object)\n    return nil\n}\n\nfor _, local := range slice {\n    for _, foreign := range resultSlice {\n        if local.UserID == foreign.UserID {\n            local.R.User = foreign\n            if foreign.R == nil {\n                foreign.R = &amp;userR{}\n            }\n            foreign.R.Seichies = append(foreign.R.Seichies, local)\n            break\n        }\n    }\n}\n</code></pre> <ul> <li>\u5358\u4e00\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\u3001\u5bfe\u5fdc\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30b9\u30e9\u30a4\u30b9\u306e\u5834\u5408\u3001\u5404 <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001\u5bfe\u5fdc\u3059\u308b <code>User</code> \u3092\u95a2\u9023\u4ed8\u3051\u307e\u3059\u3002</li> <li>\u53cc\u65b9\u5411\u306e\u95a2\u9023\u4ed8\u3051\u3092\u8a2d\u5b9a\u3057\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#9","title":"9. \u30a8\u30e9\u30fc\u304c\u306a\u3044\u5834\u5408\u3001\u6210\u529f\u3092\u8fd4\u3059","text":"<pre><code>return nil\n</code></pre> <ul> <li>\u5168\u3066\u306e\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001<code>nil</code> \u3092\u8fd4\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_108","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":"<p>\u4ee5\u4e0b\u306b\u3001<code>LoadUser</code> \u95a2\u6570\u306e\u5177\u4f53\u7684\u306a\u5229\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#seichy_8","title":"\u5358\u4e00\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408","text":"<pre><code>// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u306e\u53d6\u5f97\uff08\u4f8b\uff09\ndb, err := sql.Open(\"postgres\", \"your_connection_string\")\nif err != nil {\n    log.Fatal(err)\n}\n\nctx := context.Background()\n\n// \u5358\u4e00\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichy, err := Seichies(qm.Where(\"seichy_id=?\", 1)).One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u95a2\u9023\u3059\u308b User \u3092\u30ed\u30fc\u30c9\nerr = seichyL{}.LoadUser(ctx, db, true, seichy, nil)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30ed\u30fc\u30c9\u3055\u308c\u305f User \u30c7\u30fc\u30bf\u3092\u4f7f\u7528\nfmt.Println(\"User Name:\", seichy.R.User.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichy_9","title":"\u8907\u6570\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408","text":"<pre><code>// \u8907\u6570\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichies, err := Seichies().All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u95a2\u9023\u3059\u308b User \u3092\u4e00\u62ec\u3067\u30ed\u30fc\u30c9\nerr = seichyL{}.LoadUser(ctx, db, false, seichies, nil)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u5404 Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e User \u30c7\u30fc\u30bf\u3092\u5229\u7528\nfor _, s := range seichies {\n    fmt.Printf(\"Seichy ID: %d, User Name: %s\\n\", s.SeichyID, s.R.User.Name)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#loadplace","title":"<code>LoadPlace</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_109","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>LoadPlace</code> \u95a2\u6570\u306f\u3001<code>Seichy</code> \u69cb\u9020\u4f53\uff08\u307e\u305f\u306f\u305d\u306e\u30b9\u30e9\u30a4\u30b9\uff09\u306b\u95a2\u9023\u3059\u308b <code>Place</code> \u30c7\u30fc\u30bf\u3092\u4e00\u62ec\u3067\u30ed\u30fc\u30c9\u3057\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001N\u5bfe1\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306b\u304a\u3044\u3066\u3001\u95a2\u9023\u3059\u308b\u5834\u6240\u306e\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_110","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (seichyL) LoadPlace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeichy interface{}, mods queries.Applicator) error\n</code></pre> <ul> <li>\u5f15\u6570\u3084\u623b\u308a\u5024\u306f <code>LoadUser</code> \u95a2\u6570\u3068\u540c\u69d8\u3067\u3059\u304c\u3001<code>Place</code> \u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_111","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<p><code>LoadUser</code> \u95a2\u6570\u3068\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u304c\u3001\u5bfe\u8c61\u304c <code>User</code> \u3067\u306f\u306a\u304f <code>Place</code> \u3067\u3042\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#1_1","title":"1. \u5909\u6570\u306e\u5ba3\u8a00","text":"<pre><code>var slice []*Seichy\nvar object *Seichy\n</code></pre>"},{"location":"DB/model/point_logs.go/#2_1","title":"2. \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3","text":"<pre><code>if singular {\n    var ok bool\n    object, ok = maybeSeichy.(*Seichy)\n    if !ok {\n        object = new(Seichy)\n        ok = queries.SetFromEmbeddedStruct(&amp;object, &amp;maybeSeichy)\n        if !ok {\n            return errors.New(fmt.Sprintf(\"failed to set %T from embedded struct %T\", object, maybeSeichy))\n        }\n    }\n} else {\n    s, ok := maybeSeichy.(*[]*Seichy)\n    if ok {\n        slice = *s\n    } else {\n        ok = queries.SetFromEmbeddedStruct(&amp;slice, maybeSeichy)\n        if !ok {\n            return errors.New(fmt.Sprintf(\"failed to set %T from embedded struct %T\", slice, maybeSeichy))\n        }\n    }\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#3-id_1","title":"3. \u95a2\u9023\u3059\u308b\u5834\u6240ID\u3092\u53ce\u96c6","text":"<pre><code>args := make(map[interface{}]struct{})\nif singular {\n    if object.R == nil {\n        object.R = &amp;seichyR{}\n    }\n    args[object.PlaceID] = struct{}{}\n\n} else {\n    for _, obj := range slice {\n        if obj.R == nil {\n            obj.R = &amp;seichyR{}\n        }\n\n        args[obj.PlaceID] = struct{}{}\n\n    }\n}\n</code></pre> <ul> <li><code>PlaceID</code> \u3092\u53ce\u96c6\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#4-id_1","title":"4. \u5834\u6240ID\u304c\u306a\u3044\u5834\u5408\u306e\u65e9\u671f\u30ea\u30bf\u30fc\u30f3","text":"<pre><code>if len(args) == 0 {\n    return nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#5_1","title":"5. \u30af\u30a8\u30ea\u306e\u4f5c\u6210","text":"<pre><code>argsSlice := make([]interface{}, len(args))\ni := 0\nfor arg := range args {\n    argsSlice[i] = arg\n    i++\n}\n\nquery := NewQuery(\n    qm.From(`places`),\n    qm.WhereIn(`places.place_id in ?`, argsSlice...),\n)\nif mods != nil {\n    mods.Apply(query)\n}\n</code></pre> <ul> <li><code>places</code> \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5bfe\u8c61\u306e\u5834\u6240\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#6_1","title":"6. \u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u53d6\u5f97","text":"<pre><code>results, err := query.QueryContext(ctx, e)\nif err != nil {\n    return errors.Wrap(err, \"failed to eager load Place\")\n}\n\nvar resultSlice []*Place\nif err = queries.Bind(results, &amp;resultSlice); err != nil {\n    return errors.Wrap(err, \"failed to bind eager loaded slice Place\")\n}\n\nif err = results.Close(); err != nil {\n    return errors.Wrap(err, \"failed to close results of eager load for places\")\n}\nif err = results.Err(); err != nil {\n    return errors.Wrap(err, \"error occurred during iteration of eager loaded relations for places\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#7_1","title":"7. \u30d5\u30c3\u30af\u306e\u5b9f\u884c","text":"<pre><code>if len(placeAfterSelectHooks) != 0 {\n    for _, obj := range resultSlice {\n        if err := obj.doAfterSelectHooks(ctx, e); err != nil {\n            return err\n        }\n    }\n}\n</code></pre> <ul> <li><code>Place</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001<code>AfterSelect</code> \u30d5\u30c3\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#8_1","title":"8. \u7d50\u679c\u306e\u95a2\u9023\u4ed8\u3051","text":"<pre><code>if len(resultSlice) == 0 {\n    return nil\n}\n\nif singular {\n    foreign := resultSlice[0]\n    object.R.Place = foreign\n    if foreign.R == nil {\n        foreign.R = &amp;placeR{}\n    }\n    foreign.R.Seichies = append(foreign.R.Seichies, object)\n    return nil\n}\n\nfor _, local := range slice {\n    for _, foreign := range resultSlice {\n        if local.PlaceID == foreign.PlaceID {\n            local.R.Place = foreign\n            if foreign.R == nil {\n                foreign.R = &amp;placeR{}\n            }\n            foreign.R.Seichies = append(foreign.R.Seichies, local)\n            break\n        }\n    }\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#9_1","title":"9. \u30a8\u30e9\u30fc\u304c\u306a\u3044\u5834\u5408\u3001\u6210\u529f\u3092\u8fd4\u3059","text":"<pre><code>return nil\n</code></pre>"},{"location":"DB/model/point_logs.go/#_112","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":""},{"location":"DB/model/point_logs.go/#seichy_10","title":"\u5358\u4e00\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408","text":"<pre><code>// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u306e\u53d6\u5f97\uff08\u4f8b\uff09\ndb, err := sql.Open(\"postgres\", \"your_connection_string\")\nif err != nil {\n    log.Fatal(err)\n}\n\nctx := context.Background()\n\n// \u5358\u4e00\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichy, err := Seichies(qm.Where(\"seichy_id=?\", 1)).One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u95a2\u9023\u3059\u308b Place \u3092\u30ed\u30fc\u30c9\nerr = seichyL{}.LoadPlace(ctx, db, true, seichy, nil)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30ed\u30fc\u30c9\u3055\u308c\u305f Place \u30c7\u30fc\u30bf\u3092\u4f7f\u7528\nfmt.Println(\"Place Name:\", seichy.R.Place.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichy_11","title":"\u8907\u6570\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408","text":"<pre><code>// \u8907\u6570\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichies, err := Seichies().All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u95a2\u9023\u3059\u308b Place \u3092\u4e00\u62ec\u3067\u30ed\u30fc\u30c9\nerr = seichyL{}.LoadPlace(ctx, db, false, seichies, nil)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u5404 Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e Place \u30c7\u30fc\u30bf\u3092\u5229\u7528\nfor _, s := range seichies {\n    fmt.Printf(\"Seichy ID: %d, Place Name: %s\\n\", s.SeichyID, s.R.Place.Name)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_113","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li><code>LoadUser</code> \u304a\u3088\u3073 <code>LoadPlace</code> \u95a2\u6570\u306f\u3001\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u4e00\u62ec\u3067\u53d6\u5f97\u3057\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002</li> <li><code>singular</code> \u30d5\u30e9\u30b0\u3092\u6b63\u3057\u304f\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u5358\u4e00\u307e\u305f\u306f\u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u9069\u5207\u306b\u884c\u3044\u3001\u30c7\u30fc\u30bf\u306e\u4e0d\u6574\u5408\u3084\u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u53c2\u7167\u3092\u9632\u304e\u307e\u3059\u3002</li> </ul> <p><code>LoadUser</code> \u3068 <code>LoadPlace</code> \u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b <code>User</code> \u3084 <code>Place</code> \u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u306e\u30c7\u30fc\u30bf\u53d6\u5f97\u3092\u6700\u9069\u5316\u3057\u3001N\u5bfe1\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u6301\u3064\u30e2\u30c7\u30eb\u9593\u306e\u95a2\u9023\u4ed8\u3051\u3092\u7c21\u7d20\u5316\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#loadcontent-setuser","title":"<code>LoadContent</code> \u95a2\u6570\u3068 <code>SetUser</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<p><code>LoadContent</code> \u95a2\u6570\u304a\u3088\u3073 <code>SetUser</code> \u95a2\u6570\u306b\u3064\u3044\u3066\u3001\u30b3\u30fc\u30c9\u306e\u5168\u3066\u306e\u90e8\u5206\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u30ed\u30fc\u30c9\u304a\u3088\u3073\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3042\u308a\u3001N\u5bfe1\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u6301\u3064\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3068\u95a2\u9023\u4ed8\u3051\u3092\u884c\u3044\u307e\u3059\u3002\u958b\u767a\u8005\u304c\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u7406\u89e3\u3057\u3001\u9069\u5207\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u4f8b\u3082\u542b\u3081\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#loadcontent","title":"<code>LoadContent</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_114","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>LoadContent</code> \u95a2\u6570\u306f\u3001<code>Seichy</code> \u69cb\u9020\u4f53\uff08\u307e\u305f\u306f\u305d\u306e\u30b9\u30e9\u30a4\u30b9\uff09\u306b\u95a2\u9023\u3059\u308b <code>Content</code> \u30c7\u30fc\u30bf\u3092\u4e00\u62ec\u3067\u30ed\u30fc\u30c9\u3057\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001N\u5bfe1\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306b\u304a\u3044\u3066\u3001\u95a2\u9023\u3059\u308b\u30b3\u30f3\u30c6\u30f3\u30c4\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_115","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (seichyL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeichy interface{}, mods queries.Applicator) error\n</code></pre> <ul> <li><code>ctx context.Context</code>\uff1a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3092\u6e21\u3059\u305f\u3081\u306e\u3082\u306e\u3002</li> <li><code>e boil.ContextExecutor</code>\uff1a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3002</li> <li><code>singular bool</code>\uff1a\u5358\u4e00\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3001\u30b9\u30e9\u30a4\u30b9\uff08\u8907\u6570\uff09\u306e\u3069\u3061\u3089\u3092\u51e6\u7406\u3059\u308b\u304b\u3092\u6307\u5b9a\u3002</li> <li><code>maybeSeichy interface{}</code>\uff1a\u30ed\u30fc\u30c9\u5bfe\u8c61\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f\u305d\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>mods queries.Applicator</code>\uff1a\u30af\u30a8\u30ea\u306b\u9069\u7528\u3059\u308b\u8ffd\u52a0\u306e\u4fee\u98fe\u5b50\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_116","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#1_2","title":"1. \u5909\u6570\u306e\u5ba3\u8a00","text":"<pre><code>var slice []*Seichy\nvar object *Seichy\n</code></pre> <ul> <li>\u95a2\u6570\u5185\u3067\u4f7f\u7528\u3059\u308b\u5909\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002</li> <li><code>slice</code>\uff1a<code>Seichy</code> \u306e\u30b9\u30e9\u30a4\u30b9\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u5909\u6570\u3002</li> <li><code>object</code>\uff1a\u5358\u4e00\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u5909\u6570\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#2_2","title":"2. \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3","text":"<pre><code>if singular {\n    var ok bool\n    object, ok = maybeSeichy.(*Seichy)\n    if !ok {\n        object = new(Seichy)\n        ok = queries.SetFromEmbeddedStruct(&amp;object, &amp;maybeSeichy)\n        if !ok {\n            return errors.New(fmt.Sprintf(\"failed to set %T from embedded struct %T\", object, maybeSeichy))\n        }\n    }\n} else {\n    s, ok := maybeSeichy.(*[]*Seichy)\n    if ok {\n        slice = *s\n    } else {\n        ok = queries.SetFromEmbeddedStruct(&amp;slice, maybeSeichy)\n        if !ok {\n            return errors.New(fmt.Sprintf(\"failed to set %T from embedded struct %T\", slice, maybeSeichy))\n        }\n    }\n}\n</code></pre> <ul> <li><code>singular</code> \u30d5\u30e9\u30b0\u306b\u57fa\u3065\u3044\u3066\u3001<code>maybeSeichy</code> \u3092\u9069\u5207\u306a\u578b\u306b\u30a2\u30b5\u30fc\u30c8\u3057\u307e\u3059\u3002</li> <li>\u5358\u4e00\u306e\u5834\u5408\uff1a<code>*Seichy</code> \u578b\u306b\u30a2\u30b5\u30fc\u30c8\u3002</li> <li>\u30b9\u30e9\u30a4\u30b9\u306e\u5834\u5408\uff1a<code>*[]*Seichy</code> \u578b\u306b\u30a2\u30b5\u30fc\u30c8\u3002</li> <li>\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u57cb\u3081\u8fbc\u307f\u69cb\u9020\u4f53\u304b\u3089\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u307e\u305f\u306f\u8a2d\u5b9a\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#3-id_2","title":"3. \u95a2\u9023\u3059\u308b\u30b3\u30f3\u30c6\u30f3\u30c4ID\u3092\u53ce\u96c6","text":"<pre><code>args := make(map[interface{}]struct{})\nif singular {\n    if object.R == nil {\n        object.R = &amp;seichyR{}\n    }\n    args[object.ContentID] = struct{}{}\n\n} else {\n    for _, obj := range slice {\n        if obj.R == nil {\n            obj.R = &amp;seichyR{}\n        }\n\n        args[obj.ContentID] = struct{}{}\n\n    }\n}\n</code></pre> <ul> <li>\u91cd\u8907\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u3001\u30de\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u3066\u30b3\u30f3\u30c6\u30f3\u30c4ID\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002</li> <li><code>object.R</code> \u307e\u305f\u306f <code>obj.R</code> \u304c <code>nil</code> \u306e\u5834\u5408\u3001\u65b0\u3057\u3044\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002</li> <li>\u5358\u4e00\u307e\u305f\u306f\u8907\u6570\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u305d\u308c\u305e\u308c\u306e <code>ContentID</code> \u3092\u30de\u30c3\u30d7\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#4-id_2","title":"4. \u30b3\u30f3\u30c6\u30f3\u30c4ID\u304c\u306a\u3044\u5834\u5408\u306e\u65e9\u671f\u30ea\u30bf\u30fc\u30f3","text":"<pre><code>if len(args) == 0 {\n    return nil\n}\n</code></pre> <ul> <li>\u30b3\u30f3\u30c6\u30f3\u30c4ID\u304c\u53ce\u96c6\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#5_2","title":"5. \u30af\u30a8\u30ea\u306e\u4f5c\u6210","text":"<pre><code>argsSlice := make([]interface{}, len(args))\ni := 0\nfor arg := range args {\n    argsSlice[i] = arg\n    i++\n}\n\nquery := NewQuery(\n    qm.From(`contents`),\n    qm.WhereIn(`contents.content_id in ?`, argsSlice...),\n)\nif mods != nil {\n    mods.Apply(query)\n}\n</code></pre> <ul> <li>\u30de\u30c3\u30d7\u304b\u3089\u30b9\u30e9\u30a4\u30b9\u306b\u30b3\u30f3\u30c6\u30f3\u30c4ID\u3092\u5909\u63db\u3057\u307e\u3059\u3002</li> <li><code>contents</code> \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5bfe\u8c61\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> <li>\u8ffd\u52a0\u306e\u30af\u30a8\u30ea\u4fee\u98fe\u5b50\u304c\u3042\u308b\u5834\u5408\u3001\u305d\u308c\u3092\u9069\u7528\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#6_2","title":"6. \u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u53d6\u5f97","text":"<pre><code>results, err := query.QueryContext(ctx, e)\nif err != nil {\n    return errors.Wrap(err, \"failed to eager load Content\")\n}\n\nvar resultSlice []*Content\nif err = queries.Bind(results, &amp;resultSlice); err != nil {\n    return errors.Wrap(err, \"failed to bind eager loaded slice Content\")\n}\n\nif err = results.Close(); err != nil {\n    return errors.Wrap(err, \"failed to close results of eager load for contents\")\n}\nif err = results.Err(); err != nil {\n    return errors.Wrap(err, \"error occurred during iteration of eager loaded relations for contents\")\n}\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u7d50\u679c\u3092 <code>Content</code> \u578b\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002</li> <li>\u7d50\u679c\u30bb\u30c3\u30c8\u3092\u30af\u30ed\u30fc\u30ba\u3057\u3001\u30a8\u30e9\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#7_2","title":"7. \u30d5\u30c3\u30af\u306e\u5b9f\u884c","text":"<pre><code>if len(contentAfterSelectHooks) != 0 {\n    for _, obj := range resultSlice {\n        if err := obj.doAfterSelectHooks(ctx, e); err != nil {\n            return err\n        }\n    }\n}\n</code></pre> <ul> <li><code>Content</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001<code>AfterSelect</code> \u30d5\u30c3\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#8_2","title":"8. \u7d50\u679c\u306e\u95a2\u9023\u4ed8\u3051","text":"<pre><code>if len(resultSlice) == 0 {\n    return nil\n}\n\nif singular {\n    foreign := resultSlice[0]\n    object.R.Content = foreign\n    if foreign.R == nil {\n        foreign.R = &amp;contentR{}\n    }\n    foreign.R.Seichies = append(foreign.R.Seichies, object)\n    return nil\n}\n\nfor _, local := range slice {\n    for _, foreign := range resultSlice {\n        if local.ContentID == foreign.ContentID {\n            local.R.Content = foreign\n            if foreign.R == nil {\n                foreign.R = &amp;contentR{}\n            }\n            foreign.R.Seichies = append(foreign.R.Seichies, local)\n            break\n        }\n    }\n}\n</code></pre> <ul> <li>\u5358\u4e00\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\u3001\u5bfe\u5fdc\u3059\u308b\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30b9\u30e9\u30a4\u30b9\u306e\u5834\u5408\u3001\u5404 <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001\u5bfe\u5fdc\u3059\u308b <code>Content</code> \u3092\u95a2\u9023\u4ed8\u3051\u307e\u3059\u3002</li> <li>\u53cc\u65b9\u5411\u306e\u95a2\u9023\u4ed8\u3051\u3092\u8a2d\u5b9a\u3057\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#9_2","title":"9. \u30a8\u30e9\u30fc\u304c\u306a\u3044\u5834\u5408\u3001\u6210\u529f\u3092\u8fd4\u3059","text":"<pre><code>return nil\n</code></pre> <ul> <li>\u5168\u3066\u306e\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001<code>nil</code> \u3092\u8fd4\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_117","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":"<p>\u4ee5\u4e0b\u306b\u3001<code>LoadContent</code> \u95a2\u6570\u306e\u5177\u4f53\u7684\u306a\u5229\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#seichy_12","title":"\u5358\u4e00\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408","text":"<pre><code>// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u306e\u53d6\u5f97\uff08\u4f8b\uff09\ndb, err := sql.Open(\"mysql\", \"your_connection_string\")\nif err != nil {\n    log.Fatal(err)\n}\n\nctx := context.Background()\n\n// \u5358\u4e00\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichy, err := Seichies(qm.Where(\"seichi_id=?\", 1)).One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u95a2\u9023\u3059\u308b Content \u3092\u30ed\u30fc\u30c9\nerr = seichyL{}.LoadContent(ctx, db, true, seichy, nil)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30ed\u30fc\u30c9\u3055\u308c\u305f Content \u30c7\u30fc\u30bf\u3092\u4f7f\u7528\nfmt.Println(\"Content Title:\", seichy.R.Content.Title)\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichy_13","title":"\u8907\u6570\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408","text":"<pre><code>// \u8907\u6570\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichies, err := Seichies().All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u95a2\u9023\u3059\u308b Content \u3092\u4e00\u62ec\u3067\u30ed\u30fc\u30c9\nerr = seichyL{}.LoadContent(ctx, db, false, seichies, nil)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u5404 Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e Content \u30c7\u30fc\u30bf\u3092\u5229\u7528\nfor _, s := range seichies {\n    fmt.Printf(\"Seichy ID: %d, Content Title: %s\\n\", s.SeichiID, s.R.Content.Title)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#setuser_1","title":"<code>SetUser</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_118","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>SetUser</code> \u95a2\u6570\u306f\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u95a2\u9023\u3059\u308b <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a2d\u5b9a\u3057\u3001\u305d\u306e\u95a2\u4fc2\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304a\u3088\u3073\u30e1\u30e2\u30ea\u4e0a\u3067\u7dad\u6301\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_119","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *Seichy) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error\n</code></pre> <ul> <li><code>o *Seichy</code>\uff1a\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u8a2d\u5b9a\u3059\u308b\u5bfe\u8c61\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> <li><code>ctx context.Context</code>\uff1a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li><code>exec boil.ContextExecutor</code>\uff1a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3002</li> <li><code>insert bool</code>\uff1a<code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u6307\u5b9a\u3002</li> <li><code>related *User</code>\uff1a\u95a2\u9023\u4ed8\u3051\u308b <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_120","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#1_3","title":"1. \u5909\u6570\u306e\u5ba3\u8a00","text":"<pre><code>var err error\n</code></pre> <ul> <li>\u30a8\u30e9\u30fc\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#2_3","title":"2. \u633f\u5165\u30d5\u30e9\u30b0\u306b\u57fa\u3065\u304f\u51e6\u7406","text":"<pre><code>if insert {\n    if err = related.Insert(ctx, exec, boil.Infer()); err != nil {\n        return errors.Wrap(err, \"failed to insert into foreign table\")\n    }\n}\n</code></pre> <ul> <li><code>insert</code> \u30d5\u30e9\u30b0\u304c <code>true</code> \u306e\u5834\u5408\u3001\u95a2\u9023\u3059\u308b <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3057\u307e\u3059\u3002</li> <li><code>related.Insert</code> \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u633f\u5165\u3057\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u305d\u306e\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#3-seichy","title":"3. <code>Seichy</code> \u30c6\u30fc\u30d6\u30eb\u306e\u66f4\u65b0","text":"<pre><code>updateQuery := fmt.Sprintf(\n    \"UPDATE `seichies` SET %s WHERE %s\",\n    strmangle.SetParamNames(\"`\", \"`\", 0, []string{\"user_id\"}),\n    strmangle.WhereClause(\"`\", \"`\", 0, seichyPrimaryKeyColumns),\n)\nvalues := []interface{}{related.UserID, o.SeichiID}\n\nif boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, updateQuery)\n    fmt.Fprintln(writer, values)\n}\nif _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {\n    return errors.Wrap(err, \"failed to update local table\")\n}\n</code></pre> <ul> <li><code>Seichy</code> \u30c6\u30fc\u30d6\u30eb\u306e <code>user_id</code> \u30ab\u30e9\u30e0\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li><code>strmangle</code> \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u3001\u52d5\u7684\u306a\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3092\u751f\u6210\u3057\u307e\u3059\u3002</li> <li><code>values</code> \u30b9\u30e9\u30a4\u30b9\u306b\u306f\u3001\u66f4\u65b0\u306b\u4f7f\u7528\u3059\u308b\u5024\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002</li> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u304c\u6709\u52b9\u306a\u5834\u5408\u3001\u30af\u30a8\u30ea\u3068\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u305d\u306e\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#4","title":"4. \u30ed\u30fc\u30ab\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u66f4\u65b0","text":"<pre><code>o.UserID = related.UserID\nif o.R == nil {\n    o.R = &amp;seichyR{\n        User: related,\n    }\n} else {\n    o.R.User = related\n}\n</code></pre> <ul> <li><code>o.UserID</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u30d5\u30a3\u30fc\u30eb\u30c9 <code>o.R.User</code> \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li><code>o.R</code> \u304c <code>nil</code> \u306e\u5834\u5408\u3001\u65b0\u3057\u3044\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#5_3","title":"5. \u95a2\u9023\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u8a2d\u5b9a","text":"<pre><code>if related.R == nil {\n    related.R = &amp;userR{\n        Seichies: SeichySlice{o},\n    }\n} else {\n    related.R.Seichies = append(related.R.Seichies, o)\n}\n</code></pre> <ul> <li><code>related</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u30d5\u30a3\u30fc\u30eb\u30c9 <code>related.R.Seichies</code> \u306b <code>o</code> \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> <li><code>related.R</code> \u304c <code>nil</code> \u306e\u5834\u5408\u3001\u65b0\u3057\u3044\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#6_3","title":"6. \u30a8\u30e9\u30fc\u304c\u306a\u3044\u5834\u5408\u3001\u6210\u529f\u3092\u8fd4\u3059","text":"<pre><code>return nil\n</code></pre> <ul> <li>\u5168\u3066\u306e\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001<code>nil</code> \u3092\u8fd4\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_121","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":"<p>\u4ee5\u4e0b\u306b\u3001<code>SetUser</code> \u95a2\u6570\u306e\u5177\u4f53\u7684\u306a\u5229\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#user_2","title":"\u65b0\u3057\u3044 <code>User</code> \u3092\u4f5c\u6210\u3057\u3066\u95a2\u9023\u4ed8\u3051\u308b\u5834\u5408","text":"<pre><code>// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u306e\u53d6\u5f97\uff08\u4f8b\uff09\ndb, err := sql.Open(\"mysql\", \"your_connection_string\")\nif err != nil {\n    log.Fatal(err)\n}\n\nctx := context.Background()\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichy, err := Seichies(qm.Where(\"seichi_id=?\", 1)).One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u65b0\u3057\u3044 User \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\nnewUser := &amp;User{\n    Name: \"\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\",\n    // \u4ed6\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\n}\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b User \u3092\u8a2d\u5b9a\u3057\u3001User \u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\nerr = seichy.SetUser(ctx, db, true, newUser)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3055\u308c\u305f Seichy \u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f User \u3092\u4f7f\u7528\nfmt.Println(\"Seichy ID:\", seichy.SeichiID)\nfmt.Println(\"User Name:\", seichy.R.User.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#user_3","title":"\u65e2\u5b58\u306e <code>User</code> \u3092\u95a2\u9023\u4ed8\u3051\u308b\u5834\u5408","text":"<pre><code>// \u65e2\u5b58\u306e User \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nexistingUser, err := Users(qm.Where(\"user_id=?\", 2)).One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u65e2\u5b58\u306e User \u3092\u8a2d\u5b9a\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u633f\u5165\u306f\u4e0d\u8981\uff09\nerr = seichy.SetUser(ctx, db, false, existingUser)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3055\u308c\u305f Seichy \u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f User \u3092\u4f7f\u7528\nfmt.Println(\"Seichy ID:\", seichy.SeichiID)\nfmt.Println(\"User Name:\", seichy.R.User.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#_122","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li><code>LoadContent</code> \u95a2\u6570\u306f\u3001\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u4e00\u62ec\u3067\u53d6\u5f97\u3057\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002</li> <li><code>SetUser</code> \u95a2\u6570\u306f\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068 <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u95a2\u9023\u4ed8\u3051\u3092\u884c\u3044\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u66f4\u65b0\u3082\u884c\u3044\u307e\u3059\u3002</li> <li><code>singular</code> \u30d5\u30e9\u30b0\u3084 <code>insert</code> \u30d5\u30e9\u30b0\u3092\u6b63\u3057\u304f\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u9069\u5207\u306a\u51e6\u7406\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u9069\u5207\u306b\u884c\u3044\u3001\u30c7\u30fc\u30bf\u306e\u4e0d\u6574\u5408\u3084\u4e88\u671f\u305b\u306c\u6319\u52d5\u3092\u9632\u304e\u307e\u3059\u3002</li> </ul> <p><code>LoadContent</code> \u95a2\u6570\u3068 <code>SetUser</code> \u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b <code>Content</code> \u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u3084\u3001<code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u95a2\u9023\u4ed8\u3051\u3092\u52b9\u7387\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#setplace-setcontent","title":"<code>SetPlace</code> \u95a2\u6570\u3001<code>SetContent</code> \u95a2\u6570\u3001\u304a\u3088\u3073\u305d\u306e\u4ed6\u306e\u95a2\u9023\u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<p>\u4ee5\u4e0b\u306e\u95a2\u6570\u306b\u3064\u3044\u3066\u3001\u30b3\u30fc\u30c9\u306e\u5168\u3066\u306e\u90e8\u5206\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002</p> <ul> <li><code>SetPlace</code> \u95a2\u6570</li> <li><code>SetContent</code> \u95a2\u6570</li> <li><code>Seichies</code> \u95a2\u6570</li> <li><code>FindSeichy</code> \u95a2\u6570</li> <li><code>Insert</code> \u95a2\u6570</li> <li><code>Update</code> \u95a2\u6570</li> </ul> <p>\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u8a2d\u5b9a\u306b\u95a2\u9023\u3057\u3066\u304a\u308a\u3001N\u5bfe1\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u6301\u3064\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u30fb\u8a2d\u5b9a\u30fb\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\u3002\u958b\u767a\u8005\u304c\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u7406\u89e3\u3057\u3001\u9069\u5207\u306b\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u4f8b\u3082\u542b\u3081\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#setplace","title":"<code>SetPlace</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_123","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>SetPlace</code> \u95a2\u6570\u306f\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u95a2\u9023\u3059\u308b <code>Place</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b <code>Place</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a2d\u5b9a\u3057\u3001\u305d\u306e\u95a2\u4fc2\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304a\u3088\u3073\u30e1\u30e2\u30ea\u4e0a\u3067\u7dad\u6301\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_124","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *Seichy) SetPlace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Place) error\n</code></pre> <ul> <li><code>o *Seichy</code>\uff1a\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u8a2d\u5b9a\u3059\u308b\u5bfe\u8c61\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> <li><code>ctx context.Context</code>\uff1a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li><code>exec boil.ContextExecutor</code>\uff1a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3002</li> <li><code>insert bool</code>\uff1a<code>Place</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u6307\u5b9a\u3002</li> <li><code>related *Place</code>\uff1a\u95a2\u9023\u4ed8\u3051\u308b <code>Place</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_125","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#1_4","title":"1. \u5909\u6570\u306e\u5ba3\u8a00","text":"<pre><code>var err error\n</code></pre> <ul> <li>\u30a8\u30e9\u30fc\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#2_4","title":"2. \u633f\u5165\u30d5\u30e9\u30b0\u306b\u57fa\u3065\u304f\u51e6\u7406","text":"<pre><code>if insert {\n    if err = related.Insert(ctx, exec, boil.Infer()); err != nil {\n        return errors.Wrap(err, \"failed to insert into foreign table\")\n    }\n}\n</code></pre> <ul> <li><code>insert</code> \u30d5\u30e9\u30b0\u304c <code>true</code> \u306e\u5834\u5408\u3001\u95a2\u9023\u3059\u308b <code>Place</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3057\u307e\u3059\u3002</li> <li><code>related.Insert</code> \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u633f\u5165\u3057\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u305d\u306e\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#3-seichy_1","title":"3. <code>Seichy</code> \u30c6\u30fc\u30d6\u30eb\u306e\u66f4\u65b0","text":"<pre><code>updateQuery := fmt.Sprintf(\n    \"UPDATE `seichies` SET %s WHERE %s\",\n    strmangle.SetParamNames(\"`\", \"`\", 0, []string{\"place_id\"}),\n    strmangle.WhereClause(\"`\", \"`\", 0, seichyPrimaryKeyColumns),\n)\nvalues := []interface{}{related.PlaceID, o.SeichiID}\n\nif boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, updateQuery)\n    fmt.Fprintln(writer, values)\n}\nif _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {\n    return errors.Wrap(err, \"failed to update local table\")\n}\n</code></pre> <ul> <li><code>Seichy</code> \u30c6\u30fc\u30d6\u30eb\u306e <code>place_id</code> \u30ab\u30e9\u30e0\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li><code>strmangle</code> \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u3001\u52d5\u7684\u306a\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3092\u751f\u6210\u3057\u307e\u3059\u3002</li> <li><code>values</code> \u30b9\u30e9\u30a4\u30b9\u306b\u306f\u3001\u66f4\u65b0\u306b\u4f7f\u7528\u3059\u308b\u5024\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002</li> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u304c\u6709\u52b9\u306a\u5834\u5408\u3001\u30af\u30a8\u30ea\u3068\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u305d\u306e\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#4_1","title":"4. \u30ed\u30fc\u30ab\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u66f4\u65b0","text":"<pre><code>o.PlaceID = related.PlaceID\nif o.R == nil {\n    o.R = &amp;seichyR{\n        Place: related,\n    }\n} else {\n    o.R.Place = related\n}\n</code></pre> <ul> <li><code>o.PlaceID</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u30d5\u30a3\u30fc\u30eb\u30c9 <code>o.R.Place</code> \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li><code>o.R</code> \u304c <code>nil</code> \u306e\u5834\u5408\u3001\u65b0\u3057\u3044\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#5_4","title":"5. \u95a2\u9023\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u8a2d\u5b9a","text":"<pre><code>if related.R == nil {\n    related.R = &amp;placeR{\n        Seichies: SeichySlice{o},\n    }\n} else {\n    related.R.Seichies = append(related.R.Seichies, o)\n}\n</code></pre> <ul> <li><code>related</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u30d5\u30a3\u30fc\u30eb\u30c9 <code>related.R.Seichies</code> \u306b <code>o</code> \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> <li><code>related.R</code> \u304c <code>nil</code> \u306e\u5834\u5408\u3001\u65b0\u3057\u3044\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u69cb\u9020\u4f53\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#6_4","title":"6. \u30a8\u30e9\u30fc\u304c\u306a\u3044\u5834\u5408\u3001\u6210\u529f\u3092\u8fd4\u3059","text":"<pre><code>return nil\n</code></pre> <ul> <li>\u5168\u3066\u306e\u51e6\u7406\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001<code>nil</code> \u3092\u8fd4\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_126","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":"<p>\u4ee5\u4e0b\u306b\u3001<code>SetPlace</code> \u95a2\u6570\u306e\u5177\u4f53\u7684\u306a\u5229\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#place_1","title":"\u65b0\u3057\u3044 <code>Place</code> \u3092\u4f5c\u6210\u3057\u3066\u95a2\u9023\u4ed8\u3051\u308b\u5834\u5408","text":"<pre><code>// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u306e\u53d6\u5f97\uff08\u4f8b\uff09\ndb, err := sql.Open(\"mysql\", \"your_connection_string\")\nif err != nil {\n    log.Fatal(err)\n}\n\nctx := context.Background()\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichy, err := Seichies(qm.Where(\"seichi_id=?\", 1)).One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u65b0\u3057\u3044 Place \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\nnewPlace := &amp;Place{\n    Name: \"\u65b0\u3057\u3044\u5834\u6240\",\n    // \u4ed6\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\n}\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b Place \u3092\u8a2d\u5b9a\u3057\u3001Place \u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\nerr = seichy.SetPlace(ctx, db, true, newPlace)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3055\u308c\u305f Seichy \u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f Place \u3092\u4f7f\u7528\nfmt.Println(\"Seichy ID:\", seichy.SeichiID)\nfmt.Println(\"Place Name:\", seichy.R.Place.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#place_2","title":"\u65e2\u5b58\u306e <code>Place</code> \u3092\u95a2\u9023\u4ed8\u3051\u308b\u5834\u5408","text":"<pre><code>// \u65e2\u5b58\u306e Place \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nexistingPlace, err := Places(qm.Where(\"place_id=?\", 2)).One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u65e2\u5b58\u306e Place \u3092\u8a2d\u5b9a\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u633f\u5165\u306f\u4e0d\u8981\uff09\nerr = seichy.SetPlace(ctx, db, false, existingPlace)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3055\u308c\u305f Seichy \u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f Place \u3092\u4f7f\u7528\nfmt.Println(\"Seichy ID:\", seichy.SeichiID)\nfmt.Println(\"Place Name:\", seichy.R.Place.Name)\n</code></pre>"},{"location":"DB/model/point_logs.go/#setcontent","title":"<code>SetContent</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_127","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>SetContent</code> \u95a2\u6570\u306f\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u95a2\u9023\u3059\u308b <code>Content</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b <code>Content</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a2d\u5b9a\u3057\u3001\u305d\u306e\u95a2\u4fc2\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304a\u3088\u3073\u30e1\u30e2\u30ea\u4e0a\u3067\u7dad\u6301\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_128","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *Seichy) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error\n</code></pre> <ul> <li>\u5f15\u6570\u3084\u623b\u308a\u5024\u306f <code>SetPlace</code> \u95a2\u6570\u3068\u540c\u69d8\u3067\u3059\u304c\u3001\u5bfe\u8c61\u304c <code>Place</code> \u3067\u306f\u306a\u304f <code>Content</code> \u3067\u3042\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_129","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<p><code>SetPlace</code> \u95a2\u6570\u3068\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u304c\u3001\u5bfe\u8c61\u304c <code>Place</code> \u3067\u306f\u306a\u304f <code>Content</code> \u3067\u3042\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#1_5","title":"1. \u5909\u6570\u306e\u5ba3\u8a00","text":"<pre><code>var err error\n</code></pre>"},{"location":"DB/model/point_logs.go/#2_5","title":"2. \u633f\u5165\u30d5\u30e9\u30b0\u306b\u57fa\u3065\u304f\u51e6\u7406","text":"<pre><code>if insert {\n    if err = related.Insert(ctx, exec, boil.Infer()); err != nil {\n        return errors.Wrap(err, \"failed to insert into foreign table\")\n    }\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#3-seichy_2","title":"3. <code>Seichy</code> \u30c6\u30fc\u30d6\u30eb\u306e\u66f4\u65b0","text":"<pre><code>updateQuery := fmt.Sprintf(\n    \"UPDATE `seichies` SET %s WHERE %s\",\n    strmangle.SetParamNames(\"`\", \"`\", 0, []string{\"content_id\"}),\n    strmangle.WhereClause(\"`\", \"`\", 0, seichyPrimaryKeyColumns),\n)\nvalues := []interface{}{related.ContentID, o.SeichiID}\n\nif boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, updateQuery)\n    fmt.Fprintln(writer, values)\n}\nif _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {\n    return errors.Wrap(err, \"failed to update local table\")\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#4_2","title":"4. \u30ed\u30fc\u30ab\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u66f4\u65b0","text":"<pre><code>o.ContentID = related.ContentID\nif o.R == nil {\n    o.R = &amp;seichyR{\n        Content: related,\n    }\n} else {\n    o.R.Content = related\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#5_5","title":"5. \u95a2\u9023\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u8a2d\u5b9a","text":"<pre><code>if related.R == nil {\n    related.R = &amp;contentR{\n        Seichies: SeichySlice{o},\n    }\n} else {\n    related.R.Seichies = append(related.R.Seichies, o)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#6_5","title":"6. \u30a8\u30e9\u30fc\u304c\u306a\u3044\u5834\u5408\u3001\u6210\u529f\u3092\u8fd4\u3059","text":"<pre><code>return nil\n</code></pre>"},{"location":"DB/model/point_logs.go/#_130","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":""},{"location":"DB/model/point_logs.go/#content_1","title":"\u65b0\u3057\u3044 <code>Content</code> \u3092\u4f5c\u6210\u3057\u3066\u95a2\u9023\u4ed8\u3051\u308b\u5834\u5408","text":"<pre><code>// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u306e\u53d6\u5f97\uff08\u4f8b\uff09\ndb, err := sql.Open(\"mysql\", \"your_connection_string\")\nif err != nil {\n    log.Fatal(err)\n}\n\nctx := context.Background()\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichy, err := Seichies(qm.Where(\"seichi_id=?\", 1)).One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u65b0\u3057\u3044 Content \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\nnewContent := &amp;Content{\n    Title: \"\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30f3\u30c4\",\n    // \u4ed6\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\n}\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b Content \u3092\u8a2d\u5b9a\u3057\u3001Content \u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\nerr = seichy.SetContent(ctx, db, true, newContent)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3055\u308c\u305f Seichy \u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f Content \u3092\u4f7f\u7528\nfmt.Println(\"Seichy ID:\", seichy.SeichiID)\nfmt.Println(\"Content Title:\", seichy.R.Content.Title)\n</code></pre>"},{"location":"DB/model/point_logs.go/#content_2","title":"\u65e2\u5b58\u306e <code>Content</code> \u3092\u95a2\u9023\u4ed8\u3051\u308b\u5834\u5408","text":"<pre><code>// \u65e2\u5b58\u306e Content \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nexistingContent, err := Contents(qm.Where(\"content_id=?\", 2)).One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u65e2\u5b58\u306e Content \u3092\u8a2d\u5b9a\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u633f\u5165\u306f\u4e0d\u8981\uff09\nerr = seichy.SetContent(ctx, db, false, existingContent)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3055\u308c\u305f Seichy \u3068\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f Content \u3092\u4f7f\u7528\nfmt.Println(\"Seichy ID:\", seichy.SeichiID)\nfmt.Println(\"Content Title:\", seichy.R.Content.Title)\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichies","title":"<code>Seichies</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_131","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>Seichies</code> \u95a2\u6570\u306f\u3001<code>seichies</code> \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u7c21\u5358\u306b\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_132","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func Seichies(mods ...qm.QueryMod) seichyQuery\n</code></pre> <ul> <li><code>mods ...qm.QueryMod</code>\uff1a\u30af\u30a8\u30ea\u306b\u9069\u7528\u3059\u308b\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\uff08\u4fee\u98fe\u5b50\uff09\u3002</li> <li>\u623b\u308a\u5024\uff1a<code>seichyQuery</code> \u578b\u306e\u30af\u30a8\u30ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_133","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#1_6","title":"1. \u30af\u30a8\u30ea\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u306e\u8ffd\u52a0","text":"<pre><code>mods = append(mods, qm.From(\"`seichies`\"))\n</code></pre> <ul> <li>\u53d7\u3051\u53d6\u3063\u305f\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u306b\u3001<code>FROM 'seichies'</code> \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#2_6","title":"2. \u65b0\u3057\u3044\u30af\u30a8\u30ea\u306e\u4f5c\u6210","text":"<pre><code>q := NewQuery(mods...)\n</code></pre> <ul> <li>\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u3092\u9069\u7528\u3057\u305f\u65b0\u3057\u3044\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#3-select","title":"3. SELECT \u6587\u306e\u8a2d\u5b9a","text":"<pre><code>if len(queries.GetSelect(q)) == 0 {\n    queries.SetSelect(q, []string{\"`seichies`.*\"})\n}\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u306b <code>SELECT</code> \u6587\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001<code>seichies</code> \u30c6\u30fc\u30d6\u30eb\u306e\u5168\u3066\u306e\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#4_3","title":"4. \u30af\u30a8\u30ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8fd4\u5374","text":"<pre><code>return seichyQuery{q}\n</code></pre> <ul> <li>\u4f5c\u6210\u3057\u305f\u30af\u30a8\u30ea\u3092 <code>seichyQuery</code> \u578b\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_134","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":"<pre><code>// \u5168\u3066\u306e Seichy \u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\nseichies, err := Seichies().All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u7279\u5b9a\u306e\u6761\u4ef6\u3067 Seichy \u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\nseichies, err := Seichies(qm.Where(\"user_id = ?\", 1)).All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u53d6\u5f97\u3057\u305f Seichy \u30ec\u30b3\u30fc\u30c9\u3092\u4f7f\u7528\nfor _, s := range seichies {\n    fmt.Println(\"Seichy ID:\", s.SeichiID)\n    // \u4ed6\u306e\u64cd\u4f5c\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#findseichy","title":"<code>FindSeichy</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_135","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>FindSeichy</code> \u95a2\u6570\u306f\u3001\u6307\u5b9a\u3055\u308c\u305f\u4e3b\u30ad\u30fc\uff08<code>seichi_id</code>\uff09\u306b\u57fa\u3065\u3044\u3066\u3001<code>seichies</code> \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5358\u4e00\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u7279\u5b9a\u306e\u30ab\u30e9\u30e0\u306e\u307f\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_136","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func FindSeichy(ctx context.Context, exec boil.ContextExecutor, seichiID int, selectCols ...string) (*Seichy, error)\n</code></pre> <ul> <li><code>seichiID int</code>\uff1a\u691c\u7d22\u5bfe\u8c61\u306e <code>seichi_id</code>\u3002</li> <li><code>selectCols ...string</code>\uff1a\u9078\u629e\u3059\u308b\u30ab\u30e9\u30e0\u540d\u306e\u53ef\u5909\u9577\u5f15\u6570\u3002\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u5168\u3066\u306e\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3002</li> <li>\u623b\u308a\u5024\uff1a<code>*Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30a8\u30e9\u30fc\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_137","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#1_7","title":"1. \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316","text":"<pre><code>seichyObj := &amp;Seichy{}\n</code></pre> <ul> <li>\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#2-select","title":"2. SELECT \u6587\u306e\u8a2d\u5b9a","text":"<pre><code>sel := \"*\"\nif len(selectCols) &gt; 0 {\n    sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), \",\")\n}\n</code></pre> <ul> <li><code>selectCols</code> \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u306e\u30ab\u30e9\u30e0\u306e\u307f\u3092\u9078\u629e\u3059\u308b\u3088\u3046\u306b\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</li> <li><code>strmangle.IdentQuoteSlice</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u30ab\u30e9\u30e0\u540d\u3092\u9069\u5207\u306b\u30af\u30aa\u30fc\u30c8\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#3","title":"3. \u30af\u30a8\u30ea\u306e\u69cb\u7bc9","text":"<pre><code>query := fmt.Sprintf(\n    \"select %s from `seichies` where `seichi_id`=?\", sel,\n)\n</code></pre> <ul> <li>\u4e3b\u30ad\u30fc\u306b\u3088\u308b\u691c\u7d22\u3092\u884c\u3046\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#4_4","title":"4. \u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u53d6\u5f97","text":"<pre><code>q := queries.Raw(query, seichiID)\n\nerr := q.Bind(ctx, exec, seichyObj)\nif err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        return nil, sql.ErrNoRows\n    }\n    return nil, errors.Wrap(err, \"models: unable to select from seichies\")\n}\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092 <code>seichyObj</code> \u306b\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002</li> <li>\u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001<code>sql.ErrNoRows</code> \u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#5_6","title":"5. \u30d5\u30c3\u30af\u306e\u5b9f\u884c","text":"<pre><code>if err = seichyObj.doAfterSelectHooks(ctx, exec); err != nil {\n    return seichyObj, err\n}\n</code></pre> <ul> <li><code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001<code>AfterSelect</code> \u30d5\u30c3\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#6_6","title":"6. \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8fd4\u5374","text":"<pre><code>return seichyObj, nil\n</code></pre> <ul> <li>\u53d6\u5f97\u3057\u305f <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_138","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":"<pre><code>// \u7279\u5b9a\u306e Seichy \u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\nseichy, err := FindSeichy(ctx, db, 1)\nif err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        fmt.Println(\"\u30ec\u30b3\u30fc\u30c9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\")\n    } else {\n        log.Fatal(err)\n    }\n} else {\n    fmt.Println(\"Seichy ID:\", seichy.SeichiID)\n    // \u4ed6\u306e\u64cd\u4f5c\n}\n\n// \u7279\u5b9a\u306e\u30ab\u30e9\u30e0\u306e\u307f\u3092\u53d6\u5f97\nseichy, err := FindSeichy(ctx, db, 1, \"seichi_id\", \"user_id\")\nif err != nil {\n    log.Fatal(err)\n}\nfmt.Println(\"Seichy ID:\", seichy.SeichiID)\nfmt.Println(\"User ID:\", seichy.UserID)\n</code></pre>"},{"location":"DB/model/point_logs.go/#insert_1","title":"<code>Insert</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_139","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>Insert</code> \u95a2\u6570\u306f\u3001<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3057\u307e\u3059\u3002\u9069\u5207\u306a\u30ab\u30e9\u30e0\u306e\u30bb\u30c3\u30c8\u3084\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u9069\u7528\u3001\u30d5\u30c3\u30af\u306e\u5b9f\u884c\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_140","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *Seichy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n</code></pre> <ul> <li><code>o *Seichy</code>\uff1a\u633f\u5165\u3059\u308b <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> <li><code>columns boil.Columns</code>\uff1a\u633f\u5165\u6642\u306b\u4f7f\u7528\u3059\u308b\u30ab\u30e9\u30e0\u306e\u8a2d\u5b9a\u3002<code>boil.Infer()</code> \u3092\u4f7f\u7528\u3059\u308b\u3068\u975e\u30bc\u30ed\u5024\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u633f\u5165\u3055\u308c\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_141","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#1_8","title":"1. \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5b58\u5728\u78ba\u8a8d","text":"<pre><code>if o == nil {\n    return errors.New(\"models: no seichies provided for insertion\")\n}\n</code></pre> <ul> <li><code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c <code>nil</code> \u3067\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#2_7","title":"2. \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u8a2d\u5b9a","text":"<pre><code>if !boil.TimestampsAreSkipped(ctx) {\n    currTime := time.Now().In(boil.GetLocation())\n\n    if queries.MustTime(o.CreatedAt).IsZero() {\n        queries.SetScanner(&amp;o.CreatedAt, currTime)\n    }\n    if queries.MustTime(o.UpdatedAt).IsZero() {\n        queries.SetScanner(&amp;o.UpdatedAt, currTime)\n    }\n}\n</code></pre> <ul> <li><code>CreatedAt</code> \u3068 <code>UpdatedAt</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u73fe\u5728\u6642\u523b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#3-beforeinsert","title":"3. <code>BeforeInsert</code> \u30d5\u30c3\u30af\u306e\u5b9f\u884c","text":"<pre><code>if err := o.doBeforeInsertHooks(ctx, exec); err != nil {\n    return err\n}\n</code></pre> <ul> <li><code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001<code>BeforeInsert</code> \u30d5\u30c3\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#4_5","title":"4. \u975e\u30bc\u30ed\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u30bb\u30c3\u30c8\u306e\u53d6\u5f97","text":"<pre><code>nzDefaults := queries.NonZeroDefaultSet(seichyColumnsWithDefault, o)\n</code></pre> <ul> <li>\u975e\u30bc\u30ed\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u30ab\u30e9\u30e0\u306e\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#5_7","title":"5. \u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u4f5c\u6210\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u78ba\u8a8d","text":"<pre><code>key := makeCacheKey(columns, nzDefaults)\nseichyInsertCacheMut.RLock()\ncache, cached := seichyInsertCache[key]\nseichyInsertCacheMut.RUnlock()\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u69cb\u3092\u4f7f\u7528\u3057\u3066\u3001\u540c\u3058\u30ab\u30e9\u30e0\u30bb\u30c3\u30c8\u306e\u30af\u30a8\u30ea\u3092\u52b9\u7387\u7684\u306b\u518d\u5229\u7528\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#6_7","title":"6. \u30af\u30a8\u30ea\u3068\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u6e96\u5099","text":"<pre><code>if !cached {\n    // \u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u3068\u30ea\u30bf\u30fc\u30f3\u30ab\u30e9\u30e0\u306e\u8a2d\u5b9a\n    wl, returnColumns := columns.InsertColumnSet(\n        seichyAllColumns,\n        seichyColumnsWithDefault,\n        seichyColumnsWithoutDefault,\n        nzDefaults,\n    )\n\n    // \u30d0\u30ea\u30e5\u30fc\u30de\u30c3\u30d4\u30f3\u30b0\u3068\u30ea\u30bf\u30fc\u30f3\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u4f5c\u6210\n    cache.valueMapping, err = queries.BindMapping(seichyType, seichyMapping, wl)\n    if err != nil {\n        return err\n    }\n    cache.retMapping, err = queries.BindMapping(seichyType, seichyMapping, returnColumns)\n    if err != nil {\n        return err\n    }\n\n    // \u30af\u30a8\u30ea\u6587\u5b57\u5217\u306e\u4f5c\u6210\n    if len(wl) != 0 {\n        cache.query = fmt.Sprintf(\"INSERT INTO `seichies` (`%s`) %%sVALUES (%s)%%s\", strings.Join(wl, \"`,`\"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))\n    } else {\n        cache.query = \"INSERT INTO `seichies` () VALUES ()%s%s\"\n    }\n\n    // \u623b\u308a\u5024\u306e\u30af\u30a8\u30ea\u306e\u4f5c\u6210\n    if len(cache.retMapping) != 0 {\n        cache.retQuery = fmt.Sprintf(\"SELECT `%s` FROM `seichies` WHERE %s\", strings.Join(returnColumns, \"`,`\"), strmangle.WhereClause(\"`\", \"`\", 0, seichyPrimaryKeyColumns))\n    }\n\n    cache.query = fmt.Sprintf(cache.query, \"\", \"\")\n}\n</code></pre> <ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30af\u30a8\u30ea\u3068\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#7_3","title":"7. \u5024\u306e\u53d6\u5f97\u3068\u30af\u30a8\u30ea\u306e\u5b9f\u884c","text":"<pre><code>value := reflect.Indirect(reflect.ValueOf(o))\nvals := queries.ValuesFromMapping(value, cache.valueMapping)\n\nif boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, cache.query)\n    fmt.Fprintln(writer, vals)\n}\nresult, err := exec.ExecContext(ctx, cache.query, vals...)\n\nif err != nil {\n    return errors.Wrap(err, \"models: unable to insert into seichies\")\n}\n</code></pre> <ul> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u5024\u3092\u62bd\u51fa\u3057\u3001\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#8-id","title":"8. \u6700\u5f8c\u306e\u633f\u5165ID\u306e\u53d6\u5f97\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u53cd\u6620","text":"<pre><code>var lastID int64\nlastID, err = result.LastInsertId()\nif err != nil {\n    return ErrSyncFail\n}\n\no.SeichiID = int(lastID)\n</code></pre> <ul> <li><code>LastInsertId</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u65b0\u3057\u304f\u633f\u5165\u3055\u308c\u305f\u30ec\u30b3\u30fc\u30c9\u306eID\u3092\u53d6\u5f97\u3057\u3001<code>o.SeichiID</code> \u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#9_3","title":"9. \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u53d6\u5f97\uff08\u5fc5\u8981\u306a\u5834\u5408\uff09","text":"<pre><code>if len(cache.retMapping) != 0 {\n    identifierCols = []interface{}{\n        o.SeichiID,\n    }\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, cache.retQuery)\n        fmt.Fprintln(writer, identifierCols...)\n    }\n    err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)\n    if err != nil {\n        return errors.Wrap(err, \"models: unable to populate default values for seichies\")\n    }\n}\n</code></pre> <ul> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u53d6\u5f97\u3057\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u53cd\u6620\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#10","title":"10. \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4fdd\u5b58","text":"<pre><code>if !cached {\n    seichyInsertCacheMut.Lock()\n    seichyInsertCache[key] = cache\n    seichyInsertCacheMut.Unlock()\n}\n</code></pre> <ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u65b0\u3057\u304f\u4f5c\u6210\u3057\u305f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#11-afterinsert","title":"11. <code>AfterInsert</code> \u30d5\u30c3\u30af\u306e\u5b9f\u884c","text":"<pre><code>return o.doAfterInsertHooks(ctx, exec)\n</code></pre> <ul> <li><code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001<code>AfterInsert</code> \u30d5\u30c3\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_142","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":"<pre><code>// \u65b0\u3057\u3044 Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\nnewSeichy := &amp;Seichy{\n    UserID: 1,\n    PlaceID: 2,\n    ContentID: 3,\n    // \u4ed6\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\n}\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\nerr := newSeichy.Insert(ctx, db, boil.Infer())\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u633f\u5165\u3055\u308c\u305f Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u60c5\u5831\u3092\u4f7f\u7528\nfmt.Println(\"\u633f\u5165\u3055\u308c\u305f Seichy ID:\", newSeichy.SeichiID)\n</code></pre>"},{"location":"DB/model/point_logs.go/#update_1","title":"<code>Update</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#_143","title":"\u95a2\u6570\u306e\u6982\u8981","text":"<p><code>Update</code> \u95a2\u6570\u306f\u3001\u65e2\u5b58\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3067\u66f4\u65b0\u3057\u307e\u3059\u3002\u5fc5\u8981\u306a\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3057\u3066\u66f4\u65b0\u3057\u3001\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u66f4\u65b0\u3084\u30d5\u30c3\u30af\u306e\u5b9f\u884c\u306a\u3069\u3092\u884c\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#_144","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *Seichy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n</code></pre> <ul> <li><code>columns boil.Columns</code>\uff1a\u66f4\u65b0\u6642\u306b\u4f7f\u7528\u3059\u308b\u30ab\u30e9\u30e0\u306e\u8a2d\u5b9a\u3002<code>boil.Infer()</code> \u3092\u4f7f\u7528\u3059\u308b\u3068\u975e\u30bc\u30ed\u5024\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002</li> <li>\u623b\u308a\u5024\uff1a\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3068\u30a8\u30e9\u30fc\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_145","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/point_logs.go/#1_9","title":"1. \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u66f4\u65b0","text":"<pre><code>if !boil.TimestampsAreSkipped(ctx) {\n    currTime := time.Now().In(boil.GetLocation())\n\n    queries.SetScanner(&amp;o.UpdatedAt, currTime)\n}\n</code></pre> <ul> <li><code>UpdatedAt</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u73fe\u5728\u6642\u523b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#2-beforeupdate","title":"2. <code>BeforeUpdate</code> \u30d5\u30c3\u30af\u306e\u5b9f\u884c","text":"<pre><code>if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {\n    return 0, err\n}\n</code></pre> <ul> <li><code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001<code>BeforeUpdate</code> \u30d5\u30c3\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#3_1","title":"3. \u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u4f5c\u6210\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u78ba\u8a8d","text":"<pre><code>key := makeCacheKey(columns, nil)\nseichyUpdateCacheMut.RLock()\ncache, cached := seichyUpdateCache[key]\nseichyUpdateCacheMut.RUnlock()\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u69cb\u3092\u4f7f\u7528\u3057\u3066\u3001\u540c\u3058\u30ab\u30e9\u30e0\u30bb\u30c3\u30c8\u306e\u30af\u30a8\u30ea\u3092\u52b9\u7387\u7684\u306b\u518d\u5229\u7528\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#4_6","title":"4. \u30af\u30a8\u30ea\u3068\u30de\u30c3\u30d4\u30f3\u30b0\u306e\u6e96\u5099","text":"<pre><code>if !cached {\n    wl := columns.UpdateColumnSet(\n        seichyAllColumns,\n        seichyPrimaryKeyColumns,\n    )\n\n    if !columns.IsWhitelist() {\n        wl = strmangle.SetComplement(wl, []string{\"created_at\"})\n    }\n    if len(wl) == 0 {\n        return 0, errors.New(\"models: unable to update seichies, could not build whitelist\")\n    }\n\n    cache.query = fmt.Sprintf(\"UPDATE `seichies` SET %s WHERE %s\",\n        strmangle.SetParamNames(\"`\", \"`\", 0, wl),\n        strmangle.WhereClause(\"`\", \"`\", 0, seichyPrimaryKeyColumns),\n    )\n    cache.valueMapping, err = queries.BindMapping(seichyType, seichyMapping, append(wl, seichyPrimaryKeyColumns...))\n    if err != nil {\n        return 0, err\n    }\n}\n</code></pre> <ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u66f4\u65b0\u306b\u4f7f\u7528\u3059\u308b\u30ab\u30e9\u30e0\u30bb\u30c3\u30c8\u3068\u30af\u30a8\u30ea\u3092\u6e96\u5099\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#5_8","title":"5. \u5024\u306e\u53d6\u5f97\u3068\u30af\u30a8\u30ea\u306e\u5b9f\u884c","text":"<pre><code>values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)\n\nif boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, cache.query)\n    fmt.Fprintln(writer, values)\n}\nvar result sql.Result\nresult, err = exec.ExecContext(ctx, cache.query, values...)\nif err != nil {\n    return 0, errors.Wrap(err, \"models: unable to update seichies row\")\n}\n</code></pre> <ul> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u5024\u3092\u62bd\u51fa\u3057\u3001\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#6_8","title":"6. \u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97","text":"<pre><code>rowsAff, err := result.RowsAffected()\nif err != nil {\n    return 0, errors.Wrap(err, \"models: failed to get rows affected by update for seichies\")\n}\n</code></pre> <ul> <li><code>RowsAffected</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#7_4","title":"7. \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4fdd\u5b58","text":"<pre><code>if !cached {\n    seichyUpdateCacheMut.Lock()\n    seichyUpdateCache[key] = cache\n    seichyUpdateCacheMut.Unlock()\n}\n</code></pre> <ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u65b0\u3057\u304f\u4f5c\u6210\u3057\u305f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#8-afterupdate","title":"8. <code>AfterUpdate</code> \u30d5\u30c3\u30af\u306e\u5b9f\u884c","text":"<pre><code>return rowsAff, o.doAfterUpdateHooks(ctx, exec)\n</code></pre> <ul> <li><code>AfterUpdate</code> \u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3057\u3001\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3068\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_146","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":"<pre><code>// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\nseichy, err := FindSeichy(ctx, db, 1)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u66f4\u65b0\nseichy.UserID = 2\nseichy.PlaceID = 3\n\n// Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3067\u66f4\u65b0\nrowsAff, err := seichy.Update(ctx, db, boil.Infer())\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570: %d\\n\", rowsAff)\n</code></pre>"},{"location":"DB/model/point_logs.go/#_147","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li><code>Insert</code> \u95a2\u6570\u3068 <code>Update</code> \u95a2\u6570\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u540c\u671f\u3092\u884c\u3044\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u3092\u53cd\u6620\u3057\u307e\u3059\u3002</li> <li>\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u969b\u306b\u306f\u3001\u9069\u5207\u306a\u30ab\u30e9\u30e0\u30bb\u30c3\u30c8\uff08\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u3084\u30d6\u30e9\u30c3\u30af\u30ea\u30b9\u30c8\uff09\u3092\u6307\u5b9a\u3057\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3084\u975e\u30bc\u30ed\u5024\u306e\u6271\u3044\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30d5\u30c3\u30af\uff08<code>BeforeInsert</code>\u3001<code>AfterInsert</code>\u3001<code>BeforeUpdate</code>\u3001<code>AfterUpdate</code> \u306a\u3069\uff09\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u3001\u633f\u5165\u3084\u66f4\u65b0\u306e\u524d\u5f8c\u306b\u30ab\u30b9\u30bf\u30e0\u51e6\u7406\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u9069\u5207\u306b\u884c\u3044\u3001\u30c7\u30fc\u30bf\u306e\u4e0d\u6574\u5408\u3084\u4e88\u671f\u305b\u306c\u6319\u52d5\u3092\u9632\u304e\u307e\u3059\u3002</li> </ul> <p>SetPlace<code>\u3001</code>SetContent<code>\u3001</code>Seichies<code>\u3001</code>FindSeichy<code>\u3001</code>Insert<code>\u3001</code>Update<code>\u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001</code>Seichy` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3001\u95a2\u9023\u4ed8\u3051\u3001\u633f\u5165\u3001\u66f4\u65b0\u3092\u52b9\u7387\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/point_logs.go/#updateall_2","title":"<code>UpdateAll</code> \u95a2\u6570\u306e\u89e3\u8aac","text":"<pre><code>// UpdateAll \u306f\u6307\u5b9a\u3055\u308c\u305f\u5217\u306e\u5024\u3067\u5168\u3066\u306e\u884c\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\nfunc (q seichyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {\n    // \u30af\u30a8\u30ea\u306b\u66f4\u65b0\u5185\u5bb9\u3092\u8a2d\u5b9a\n    queries.SetUpdate(q.Query, cols)\n\n    // \u30af\u30a8\u30ea\u3092\u5b9f\u884c\n    result, err := q.Query.ExecContext(ctx, exec)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to update all for seichies\")\n    }\n\n    // \u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u53d6\u5f97\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to retrieve rows affected for seichies\")\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_148","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: <code>UpdateAll</code> \u95a2\u6570\u306f\u3001\u30af\u30a8\u30ea\u306b\u30de\u30c3\u30c1\u3059\u308b\u5168\u3066\u306e\u884c\u3092\u6307\u5b9a\u3055\u308c\u305f\u5217\u306e\u5024\u3067\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u5236\u5fa1\u306b\u4f7f\u7528\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u5b9f\u884c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3084\u63a5\u7d9a\u3092\u6307\u5b9a\u3002</li> <li><code>cols M</code>: \u66f4\u65b0\u3059\u308b\u5217\u540d\u3068\u305d\u306e\u5024\u306e\u30de\u30c3\u30d7\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li><code>queries.SetUpdate</code> \u3092\u4f7f\u7528\u3057\u3066\u3001\u30af\u30a8\u30ea\u306b\u66f4\u65b0\u5185\u5bb9\u3092\u8a2d\u5b9a\u3002</li> <li><code>q.Query.ExecContext</code> \u3092\u4f7f\u7528\u3057\u3066\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3002</li> <li><code>result.RowsAffected</code> \u3067\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u53d6\u5f97\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_149","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db // *sql.DB \u307e\u305f\u306f *sql.Tx\n\n// \u66f4\u65b0\u3057\u305f\u3044\u5217\u3068\u5024\u3092\u30de\u30c3\u30d7\u3067\u6307\u5b9a\ncols := M{\n    \"column_name\": \"new_value\",\n}\n\n// \u30af\u30a8\u30ea\u3092\u4f5c\u6210\uff08\u4f8b: \u6761\u4ef6\u3068\u3057\u3066 \"status = 'active'\" \u306e\u884c\u3092\u66f4\u65b0\uff09\nq := Seichies(qm.Where(\"status=?\", \"active\"))\n\n// \u5168\u3066\u306e\u30de\u30c3\u30c1\u3059\u308b\u884c\u3092\u66f4\u65b0\nrowsAffected, err := q.UpdateAll(ctx, exec, cols)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570: %d\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/point_logs.go/#updateall_3","title":"<code>UpdateAll</code> \u30e1\u30bd\u30c3\u30c9\uff08\u30b9\u30e9\u30a4\u30b9\u7528\uff09\u306e\u89e3\u8aac","text":"<pre><code>// UpdateAll \u306f\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5168\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3055\u308c\u305f\u5217\u306e\u5024\u3067\u66f4\u65b0\u3057\u307e\u3059\u3002\nfunc (o SeichySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {\n    ln := int64(len(o))\n    if ln == 0 {\n        return 0, nil\n    }\n\n    if len(cols) == 0 {\n        return 0, errors.New(\"models: update all requires at least one column argument\")\n    }\n\n    // \u66f4\u65b0\u3059\u308b\u5217\u540d\u3068\u5024\u3092\u914d\u5217\u306b\u683c\u7d0d\n    colNames := make([]string, len(cols))\n    args := make([]interface{}, len(cols))\n\n    i := 0\n    for name, value := range cols {\n        colNames[i] = name\n        args[i] = value\n        i++\n    }\n\n    // \u4e3b\u30ad\u30fc\u306e\u5024\u3092\u5f15\u6570\u306b\u8ffd\u52a0\n    for _, obj := range o {\n        pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seichyPrimaryKeyMapping)\n        args = append(args, pkeyArgs...)\n    }\n\n    // SQL\u6587\u3092\u4f5c\u6210\n    sql := fmt.Sprintf(\"UPDATE `seichies` SET %s WHERE %s\",\n        strmangle.SetParamNames(\"`\", \"`\", 0, colNames),\n        strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seichyPrimaryKeyColumns, len(o)))\n\n    // \u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u306e\u51fa\u529b\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, args...)\n    }\n\n    // \u30af\u30a8\u30ea\u3092\u5b9f\u884c\n    result, err := exec.ExecContext(ctx, sql, args...)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to update all in seichy slice\")\n    }\n\n    // \u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u53d6\u5f97\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to retrieve rows affected all in update all seichy\")\n    }\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_150","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: <code>Seichy</code> \u578b\u306e\u30b9\u30e9\u30a4\u30b9\u5168\u4f53\u306b\u5bfe\u3057\u3066\u3001\u4e00\u62ec\u3067\u6307\u5b9a\u3055\u308c\u305f\u5217\u306e\u5024\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5b9f\u884c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002</li> <li><code>cols M</code>: \u66f4\u65b0\u3059\u308b\u5217\u3068\u305d\u306e\u5024\u306e\u30de\u30c3\u30d7\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30b9\u30e9\u30a4\u30b9\u304c\u7a7a\u306e\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3002</li> <li>\u66f4\u65b0\u3059\u308b\u5217\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3002</li> <li>\u66f4\u65b0\u3059\u308b\u5217\u540d\u3068\u5024\u3092\u6e96\u5099\u3002</li> <li>\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u4e3b\u30ad\u30fc\u306e\u5024\u3092\u53d6\u5f97\u3057\u3001\u5f15\u6570\u306b\u8ffd\u52a0\u3002</li> <li>\u66f4\u65b0\u7528\u306e SQL \u6587\u3092\u52d5\u7684\u306b\u4f5c\u6210\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u8fd4\u3059\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_151","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db\n\n// \u66f4\u65b0\u3057\u305f\u3044 Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\nseichySlice := SeichySlice{\n    &amp;Seichy{SeichiID: 1},\n    &amp;Seichy{SeichiID: 2},\n    &amp;Seichy{SeichiID: 3},\n}\n\n// \u66f4\u65b0\u3059\u308b\u5217\u3068\u5024\ncols := M{\n    \"status\": \"inactive\",\n}\n\n// \u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5168\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u66f4\u65b0\nrowsAffected, err := seichySlice.UpdateAll(ctx, exec, cols)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570: %d\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/point_logs.go/#upsert_1","title":"<code>Upsert</code> \u95a2\u6570\u306e\u89e3\u8aac","text":"<pre><code>var mySQLSeichyUniqueColumns = []string{\n    \"seichi_id\",\n}\n\n// Upsert \u306f\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u633f\u5165\u3092\u8a66\u307f\u3001\u885d\u7a81\u304c\u3042\u3063\u305f\u5834\u5408\u306f\u66f4\u65b0\u307e\u305f\u306f\u7121\u8996\u3092\u884c\u3044\u307e\u3059\u3002\n// updateColumns \u3068 insertColumns \u306e\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001boil.Columns \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nfunc (o *Seichy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {\n    if o == nil {\n        return errors.New(\"models: no seichies provided for upsert\")\n    }\n    if !boil.TimestampsAreSkipped(ctx) {\n        currTime := time.Now().In(boil.GetLocation())\n\n        if queries.MustTime(o.CreatedAt).IsZero() {\n            queries.SetScanner(&amp;o.CreatedAt, currTime)\n        }\n        queries.SetScanner(&amp;o.UpdatedAt, currTime)\n    }\n\n    if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {\n        return err\n    }\n\n    // \u4ee5\u4e0b\u3001Upsert \u51e6\u7406\u306e\u5b9f\u88c5\uff08\u7701\u7565\uff09\n\n    return o.doAfterUpsertHooks(ctx, exec)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_152","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: <code>Upsert</code> \u95a2\u6570\u306f\u3001\u30c7\u30fc\u30bf\u306e\u633f\u5165\u3092\u8a66\u307f\u3001\u4e3b\u30ad\u30fc\u3084\u4e00\u610f\u5236\u7d04\u306b\u9055\u53cd\u3059\u308b\u5834\u5408\u306f\u66f4\u65b0\u307e\u305f\u306f\u7121\u8996\u3092\u884c\u3044\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5185\u306b\u65e2\u306b\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u66f4\u65b0\u3057\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u633f\u5165\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5b9f\u884c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002</li> <li><code>updateColumns boil.Columns</code>: \u66f4\u65b0\u6642\u306b\u4f7f\u7528\u3059\u308b\u5217\u3092\u6307\u5b9a\u3002</li> <li><code>insertColumns boil.Columns</code>: \u633f\u5165\u6642\u306b\u4f7f\u7528\u3059\u308b\u5217\u3092\u6307\u5b9a\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c <code>nil</code> \u3067\u306a\u3044\u304b\u78ba\u8a8d\u3002</li> <li>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3092\u73fe\u5728\u6642\u523b\u3067\u66f4\u65b0\uff08\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\uff09\u3002</li> <li><code>doBeforeUpsertHooks</code> \u3092\u5b9f\u884c\uff08\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u524d\u306e\u30d5\u30c3\u30af\u51e6\u7406\uff09\u3002</li> <li>Upsert \u306e\u51e6\u7406\u3092\u5b9f\u884c\uff08\u5177\u4f53\u7684\u306a SQL \u30af\u30a8\u30ea\u306e\u7d44\u307f\u7acb\u3066\u3068\u5b9f\u884c\uff09\u3002</li> <li><code>doAfterUpsertHooks</code> \u3092\u5b9f\u884c\uff08\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u5f8c\u306e\u30d5\u30c3\u30af\u51e6\u7406\uff09\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_153","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db\n\nseichy := &amp;Seichy{\n    SeichiID: 1,\n    Name:     \"Sample\",\n    Status:   \"active\",\n}\n\n// \u633f\u5165\u6642\u3068\u66f4\u65b0\u6642\u306b\u4f7f\u7528\u3059\u308b\u5217\u3092\u6307\u5b9a\ninsertColumns := boil.Infer()\nupdateColumns := boil.Whitelist(\"name\", \"status\")\n\nerr := seichy.Upsert(ctx, exec, updateColumns, insertColumns)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"Upsert \u5b8c\u4e86\")\n</code></pre>"},{"location":"DB/model/point_logs.go/#delete_1","title":"<code>Delete</code> \u95a2\u6570\u306e\u89e3\u8aac","text":"<pre><code>// Delete \u306f\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u5358\u4e00\u306e Seichy \u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n// Delete \u306f\u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3059\u308b\u305f\u3081\u306b\u4e3b\u30ad\u30fc\u5217\u306b\u30de\u30c3\u30c1\u3057\u307e\u3059\u3002\nfunc (o *Seichy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    if o == nil {\n        return 0, errors.New(\"models: no Seichy provided for delete\")\n    }\n\n    if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {\n        return 0, err\n    }\n\n    args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seichyPrimaryKeyMapping)\n    sql := \"DELETE FROM `seichies` WHERE `seichi_id`=?\"\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, args...)\n    }\n    result, err := exec.ExecContext(ctx, sql, args...)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to delete from seichies\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by delete for seichies\")\n    }\n\n    if err := o.doAfterDeleteHooks(ctx, exec); err != nil {\n        return 0, err\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_154","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: \u5358\u4e00\u306e <code>Seichy</code> \u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002\u524a\u9664\u5bfe\u8c61\u306f\u4e3b\u30ad\u30fc\u306b\u57fa\u3065\u3044\u3066\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5b9f\u884c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c <code>nil</code> \u3067\u306a\u3044\u304b\u78ba\u8a8d\u3002</li> <li><code>doBeforeDeleteHooks</code> \u3092\u5b9f\u884c\uff08\u524a\u9664\u524d\u306e\u30d5\u30c3\u30af\u51e6\u7406\uff09\u3002</li> <li>\u4e3b\u30ad\u30fc\u306e\u5024\u3092\u53d6\u5f97\u3057\u3001\u524a\u9664\u7528\u306e SQL \u6587\u3092\u4f5c\u6210\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u53d6\u5f97\u3002</li> <li><code>doAfterDeleteHooks</code> \u3092\u5b9f\u884c\uff08\u524a\u9664\u5f8c\u306e\u30d5\u30c3\u30af\u51e6\u7406\uff09\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_155","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db\n\nseichy := &amp;Seichy{SeichiID: 1}\n\n// \u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\nrowsAffected, err := seichy.Delete(ctx, exec)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u524a\u9664\u3055\u308c\u305f\u884c\u6570: %d\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/point_logs.go/#deleteall_2","title":"<code>DeleteAll</code> \u95a2\u6570\uff08\u30af\u30a8\u30ea\u7528\uff09\u306e\u89e3\u8aac","text":"<pre><code>// DeleteAll \u306f\u30de\u30c3\u30c1\u3059\u308b\u5168\u3066\u306e\u884c\u3092\u524a\u9664\u3057\u307e\u3059\u3002\nfunc (q seichyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    if q.Query == nil {\n        return 0, errors.New(\"models: no seichyQuery provided for delete all\")\n    }\n\n    queries.SetDelete(q.Query)\n\n    result, err := q.Query.ExecContext(ctx, exec)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to delete all from seichies\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by deleteall for seichies\")\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_156","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: \u30af\u30a8\u30ea\u306b\u30de\u30c3\u30c1\u3059\u308b\u5168\u3066\u306e\u884c\u3092\u524a\u9664\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5b9f\u884c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30af\u30a8\u30ea\u304c <code>nil</code> \u3067\u306a\u3044\u304b\u78ba\u8a8d\u3002</li> <li><code>queries.SetDelete</code> \u3092\u4f7f\u7528\u3057\u3066\u524a\u9664\u30af\u30a8\u30ea\u3092\u8a2d\u5b9a\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u53d6\u5f97\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_157","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db\n\n// \u524a\u9664\u3057\u305f\u3044\u6761\u4ef6\u3092\u6307\u5b9a\uff08\u4f8b: \"status = 'inactive'\" \u306e\u884c\u3092\u5168\u3066\u524a\u9664\uff09\nq := Seichies(qm.Where(\"status=?\", \"inactive\"))\n\n// \u30de\u30c3\u30c1\u3059\u308b\u5168\u3066\u306e\u884c\u3092\u524a\u9664\nrowsAffected, err := q.DeleteAll(ctx, exec)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u524a\u9664\u3055\u308c\u305f\u884c\u6570: %d\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/point_logs.go/#deleteall_3","title":"<code>DeleteAll</code> \u30e1\u30bd\u30c3\u30c9\uff08\u30b9\u30e9\u30a4\u30b9\u7528\uff09\u306e\u89e3\u8aac","text":"<pre><code>// DeleteAll \u306f\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5168\u3066\u306e\u884c\u3092\u524a\u9664\u3057\u307e\u3059\u3002\nfunc (o SeichySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    if len(o) == 0 {\n        return 0, nil\n    }\n\n    if len(seichyBeforeDeleteHooks) != 0 {\n        for _, obj := range o {\n            if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {\n                return 0, err\n            }\n        }\n    }\n\n    var args []interface{}\n    for _, obj := range o {\n        pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seichyPrimaryKeyMapping)\n        args = append(args, pkeyArgs...)\n    }\n\n    sql := \"DELETE FROM `seichies` WHERE \" +\n        strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seichyPrimaryKeyColumns, len(o))\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, args)\n    }\n    result, err := exec.ExecContext(ctx, sql, args...)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to delete all from seichy slice\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by deleteall for seichies\")\n    }\n\n    if len(seichyAfterDeleteHooks) != 0 {\n        for _, obj := range o {\n            if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {\n                return 0, err\n            }\n        }\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_158","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: <code>Seichy</code> \u578b\u306e\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5168\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5b9f\u884c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30b9\u30e9\u30a4\u30b9\u304c\u7a7a\u306e\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3002</li> <li>\u524a\u9664\u524d\u306e\u30d5\u30c3\u30af\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3002</li> <li>\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u4e3b\u30ad\u30fc\u306e\u5024\u3092\u53ce\u96c6\u3002</li> <li>\u524a\u9664\u7528\u306e SQL \u6587\u3092\u4f5c\u6210\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u53d6\u5f97\u3002</li> <li>\u524a\u9664\u5f8c\u306e\u30d5\u30c3\u30af\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_159","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db\n\nseichySlice := SeichySlice{\n    &amp;Seichy{SeichiID: 1},\n    &amp;Seichy{SeichiID: 2},\n    &amp;Seichy{SeichiID: 3},\n}\n\n// \u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5168\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\nrowsAffected, err := seichySlice.DeleteAll(ctx, exec)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u524a\u9664\u3055\u308c\u305f\u884c\u6570: %d\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/point_logs.go/#_160","title":"\u88dc\u8db3","text":"<ul> <li>\u30d5\u30c3\u30af\u95a2\u6570: <code>doBeforeUpsertHooks</code>, <code>doAfterUpsertHooks</code>, <code>doBeforeDeleteHooks</code>, <code>doAfterDeleteHooks</code> \u306a\u3069\u306e\u30d5\u30c3\u30af\u95a2\u6570\u306f\u3001\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u3084\u524a\u9664\u306e\u524d\u5f8c\u306b\u7279\u5b9a\u306e\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u5b9f\u88c5\u306b\u3088\u3063\u3066\u306f\u3001\u30ed\u30b0\u8a18\u9332\u3084\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306a\u3069\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> <li>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f7f\u7528: <code>context.Context</code> \u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306b\u91cd\u8981\u3067\u3059\u3002\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u969b\u306b\u306f\u3001\u5e38\u306b\u9069\u5207\u306a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0: \u8fd4\u3055\u308c\u308b <code>error</code> \u3092\u5e38\u306b\u30c1\u30a7\u30c3\u30af\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u51e6\u7406\uff08\u30ed\u30b0\u51fa\u529b\u3001\u518d\u8a66\u884c\u3001\u30e6\u30fc\u30b6\u30fc\u3078\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u306a\u3069\uff09\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_161","title":"\u6ce8\u610f\u70b9","text":"<ul> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u64cd\u4f5c\u3092\u884c\u3046\u969b\u306b\u306f\u3001SQL \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306a\u3069\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\u3092\u9632\u3050\u305f\u3081\u3001\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u6b63\u3057\u304f\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001<code>*sql.Tx</code> \u3092\u4f7f\u7528\u3057\u3066\u64cd\u4f5c\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3001\u30b3\u30df\u30c3\u30c8\u307e\u305f\u306f\u30ed\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u9069\u5207\u306b\u7ba1\u7406\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#reload_1","title":"<code>Reload</code> \u95a2\u6570\u306e\u89e3\u8aac","text":"<pre><code>// Reload \u306f\u4e3b\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u518d\u53d6\u5f97\u3057\u307e\u3059\u3002\n// \u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nfunc (o *Seichy) Reload(ctx context.Context, exec boil.ContextExecutor) error {\n    // \u4e3b\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066\u6700\u65b0\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n    ret, err := FindSeichy(ctx, exec, o.SeichiID)\n    if err != nil {\n        return err\n    }\n\n    // \u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u73fe\u5728\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u4e0a\u66f8\u304d\n    *o = *ret\n    return nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_162","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: <code>Reload</code> \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u73fe\u5728\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e3b\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e\u60c5\u5831\u3092\u518d\u53d6\u5f97\u3057\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u7ba1\u7406\u306b\u4f7f\u7528\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u63a5\u7d9a\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li><code>FindSeichy</code> \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001<code>SeichiID</code> \u306b\u57fa\u3065\u304d\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3002</li> <li>\u53d6\u5f97\u304c\u6210\u529f\u3057\u305f\u5834\u5408\u3001\u73fe\u5728\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 <code>o</code> \u3092\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3067\u4e0a\u66f8\u304d\u3002</li> <li>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u3001\u305d\u306e\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002\u6210\u529f\u3057\u305f\u5834\u5408\u306f <code>nil</code>\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_163","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db // *sql.DB \u307e\u305f\u306f *sql.Tx\n\n// \u65e2\u5b58\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\nseichy := &amp;Seichy{SeichiID: 1}\n\n// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e\u60c5\u5831\u3092\u518d\u53d6\u5f97\nerr := seichy.Reload(ctx, exec)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u6700\u65b0\u306e\u30c7\u30fc\u30bf: %+v\\n\", seichy)\n</code></pre>"},{"location":"DB/model/point_logs.go/#reloadall_1","title":"<code>ReloadAll</code> \u95a2\u6570\u306e\u89e3\u8aac","text":"<pre><code>// ReloadAll \u306f\u4e3b\u30ad\u30fc\u304c\u4e00\u81f4\u3059\u308b\u3059\u3079\u3066\u306e\u884c\u3092\u518d\u53d6\u5f97\u3057\u3001\n// \u5143\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30b9\u30e9\u30a4\u30b9\u3092\u6700\u65b0\u306e\u30b9\u30e9\u30a4\u30b9\u3067\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\nfunc (o *SeichySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {\n    if o == nil || len(*o) == 0 {\n        return nil\n    }\n\n    slice := SeichySlice{}\n    var args []interface{}\n    for _, obj := range *o {\n        // \u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e3b\u30ad\u30fc\u3092\u53d6\u5f97\n        pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seichyPrimaryKeyMapping)\n        args = append(args, pkeyArgs...)\n    }\n\n    // \u4e3b\u30ad\u30fc\u306b\u57fa\u3065\u304d\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b SQL \u6587\u3092\u4f5c\u6210\n    sql := \"SELECT `seichies`.* FROM `seichies` WHERE \" +\n        strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, seichyPrimaryKeyColumns, len(*o))\n\n    q := queries.Raw(sql, args...)\n\n    // \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066\u7d50\u679c\u3092\u30b9\u30e9\u30a4\u30b9\u306b\u30d0\u30a4\u30f3\u30c9\n    err := q.Bind(ctx, exec, &amp;slice)\n    if err != nil {\n        return errors.Wrap(err, \"models: unable to reload all in SeichySlice\")\n    }\n\n    // \u5143\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u6700\u65b0\u306e\u30b9\u30e9\u30a4\u30b9\u3067\u4e0a\u66f8\u304d\n    *o = slice\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_164","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: <code>ReloadAll</code> \u30e1\u30bd\u30c3\u30c9\u306f\u3001<code>Seichy</code> \u578b\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u542b\u307e\u308c\u308b\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e3b\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e\u60c5\u5831\u3092\u518d\u53d6\u5f97\u3057\u3001\u30b9\u30e9\u30a4\u30b9\u5168\u4f53\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u63a5\u7d9a\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li>\u30b9\u30e9\u30a4\u30b9\u304c <code>nil</code> \u307e\u305f\u306f\u7a7a\u306e\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3002</li> <li>\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u4e3b\u30ad\u30fc\u306e\u5024\u3092\u53ce\u96c6\u3002</li> <li>\u4e3b\u30ad\u30fc\u306b\u57fa\u3065\u3044\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e SQL \u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u65b0\u3057\u3044\u30b9\u30e9\u30a4\u30b9\u306b\u30d0\u30a4\u30f3\u30c9\u3002</li> <li>\u5143\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u65b0\u3057\u3044\u30b9\u30e9\u30a4\u30b9\u3067\u4e0a\u66f8\u304d\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002\u6210\u529f\u3057\u305f\u5834\u5408\u306f <code>nil</code>\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_165","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db\n\n// \u65e2\u5b58\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\nseichySlice := SeichySlice{\n    &amp;Seichy{SeichiID: 1},\n    &amp;Seichy{SeichiID: 2},\n    &amp;Seichy{SeichiID: 3},\n}\n\n// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e\u60c5\u5831\u3092\u518d\u53d6\u5f97\nerr := seichySlice.ReloadAll(ctx, exec)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u6700\u65b0\u306e\u30c7\u30fc\u30bf\u30b9\u30e9\u30a4\u30b9: %+v\\n\", seichySlice)\n</code></pre>"},{"location":"DB/model/point_logs.go/#seichyexists","title":"<code>SeichyExists</code> \u95a2\u6570\u306e\u89e3\u8aac","text":"<pre><code>// SeichyExists \u306f\u6307\u5b9a\u3055\u308c\u305f SeichiID \u306e Seichy \u884c\u304c\u5b58\u5728\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\nfunc SeichyExists(ctx context.Context, exec boil.ContextExecutor, seichiID int) (bool, error) {\n    var exists bool\n    sql := \"select exists(select 1 from `seichies` where `seichi_id`=? limit 1)\"\n\n    // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u5834\u5408\u3001\u30af\u30a8\u30ea\u3092\u51fa\u529b\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, seichiID)\n    }\n    row := exec.QueryRowContext(ctx, sql, seichiID)\n\n    // \u7d50\u679c\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u5b58\u5728\u30d5\u30e9\u30b0\u3092\u53d6\u5f97\n    err := row.Scan(&amp;exists)\n    if err != nil {\n        return false, errors.Wrap(err, \"models: unable to check if seichies exists\")\n    }\n\n    return exists, nil\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_166","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: \u6307\u5b9a\u3057\u305f <code>SeichiID</code> \u306e\u30ec\u30b3\u30fc\u30c9\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u63a5\u7d9a\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002</li> <li><code>seichiID int</code>: \u5b58\u5728\u3092\u30c1\u30a7\u30c3\u30af\u3057\u305f\u3044 <code>SeichiID</code>\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li><code>EXISTS</code> \u3092\u4f7f\u7528\u3057\u305f SQL \u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u6307\u5b9a\u3057\u305f <code>SeichiID</code> \u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092 <code>exists</code> \u5909\u6570\u306b\u30b9\u30ad\u30e3\u30f3\u3002</li> <li>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3002</li> <li>\u5b58\u5728\u3059\u308b\u5834\u5408\u306f <code>true</code>\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f <code>false</code> \u3092\u8fd4\u3059\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>bool</code>: \u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002\u6210\u529f\u3057\u305f\u5834\u5408\u306f <code>nil</code>\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_167","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db\n\nseichiID := 1\n\n// \u6307\u5b9a\u3057\u305f SeichiID \u304c\u5b58\u5728\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\nexists, err := SeichyExists(ctx, exec, seichiID)\nif err != nil {\n    log.Fatal(err)\n}\n\nif exists {\n    fmt.Printf(\"SeichiID %d \u306f\u5b58\u5728\u3057\u307e\u3059\u3002\\n\", seichiID)\n} else {\n    fmt.Printf(\"SeichiID %d \u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\\n\", seichiID)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#exists_3","title":"<code>Exists</code> \u30e1\u30bd\u30c3\u30c9\u306e\u89e3\u8aac","text":"<pre><code>// Exists \u306f\u73fe\u5728\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u884c\u304c\u5b58\u5728\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\nfunc (o *Seichy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {\n    return SeichyExists(ctx, exec, o.SeichiID)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_168","title":"\u8a73\u7d30\u306a\u8aac\u660e","text":"<ul> <li>\u76ee\u7684: \u73fe\u5728\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u63a5\u7d9a\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002</li> <li>\u51e6\u7406\u306e\u6d41\u308c:</li> <li><code>SeichyExists</code> \u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3001\u73fe\u5728\u306e <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e <code>SeichiID</code> \u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3002</li> <li>\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>bool</code>: \u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002\u6210\u529f\u3057\u305f\u5834\u5408\u306f <code>nil</code>\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_169","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\nexec := db\n\n// \u65e2\u5b58\u306e Seichy \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\nseichy := &amp;Seichy{SeichiID: 1}\n\n// \u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\nexists, err := seichy.Exists(ctx, exec)\nif err != nil {\n    log.Fatal(err)\n}\n\nif exists {\n    fmt.Printf(\"SeichiID %d \u306f\u5b58\u5728\u3057\u307e\u3059\u3002\\n\", seichy.SeichiID)\n} else {\n    fmt.Printf(\"SeichiID %d \u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\\n\", seichy.SeichiID)\n}\n</code></pre>"},{"location":"DB/model/point_logs.go/#_170","title":"\u88dc\u8db3","text":"<ul> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u5404\u95a2\u6570\u306e\u623b\u308a\u5024\u306e <code>error</code> \u3092\u9069\u5207\u306b\u30c1\u30a7\u30c3\u30af\u3057\u3001\u5fc5\u8981\u306a\u5bfe\u51e6\uff08\u30ed\u30b0\u306e\u8a18\u9332\u3001\u30e6\u30fc\u30b6\u30fc\u3078\u306e\u901a\u77e5\u3001\u30ea\u30c8\u30e9\u30a4\u306a\u3069\uff09\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u91cd\u8981\u6027: <code>context.Context</code> \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u6642\u306b\u306f\u3001\u5e38\u306b\u9069\u5207\u306a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u6e21\u3059\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002</li> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9: <code>boil.IsDebug(ctx)</code> \u3092\u4f7f\u7528\u3057\u3066\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3092\u5224\u5b9a\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066 SQL \u30af\u30a8\u30ea\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ed\u30b0\u306b\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\u30c7\u30d0\u30c3\u30b0\u6642\u306b\u306e\u307f\u8a73\u7d30\u306a\u60c5\u5831\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u3067\u3001\u672c\u756a\u74b0\u5883\u3067\u306e\u4f59\u5206\u306a\u30ed\u30b0\u51fa\u529b\u3092\u9632\u304e\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/point_logs.go/#_171","title":"\u6ce8\u610f\u70b9","text":"<ul> <li>\u30c7\u30fc\u30bf\u6574\u5408\u6027: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u305f\u6700\u65b0\u306e\u60c5\u5831\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4e0a\u66f8\u304d\u3059\u308b\u969b\u3001\u4ed6\u306e\u30b4\u30eb\u30fc\u30c1\u30f3\u3084\u30d7\u30ed\u30bb\u30b9\u3067\u306e\u5909\u66f4\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7279\u306b\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u74b0\u5883\u3067\u306f\u9069\u5207\u306a\u540c\u671f\u304c\u5fc5\u8981\u3068\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002</li> <li>SQL \u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u5bfe\u7b56: \u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\uff08<code>?</code>\uff09\u3068\u5f15\u6570\u3092\u9069\u5207\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u624b\u52d5\u3067 SQL \u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u308b\u969b\u306b\u306f\u7279\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u5165\u529b\u3092\u76f4\u63a5\u30af\u30a8\u30ea\u306b\u542b\u3081\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u4f7f\u7528: \u4e00\u9023\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u304c\u539f\u5b50\u7684\u306b\u884c\u308f\u308c\u308b\u3079\u304d\u5834\u5408\u3001<code>*sql.Tx</code> \u3092\u4f7f\u7528\u3057\u3066\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul>"},{"location":"DB/model/points.go/","title":"Point\u30e2\u30c7\u30eb\u306e\u8a73\u7d30\u89e3\u8aac\u3068\u5229\u7528\u4f8b","text":""},{"location":"DB/model/points.go/#_1","title":"\u30b3\u30fc\u30c9\u306e\u6982\u8981","text":"<p>\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001SQLBoiler\u306b\u3088\u3063\u3066\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f<code>Point</code>\u30e2\u30c7\u30eb\u306b\u95a2\u3059\u308b\u3082\u306e\u3067\u3059\u3002<code>Point</code>\u30e2\u30c7\u30eb\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5185\u306e<code>points</code>\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u73fe\u3057\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30dd\u30a4\u30f3\u30c8\u60c5\u5831\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\u3053\u306e\u30e2\u30c7\u30eb\u306b\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u3055\u307e\u3056\u307e\u306a\u30e1\u30bd\u30c3\u30c9\u3084\u95a2\u6570\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#point_1","title":"<code>Point</code>\u69cb\u9020\u4f53\u306e\u89e3\u8aac","text":""},{"location":"DB/model/points.go/#_2","title":"\u69cb\u9020\u4f53\u306e\u5b9a\u7fa9","text":"<pre><code>type Point struct {\n    UserID       uint      `boil:\"user_id\" json:\"user_id\" toml:\"user_id\" yaml:\"user_id\"`\n    CurrentPoint int       `boil:\"current_point\" json:\"current_point\" toml:\"current_point\" yaml:\"current_point\"`\n    CreatedAt    time.Time `boil:\"created_at\" json:\"created_at\" toml:\"created_at\" yaml:\"created_at\"`\n    UpdatedAt    time.Time `boil:\"updated_at\" json:\"updated_at\" toml:\"updated_at\" yaml:\"updated_at\"`\n\n    R *pointR `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n    L pointL  `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n}\n</code></pre> <ul> <li>\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u8aac\u660e:</li> <li><code>UserID</code>: \u30e6\u30fc\u30b6\u30fc\u306e\u8b58\u5225\u5b50\u3002<code>users</code>\u30c6\u30fc\u30d6\u30eb\u306e\u5916\u90e8\u30ad\u30fc\u3002</li> <li><code>CurrentPoint</code>: \u73fe\u5728\u306e\u30dd\u30a4\u30f3\u30c8\u6570\u3002</li> <li><code>CreatedAt</code>: \u30ec\u30b3\u30fc\u30c9\u306e\u4f5c\u6210\u65e5\u6642\u3002</li> <li> <p><code>UpdatedAt</code>: \u30ec\u30b3\u30fc\u30c9\u306e\u66f4\u65b0\u65e5\u6642\u3002</p> </li> <li> <p>\u30bf\u30b0:</p> </li> <li><code>boil</code>\u30bf\u30b0\u306f\u3001SQLBoiler\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li> <p><code>json</code>\u3001<code>toml</code>\u3001<code>yaml</code>\u30bf\u30b0\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u30d5\u30a3\u30fc\u30eb\u30c9:</p> </li> <li><code>R *pointR</code>: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3002\u95a2\u9023\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li><code>L pointL</code>: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_3","title":"\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570","text":"<pre><code>var PointColumns = struct {\n    UserID       string\n    CurrentPoint string\n    CreatedAt    string\n    UpdatedAt    string\n}{\n    UserID:       \"user_id\",\n    CurrentPoint: \"current_point\",\n    CreatedAt:    \"created_at\",\n    UpdatedAt:    \"updated_at\",\n}\n\nvar PointTableColumns = struct {\n    UserID       string\n    CurrentPoint string\n    CreatedAt    string\n    UpdatedAt    string\n}{\n    UserID:       \"points.user_id\",\n    CurrentPoint: \"points.current_point\",\n    CreatedAt:    \"points.created_at\",\n    UpdatedAt:    \"points.updated_at\",\n}\n</code></pre> <ul> <li><code>PointColumns</code>: \u30c6\u30fc\u30d6\u30eb\u5185\u306e\u5404\u30ab\u30e9\u30e0\u540d\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</li> <li><code>PointTableColumns</code>: \u30c6\u30fc\u30d6\u30eb\u540d\u3092\u542b\u3081\u305f\u30ab\u30e9\u30e0\u540d\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</li> </ul> <p>\u3053\u308c\u3089\u306e\u5909\u6570\u306f\u3001\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u4fbf\u5229\u3067\u3059\u3002</p>"},{"location":"DB/model/points.go/#pointrpointl","title":"<code>pointR</code>\u3068<code>pointL</code>\u69cb\u9020\u4f53","text":""},{"location":"DB/model/points.go/#_4","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u69cb\u9020\u4f53","text":"<pre><code>type pointR struct {\n    User *User `boil:\"User\" json:\"User\" toml:\"User\" yaml:\"User\"`\n}\n</code></pre> <ul> <li><code>pointR</code>\u306f\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u69cb\u9020\u4f53\u3067\u3059\u3002</li> <li><code>User *User</code>: <code>Point</code>\u304c\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u53c2\u7167\u3002</li> </ul>"},{"location":"DB/model/points.go/#_5","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>type pointL struct{}\n</code></pre> <ul> <li><code>pointL</code>\u306f\u3001\u95a2\u9023\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_6","title":"\u30ab\u30e9\u30e0\u30ea\u30b9\u30c8\u3068\u4e3b\u30ad\u30fc","text":"<pre><code>var (\n    pointAllColumns            = []string{\"user_id\", \"current_point\", \"created_at\", \"updated_at\"}\n    pointColumnsWithoutDefault = []string{\"user_id\", \"current_point\"}\n    pointColumnsWithDefault    = []string{\"created_at\", \"updated_at\"}\n    pointPrimaryKeyColumns     = []string{\"user_id\"}\n    pointGeneratedColumns      = []string{}\n)\n</code></pre> <ul> <li><code>pointAllColumns</code>: \u30c6\u30fc\u30d6\u30eb\u306e\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u540d\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>pointColumnsWithoutDefault</code>: \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u305f\u306a\u3044\u30ab\u30e9\u30e0\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>pointColumnsWithDefault</code>: \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u30ab\u30e9\u30e0\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>pointPrimaryKeyColumns</code>: \u4e3b\u30ad\u30fc\u3068\u306a\u308b\u30ab\u30e9\u30e0\u540d\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>pointGeneratedColumns</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u3088\u3063\u3066\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u30ab\u30e9\u30e0\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> </ul> <p>\u3053\u308c\u3089\u306e\u5909\u6570\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u6642\u306b\u30ab\u30e9\u30e0\u3092\u52d5\u7684\u306b\u6307\u5b9a\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#hooks","title":"\u30d5\u30c3\u30af\uff08Hooks\uff09\u306e\u89e3\u8aac","text":"<p>\u30d5\u30c3\u30af\u306f\u3001\u7279\u5b9a\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306e\u524d\u5f8c\u306b\u30ab\u30b9\u30bf\u30e0\u30ed\u30b8\u30c3\u30af\u3092\u633f\u5165\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#_7","title":"\u30d5\u30c3\u30af\u306e\u7a2e\u985e","text":"<ul> <li>After Select Hook: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u305f\u5f8c\u306b\u5b9f\u884c\u3002</li> <li>Before Insert Hook: \u30ec\u30b3\u30fc\u30c9\u3092\u633f\u5165\u3059\u308b\u524d\u306b\u5b9f\u884c\u3002</li> <li>After Insert Hook: \u30ec\u30b3\u30fc\u30c9\u3092\u633f\u5165\u3057\u305f\u5f8c\u306b\u5b9f\u884c\u3002</li> <li>Before Update Hook: \u30ec\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\u3059\u308b\u524d\u306b\u5b9f\u884c\u3002</li> <li>After Update Hook: \u30ec\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\u3057\u305f\u5f8c\u306b\u5b9f\u884c\u3002</li> <li>Before Delete Hook: \u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3059\u308b\u524d\u306b\u5b9f\u884c\u3002</li> <li>After Delete Hook: \u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u305f\u5f8c\u306b\u5b9f\u884c\u3002</li> <li>Before Upsert Hook: \u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u64cd\u4f5c\u306e\u524d\u306b\u5b9f\u884c\u3002</li> <li>After Upsert Hook: \u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u64cd\u4f5c\u306e\u5f8c\u306b\u5b9f\u884c\u3002</li> </ul>"},{"location":"DB/model/points.go/#_8","title":"\u30d5\u30c3\u30af\u306e\u5b9a\u7fa9\u3068\u5b9f\u884c","text":""},{"location":"DB/model/points.go/#_9","title":"\u30d5\u30c3\u30af\u95a2\u6570\u306e\u578b","text":"<pre><code>type PointHook func(context.Context, boil.ContextExecutor, *Point) error\n</code></pre> <ul> <li>\u30d5\u30c3\u30af\u95a2\u6570\u306f\u3001\u3053\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306b\u5f93\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_10","title":"\u30d5\u30c3\u30af\u306e\u767b\u9332","text":"<pre><code>func AddPointHook(hookPoint boil.HookPoint, pointHook PointHook) {\n    switch hookPoint {\n    case boil.AfterSelectHook:\n        pointAfterSelectMu.Lock()\n        pointAfterSelectHooks = append(pointAfterSelectHooks, pointHook)\n        pointAfterSelectMu.Unlock()\n    // \u305d\u306e\u4ed6\u306e\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\n    }\n}\n</code></pre> <ul> <li><code>AddPointHook</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u7279\u5b9a\u306e\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u30d5\u30c3\u30af\u95a2\u6570\u3092\u767b\u9332\u3067\u304d\u307e\u3059\u3002</li> <li>\u30d5\u30c3\u30af\u306f\u30b9\u30e9\u30a4\u30b9\u306b\u8ffd\u52a0\u3055\u308c\u3001\u8a72\u5f53\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u6642\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_11","title":"\u30d5\u30c3\u30af\u306e\u5b9f\u884c","text":"<pre><code>func (o *Point) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {\n    if boil.HooksAreSkipped(ctx) {\n        return nil\n    }\n\n    for _, hook := range pointAfterSelectHooks {\n        if err := hook(ctx, exec, o); err != nil {\n            return err\n        }\n    }\n\n    return nil\n}\n</code></pre> <ul> <li>\u5404\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u5bfe\u5fdc\u3059\u308b<code>doXxxHooks</code>\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002</li> <li>\u30d5\u30c3\u30af\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u305d\u308c\u3089\u3092\u9806\u756a\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002</li> <li>\u30d5\u30c3\u30af\u5185\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_12","title":"\u5229\u7528\u4f8b","text":""},{"location":"DB/model/points.go/#_13","title":"\u30d5\u30c3\u30af\u95a2\u6570\u306e\u5b9f\u88c5\u3068\u767b\u9332","text":"<pre><code>// \u30dd\u30a4\u30f3\u30c8\u304c\u633f\u5165\u3055\u308c\u308b\u524d\u306b\u30dd\u30a4\u30f3\u30c8\u6570\u3092\u691c\u8a3c\u3059\u308b\u30d5\u30c3\u30af\nfunc validatePointBeforeInsert(ctx context.Context, exec boil.ContextExecutor, p *Point) error {\n    if p.CurrentPoint &lt; 0 {\n        return errors.New(\"\u30dd\u30a4\u30f3\u30c8\u6570\u306f0\u4ee5\u4e0a\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\")\n    }\n    return nil\n}\n\nfunc main() {\n    // \u30d5\u30c3\u30af\u3092\u767b\u9332\n    AddPointHook(boil.BeforeInsertHook, validatePointBeforeInsert)\n\n    // \u4ee5\u964d\u3001\u30dd\u30a4\u30f3\u30c8\u306e\u633f\u5165\u6642\u306b\u3053\u306e\u30d5\u30c3\u30af\u304c\u9069\u7528\u3055\u308c\u307e\u3059\n}\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u30dd\u30a4\u30f3\u30c8\u304c\u8ca0\u306e\u5024\u3067\u306a\u3044\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\u3001\u633f\u5165\u524d\u306b\u691c\u8a3c\u3092\u884c\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#_14","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306e\u30e1\u30bd\u30c3\u30c9","text":"<p><code>Point</code>\u30e2\u30c7\u30eb\u306b\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u884c\u3046\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u4e00\u822c\u7684\u306a\u64cd\u4f5c\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#insert","title":"<code>Insert</code>\u30e1\u30bd\u30c3\u30c9","text":""},{"location":"DB/model/points.go/#_15","title":"\u6982\u8981","text":"<p><code>Insert</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u65b0\u3057\u3044<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#_16","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *Point) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n</code></pre> <ul> <li><code>ctx</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li><code>columns</code>: \u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3002</li> </ul>"},{"location":"DB/model/points.go/#_17","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li><code>BeforeInsert</code>\u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> <li> <p>\u767b\u9332\u3055\u308c\u3066\u3044\u308b<code>BeforeInsert</code>\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u8a2d\u5b9a:</p> </li> <li> <p><code>CreatedAt</code>\u3068<code>UpdatedAt</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u73fe\u5728\u306e\u6642\u523b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u633f\u5165\u30af\u30a8\u30ea\u306e\u4f5c\u6210:</p> </li> <li> <p>\u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3068\u5024\u3092\u6c7a\u5b9a\u3057\u3001\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</p> </li> <li> <p>\u69cb\u7bc9\u3057\u305f\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u30ec\u30b3\u30fc\u30c9\u3092\u633f\u5165\u3057\u307e\u3059\u3002</p> </li> <li> <p><code>AfterInsert</code>\u30d5\u30c3\u30af\u306e\u5b9f\u884c:</p> </li> <li>\u767b\u9332\u3055\u308c\u3066\u3044\u308b<code>AfterInsert</code>\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/points.go/#_18","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\npoint := &amp;Point{\n    UserID:       1,\n    CurrentPoint: 100,\n}\n\nerr = point.Insert(ctx, db, boil.Infer())\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u304c\u633f\u5165\u3055\u308c\u307e\u3057\u305f\u3002\")\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u65b0\u3057\u3044\u30dd\u30a4\u30f3\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#update","title":"<code>Update</code>\u30e1\u30bd\u30c3\u30c9","text":""},{"location":"DB/model/points.go/#_19","title":"\u6982\u8981","text":"<p><code>Update</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u65e2\u5b58\u306e<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#_20","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *Point) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n</code></pre> <ul> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/points.go/#_21","title":"\u5229\u7528\u4f8b","text":"<pre><code>point.CurrentPoint += 50\n\nrowsAffected, err := point.Update(ctx, db, boil.Whitelist(\"current_point\"))\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"%d \u884c\u306e\u30dd\u30a4\u30f3\u30c8\u304c\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\u3002\\n\", rowsAffected)\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>current_point</code>\u30ab\u30e9\u30e0\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#delete","title":"<code>Delete</code>\u30e1\u30bd\u30c3\u30c9","text":""},{"location":"DB/model/points.go/#_22","title":"\u6982\u8981","text":"<p><code>Delete</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#_23","title":"\u5229\u7528\u4f8b","text":"<pre><code>rowsAffected, err := point.Delete(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"%d \u884c\u306e\u30dd\u30a4\u30f3\u30c8\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/points.go/#_24","title":"\u30af\u30a8\u30ea\u306e\u4f5c\u6210\u3068\u5b9f\u884c","text":""},{"location":"DB/model/points.go/#_25","title":"\u30dd\u30a4\u30f3\u30c8\u306e\u53d6\u5f97","text":""},{"location":"DB/model/points.go/#_26","title":"\u5358\u4e00\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97","text":"<pre><code>point, err := FindPoint(ctx, db, 1) // UserID\u304c1\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\nif err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        fmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u304c\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\")\n    } else {\n        log.Fatal(err)\n    }\n} else {\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fcID: %d \u306e\u30dd\u30a4\u30f3\u30c8: %d\\n\", point.UserID, point.CurrentPoint)\n}\n</code></pre>"},{"location":"DB/model/points.go/#_27","title":"\u30dd\u30a4\u30f3\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97","text":"<pre><code>points, err := Points(\n    qm.Where(\"current_point &gt; ?\", 50),\n    qm.OrderBy(\"current_point DESC\"),\n).All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfor _, p := range points {\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fcID: %d \u306e\u30dd\u30a4\u30f3\u30c8: %d\\n\", p.UserID, p.CurrentPoint)\n}\n</code></pre>"},{"location":"DB/model/points.go/#_28","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9","text":"<p><code>Point</code>\u30e2\u30c7\u30eb\u3068<code>User</code>\u30e2\u30c7\u30eb\u306f\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002<code>Point</code>\u304b\u3089\u95a2\u9023\u3059\u308b<code>User</code>\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"DB/model/points.go/#_29","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9\u65b9\u6cd5","text":"<pre><code>err = point.L.LoadUser(ctx, db, true, point)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u30dd\u30a4\u30f3\u30c8\u6240\u6709\u8005\u306e\u540d\u524d: %s\\n\", point.R.User.Name)\n</code></pre> <ul> <li><code>LoadUser</code>\u30e1\u30bd\u30c3\u30c9: <code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002</li> <li>\u30ed\u30fc\u30c9\u5f8c\u3001<code>point.R.User</code>\u3092\u901a\u3058\u3066\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002</li> </ul> <p>\u4ee5\u4e0b\u3067\u306f\u3001\u63d0\u4f9b\u3055\u308c\u305fGo\u8a00\u8a9e\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u3001\u3059\u3079\u3066\u306e\u30b3\u30fc\u30c9\u90e8\u5206\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u958b\u767a\u8005\u5411\u3051\u306b\u5229\u7528\u4f8b\u3082\u8a73\u7d30\u306a\u30b3\u30fc\u30c9\u4f8b\u3068\u3057\u3066\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#point_2","title":"Point\u69cb\u9020\u4f53\u306e\u5358\u4e00\u30ec\u30b3\u30fc\u30c9\u53d6\u5f97\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// One returns a single point record from the query.\nfunc (q pointQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Point, error) {\n    o := &amp;Point{}\n\n    queries.SetLimit(q.Query, 1)\n\n    err := q.Bind(ctx, exec, o)\n    if err != nil {\n        if errors.Is(err, sql.ErrNoRows) {\n            return nil, sql.ErrNoRows\n        }\n        return nil, errors.Wrap(err, \"models: failed to execute a one query for points\")\n    }\n\n    if err := o.doAfterSelectHooks(ctx, exec); err != nil {\n        return o, err\n    }\n\n    return o, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_30","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: \u30af\u30a8\u30ea\u304b\u3089\u5358\u4e00\u306e<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li> <p><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li>\u65b0\u3057\u3044<code>Point</code>\u69cb\u9020\u4f53\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9<code>o</code>\u3092\u4f5c\u6210\u3002      <pre><code>o := &amp;Point{}\n</code></pre></li> <li>\u30af\u30a8\u30ea\u306e\u30ea\u30df\u30c3\u30c8\u30921\u306b\u8a2d\u5b9a\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30af\u30a8\u30ea\u304c\u6700\u59271\u4ef6\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002      <pre><code>queries.SetLimit(q.Query, 1)\n</code></pre></li> <li>\u30af\u30a8\u30ea\u7d50\u679c\u3092<code>o</code>\u306b\u30d0\u30a4\u30f3\u30c9\uff08\u30c7\u30fc\u30bf\u3092\u30de\u30c3\u30d4\u30f3\u30b0\uff09\u3057\u307e\u3059\u3002      <pre><code>err := q.Bind(ctx, exec, o)\n</code></pre></li> <li>\u30a8\u30e9\u30fc\u51e6\u7406:<ul> <li>\u30ec\u30b3\u30fc\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\uff08<code>sql.ErrNoRows</code>\uff09\u3001<code>nil</code>\u3068<code>sql.ErrNoRows</code>\u3092\u8fd4\u3059\u3002</li> <li>\u305d\u306e\u4ed6\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3059\u3002</li> </ul> </li> <li><code>o</code>\u306b\u30a2\u30d5\u30bf\u30fc\u30bb\u30ec\u30af\u30c8\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\u3002\u3053\u308c\u306f\u3001\u30c7\u30fc\u30bf\u53d6\u5f97\u5f8c\u306e\u8ffd\u52a0\u51e6\u7406\u304c\u3042\u308b\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002      <pre><code>if err := o.doAfterSelectHooks(ctx, exec); err != nil {\n    return o, err\n}\n</code></pre></li> <li>\u6700\u7d42\u7684\u306b\u7d50\u679c\u306e<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8<code>o</code>\u3092\u8fd4\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_31","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\npointQuery := Points(qm.Where(\"id = ?\", 1))\npoint, err := pointQuery.One(ctx, db)\nif err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        fmt.Println(\"\u30ec\u30b3\u30fc\u30c9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\")\n    } else {\n        log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n    }\n} else {\n    fmt.Printf(\"\u53d6\u5f97\u3057\u305f\u30dd\u30a4\u30f3\u30c8: %+v\\n\", point)\n}\n</code></pre>"},{"location":"DB/model/points.go/#point_3","title":"Point\u69cb\u9020\u4f53\u306e\u5168\u30ec\u30b3\u30fc\u30c9\u53d6\u5f97\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// All returns all Point records from the query.\nfunc (q pointQuery) All(ctx context.Context, exec boil.ContextExecutor) (PointSlice, error) {\n    var o []*Point\n\n    err := q.Bind(ctx, exec, &amp;o)\n    if err != nil {\n        return nil, errors.Wrap(err, \"models: failed to assign all query results to Point slice\")\n    }\n\n    if len(pointAfterSelectHooks) != 0 {\n        for _, obj := range o {\n            if err := obj.doAfterSelectHooks(ctx, exec); err != nil {\n                return o, err\n            }\n        }\n    }\n\n    return o, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_32","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: \u30af\u30a8\u30ea\u304b\u3089\u3059\u3079\u3066\u306e<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li> <p><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li><code>Point</code>\u69cb\u9020\u4f53\u306e\u30b9\u30e9\u30a4\u30b9<code>o</code>\u3092\u5b9a\u7fa9\u3002      <pre><code>var o []*Point\n</code></pre></li> <li>\u30af\u30a8\u30ea\u7d50\u679c\u3092<code>o</code>\u306b\u30d0\u30a4\u30f3\u30c9\uff08\u30c7\u30fc\u30bf\u3092\u30de\u30c3\u30d4\u30f3\u30b0\uff09\u3057\u307e\u3059\u3002      <pre><code>err := q.Bind(ctx, exec, &amp;o)\n</code></pre></li> <li>\u30a8\u30e9\u30fc\u51e6\u7406:<ul> <li>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3059\u3002</li> </ul> </li> <li>\u30a2\u30d5\u30bf\u30fc\u30bb\u30ec\u30af\u30c8\u30d5\u30c3\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5404<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\u3002</li> <li>\u6700\u7d42\u7684\u306b<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9<code>o</code>\u3092\u8fd4\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_33","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\npointQuery := Points()\npoints, err := pointQuery.All(ctx, db)\nif err != nil {\n    log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n}\n\nfor _, point := range points {\n    fmt.Printf(\"\u30dd\u30a4\u30f3\u30c8: %+v\\n\", point)\n}\n</code></pre>"},{"location":"DB/model/points.go/#point_4","title":"Point\u30ec\u30b3\u30fc\u30c9\u306e\u30ab\u30a6\u30f3\u30c8\u53d6\u5f97\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// Count returns the count of all Point records in the query.\nfunc (q pointQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    var count int64\n\n    queries.SetSelect(q.Query, nil)\n    queries.SetCount(q.Query)\n\n    err := q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to count points rows\")\n    }\n\n    return count, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_34","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: \u30af\u30a8\u30ea\u306b\u30de\u30c3\u30c1\u3059\u308b<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u306e\u7dcf\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li> <p><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li>\u30ab\u30a6\u30f3\u30c8\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570<code>count</code>\u3092\u5ba3\u8a00\u3002      <pre><code>var count int64\n</code></pre></li> <li>\u30af\u30a8\u30ea\u306eSELECT\u53e5\u3092\u30af\u30ea\u30a2\u3057\u3001COUNT\u53e5\u3092\u8a2d\u5b9a\u3002      <pre><code>queries.SetSelect(q.Query, nil)\nqueries.SetCount(q.Query)\n</code></pre></li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092<code>count</code>\u306b\u30b9\u30ad\u30e3\u30f3\u3002      <pre><code>err := q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)\n</code></pre></li> <li>\u30a8\u30e9\u30fc\u51e6\u7406:<ul> <li>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3059\u3002</li> </ul> </li> <li>\u30ab\u30a6\u30f3\u30c8\u7d50\u679c<code>count</code>\u3092\u8fd4\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_35","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\npointQuery := Points()\ncount, err := pointQuery.Count(ctx, db)\nif err != nil {\n    log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n}\n\nfmt.Printf(\"\u30dd\u30a4\u30f3\u30c8\u306e\u7dcf\u6570: %d\\n\", count)\n</code></pre>"},{"location":"DB/model/points.go/#point_5","title":"Point\u30ec\u30b3\u30fc\u30c9\u306e\u5b58\u5728\u78ba\u8a8d\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// Exists checks if the row exists in the table.\nfunc (q pointQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {\n    var count int64\n\n    queries.SetSelect(q.Query, nil)\n    queries.SetCount(q.Query)\n    queries.SetLimit(q.Query, 1)\n\n    err := q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)\n    if err != nil {\n        return false, errors.Wrap(err, \"models: failed to check if points exists\")\n    }\n\n    return count &gt; 0, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_36","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: \u30af\u30a8\u30ea\u306b\u30de\u30c3\u30c1\u3059\u308b<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li> <p><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li>\u30ab\u30a6\u30f3\u30c8\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570<code>count</code>\u3092\u5ba3\u8a00\u3002      <pre><code>var count int64\n</code></pre></li> <li>\u30af\u30a8\u30ea\u306eSELECT\u53e5\u3092\u30af\u30ea\u30a2\u3057\u3001COUNT\u53e5\u3092\u8a2d\u5b9a\u3057\u3001\u30ea\u30df\u30c3\u30c8\u30921\u306b\u8a2d\u5b9a\u3002      <pre><code>queries.SetSelect(q.Query, nil)\nqueries.SetCount(q.Query)\nqueries.SetLimit(q.Query, 1)\n</code></pre></li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092<code>count</code>\u306b\u30b9\u30ad\u30e3\u30f3\u3002</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406:<ul> <li>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001<code>false</code>\u3068\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3059\u3002</li> </ul> </li> <li><code>count</code>\u304c0\u3088\u308a\u5927\u304d\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u5b58\u5728\u3059\u308b\u5834\u5408\u306f<code>true</code>\u3092\u8fd4\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_37","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\npointQuery := Points(qm.Where(\"id = ?\", 1))\nexists, err := pointQuery.Exists(ctx, db)\nif err != nil {\n    log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n}\n\nif exists {\n    fmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u30ec\u30b3\u30fc\u30c9\u306f\u5b58\u5728\u3057\u307e\u3059\")\n} else {\n    fmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u30ec\u30b3\u30fc\u30c9\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\")\n}\n</code></pre>"},{"location":"DB/model/points.go/#user","title":"\u5916\u90e8\u30ad\u30fc\u306b\u3088\u308bUser\u306e\u53d6\u5f97","text":"<pre><code>// User pointed to by the foreign key.\nfunc (o *Point) User(mods ...qm.QueryMod) userQuery {\n    queryMods := []qm.QueryMod{\n        qm.Where(\"`user_id` = ?\", o.UserID),\n    }\n\n    queryMods = append(queryMods, mods...)\n\n    return Users(queryMods...)\n}\n</code></pre>"},{"location":"DB/model/points.go/#_38","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: <code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b<code>User</code>\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u751f\u6210\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li> <p><code>mods ...qm.QueryMod</code>: \u30af\u30a8\u30ea\u4fee\u98fe\u5b50\u3002\u8ffd\u52a0\u306e\u30af\u30a8\u30ea\u6761\u4ef6\u3092\u4ed8\u52a0\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li><code>Point</code>\u306e<code>UserID</code>\u3092\u6761\u4ef6\u306b\u3057\u305f\u30af\u30a8\u30ea\u4fee\u98fe\u5b50\u3092\u4f5c\u6210\u3002      <pre><code>queryMods := []qm.QueryMod{\n    qm.Where(\"`user_id` = ?\", o.UserID),\n}\n</code></pre></li> <li>\u8ffd\u52a0\u306e\u30af\u30a8\u30ea\u4fee\u98fe\u5b50\u304c\u6e21\u3055\u308c\u305f\u5834\u5408\u3001\u305d\u308c\u3089\u3092<code>queryMods</code>\u306b\u8ffd\u52a0\u3002      <pre><code>queryMods = append(queryMods, mods...)\n</code></pre></li> <li><code>Users</code>\u30af\u30a8\u30ea\u3092\u751f\u6210\u3057\u3066\u8fd4\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_39","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\npointQuery := Points(qm.Where(\"id = ?\", 1))\npoint, err := pointQuery.One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u95a2\u9023\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\nuserQuery := point.User()\nuser, err := userQuery.One(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u30dd\u30a4\u30f3\u30c8\u306e\u6240\u6709\u8005\u30e6\u30fc\u30b6\u30fc: %+v\\n\", user)\n</code></pre>"},{"location":"DB/model/points.go/#n-1user","title":"N-1\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9\uff08User\u306e\u30ed\u30fc\u30c9\uff09","text":"<pre><code>// LoadUser allows an eager lookup of values, cached into the\n// loaded structs of the objects. This is for an N-1 relationship.\nfunc (pointL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybePoint interface{}, mods queries.Applicator) error {\n    // \u3053\u3053\u304b\u3089\u7701\u7565\uff08\u8a73\u7d30\u306f\u5f8c\u8ff0\uff09\n}\n</code></pre>"},{"location":"DB/model/points.go/#_40","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: <code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b<code>User</code>\u3092\u4e00\u62ec\u3067\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002N\u5bfe1\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306b\u304a\u3051\u308b\u95a2\u9023\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li><code>e boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li><code>singular bool</code>: \u5358\u4e00\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u30d5\u30e9\u30b0\u3002</li> <li><code>maybePoint interface{}</code>: <code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li> <p><code>mods queries.Applicator</code>: \u30af\u30a8\u30ea\u4fee\u98fe\u5b50\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li><code>maybePoint</code>\u304c\u5358\u4e00\u306e<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3001<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u304b\u3092\u5224\u5b9a\u3002</li> <li>\u95a2\u9023\u3059\u308b<code>UserID</code>\u3092\u53ce\u96c6\u3002</li> <li>\u53ce\u96c6\u3057\u305f<code>UserID</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u95a2\u9023\u3059\u308b<code>User</code>\u3092\u4e00\u62ec\u3067\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066<code>User</code>\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u53d6\u5f97\u3002</li> <li>\u53d6\u5f97\u3057\u305f<code>User</code>\u3092<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e<code>R.User</code>\u306b\u8a2d\u5b9a\u3057\u3001\u9006\u306b<code>User</code>\u306e<code>R.Point</code>\u306b\u3082<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a2d\u5b9a\u3002</li> </ul>"},{"location":"DB/model/points.go/#_41","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u8907\u6570\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\npoints, err := Points().All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u95a2\u9023\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u4e00\u62ec\u30ed\u30fc\u30c9\nif err := pointL.LoadUser(ctx, db, false, &amp;points, nil); err != nil {\n    log.Fatal(err)\n}\n\nfor _, point := range points {\n    fmt.Printf(\"\u30dd\u30a4\u30f3\u30c8: %+v, \u30e6\u30fc\u30b6\u30fc: %+v\\n\", point, point.R.User)\n}\n</code></pre>"},{"location":"DB/model/points.go/#pointuser","title":"Point\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306eUser\u306e\u30bb\u30c3\u30c8","text":"<pre><code>// SetUser of the point to the related item.\n// Sets o.R.User to related.\n// Adds o to related.R.Point.\nfunc (o *Point) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {\n    // \u3053\u3053\u304b\u3089\u7701\u7565\uff08\u8a73\u7d30\u306f\u5f8c\u8ff0\uff09\n}\n</code></pre>"},{"location":"DB/model/points.go/#_42","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: <code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u3059\u308b<code>User</code>\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002<code>Point</code>\u306e<code>UserID</code>\u3092\u66f4\u65b0\u3057\u3001\u95a2\u9023\u3092\u53cc\u65b9\u5411\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li><code>insert bool</code>: <code>related</code>\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3059\u308b\u304b\u3069\u3046\u304b\u3002</li> <li> <p><code>related *User</code>: \u95a2\u9023\u4ed8\u3051\u308b<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li><code>insert</code>\u30d5\u30e9\u30b0\u304c<code>true</code>\u306e\u5834\u5408\u3001<code>related</code>\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3002</li> <li><code>points</code>\u30c6\u30fc\u30d6\u30eb\u306e<code>user_id</code>\u3092\u66f4\u65b0\u3002</li> <li><code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e<code>UserID</code>\u3092\u66f4\u65b0\u3057\u3001<code>R.User</code>\u306b<code>related</code>\u3092\u8a2d\u5b9a\u3002</li> <li><code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e<code>R.Point</code>\u306b<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a2d\u5b9a\u3002</li> </ul>"},{"location":"DB/model/points.go/#_43","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\nuser := &amp;User{\n    UserID: 123,\n    Name:   \"\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\",\n}\n\n// \u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\npoint, err := FindPoint(ctx, db, 1)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30dd\u30a4\u30f3\u30c8\u306b\u30e6\u30fc\u30b6\u30fc\u3092\u95a2\u9023\u4ed8\u3051\nif err := point.SetUser(ctx, db, true, user); err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u66f4\u65b0\u5f8c\u306e\u30dd\u30a4\u30f3\u30c8: %+v\\n\", point)\n</code></pre>"},{"location":"DB/model/points.go/#points","title":"Points\u30af\u30a8\u30ea\u306e\u751f\u6210","text":"<pre><code>// Points retrieves all the records using an executor.\nfunc Points(mods ...qm.QueryMod) pointQuery {\n    mods = append(mods, qm.From(\"`points`\"))\n    q := NewQuery(mods...)\n    if len(queries.GetSelect(q)) == 0 {\n        queries.SetSelect(q, []string{\"`points`.*\"})\n    }\n\n    return pointQuery{q}\n}\n</code></pre>"},{"location":"DB/model/points.go/#_44","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: <code>points</code>\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3059\u308b\u30af\u30a8\u30ea\u3092\u751f\u6210\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li> <p><code>mods ...qm.QueryMod</code>: \u30af\u30a8\u30ea\u4fee\u98fe\u5b50\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li>\u30af\u30a8\u30ea\u4fee\u98fe\u5b50\u306b<code>FROM \"points\"</code>\u3092\u8ffd\u52a0\u3002</li> <li>\u65b0\u3057\u3044\u30af\u30a8\u30ea\u3092\u751f\u6210\u3002</li> <li><code>SELECT</code>\u53e5\u304c\u672a\u8a2d\u5b9a\u306e\u5834\u5408\u3001<code>points</code>\u30c6\u30fc\u30d6\u30eb\u306e\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3002</li> <li><code>pointQuery</code>\u3092\u8fd4\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_45","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30dd\u30a4\u30f3\u30c8\u306e\u30af\u30a8\u30ea\u3092\u751f\u6210\npointQuery := Points(qm.Where(\"score &gt; ?\", 100))\n\n// \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\npoints, err := pointQuery.All(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfor _, point := range points {\n    fmt.Printf(\"\u30dd\u30a4\u30f3\u30c8: %+v\\n\", point)\n}\n</code></pre>"},{"location":"DB/model/points.go/#point_6","title":"\u7279\u5b9a\u306ePoint\u30ec\u30b3\u30fc\u30c9\u306e\u691c\u7d22","text":"<pre><code>// FindPoint retrieves a single record by ID with an executor.\n// If selectCols is empty Find will return all columns.\nfunc FindPoint(ctx context.Context, exec boil.ContextExecutor, userID uint, selectCols ...string) (*Point, error) {\n    pointObj := &amp;Point{}\n\n    sel := \"*\"\n    if len(selectCols) &gt; 0 {\n        sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), \",\")\n    }\n    query := fmt.Sprintf(\n        \"select %s from `points` where `user_id`=?\", sel,\n    )\n\n    q := queries.Raw(query, userID)\n\n    err := q.Bind(ctx, exec, pointObj)\n    if err != nil {\n        if errors.Is(err, sql.ErrNoRows) {\n            return nil, sql.ErrNoRows\n        }\n        return nil, errors.Wrap(err, \"models: unable to select from points\")\n    }\n\n    if err = pointObj.doAfterSelectHooks(ctx, exec); err != nil {\n        return pointObj, err\n    }\n\n    return pointObj, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_46","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: <code>user_id</code>\u3092\u6307\u5b9a\u3057\u3066<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u30921\u4ef6\u53d6\u5f97\u3057\u307e\u3059\u3002<code>selectCols</code>\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li><code>userID uint</code>: \u53d6\u5f97\u3059\u308b<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u306e<code>user_id</code>\u3002</li> <li> <p><code>selectCols ...string</code>: \u53d6\u5f97\u3059\u308b\u30ab\u30e9\u30e0\u540d\u306e\u53ef\u5909\u9577\u5f15\u6570\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li>\u65b0\u3057\u3044<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3002      <pre><code>pointObj := &amp;Point{}\n</code></pre></li> <li><code>selectCols</code>\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3001<code>SELECT</code>\u53e5\u3092\u8a2d\u5b9a\u3002</li> <li><code>user_id</code>\u3092\u6761\u4ef6\u306b\u3057\u305f<code>SELECT</code>\u30af\u30a8\u30ea\u3092\u6587\u5b57\u5217\u3068\u3057\u3066\u4f5c\u6210\u3002</li> <li>\u751f\u30af\u30a8\u30ea<code>q</code>\u3092\u4f5c\u6210\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066<code>userID</code>\u3092\u6307\u5b9a\u3002</li> <li>\u30af\u30a8\u30ea\u7d50\u679c\u3092<code>pointObj</code>\u306b\u30d0\u30a4\u30f3\u30c9\u3002</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406:<ul> <li>\u30ec\u30b3\u30fc\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001<code>nil</code>\u3068<code>sql.ErrNoRows</code>\u3092\u8fd4\u3059\u3002</li> <li>\u305d\u306e\u4ed6\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3059\u3002</li> </ul> </li> <li><code>pointObj</code>\u306b\u30a2\u30d5\u30bf\u30fc\u30bb\u30ec\u30af\u30c8\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\u3002</li> <li>\u6700\u7d42\u7684\u306b<code>pointObj</code>\u3092\u8fd4\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_47","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u30fcID\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\nuserID := uint(123)\npoint, err := FindPoint(ctx, db, userID)\nif err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        fmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\")\n    } else {\n        log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n    }\n}\n\nfmt.Printf(\"\u53d6\u5f97\u3057\u305f\u30dd\u30a4\u30f3\u30c8: %+v\\n\", point)\n</code></pre> <p>\u4ee5\u4e0b\u3067\u306f\u3001\u63d0\u4f9b\u3055\u308c\u305fGo\u8a00\u8a9e\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u3001\u3059\u3079\u3066\u306e\u30b3\u30fc\u30c9\u90e8\u5206\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u958b\u767a\u8005\u5411\u3051\u306b\u5229\u7528\u4f8b\u3082\u8a73\u7d30\u306a\u30b3\u30fc\u30c9\u4f8b\u3068\u3057\u3066\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#point_7","title":"Point\u69cb\u9020\u4f53\u306e\u30ec\u30b3\u30fc\u30c9\u633f\u5165\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// Insert a single record using an executor.\n// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.\nfunc (o *Point) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {\n    if o == nil {\n        return errors.New(\"models: no points provided for insertion\")\n    }\n\n    var err error\n    if !boil.TimestampsAreSkipped(ctx) {\n        currTime := time.Now().In(boil.GetLocation())\n\n        if o.CreatedAt.IsZero() {\n            o.CreatedAt = currTime\n        }\n        if o.UpdatedAt.IsZero() {\n            o.UpdatedAt = currTime\n        }\n    }\n\n    if err := o.doBeforeInsertHooks(ctx, exec); err != nil {\n        return err\n    }\n\n    nzDefaults := queries.NonZeroDefaultSet(pointColumnsWithDefault, o)\n\n    key := makeCacheKey(columns, nzDefaults)\n    pointInsertCacheMut.RLock()\n    cache, cached := pointInsertCache[key]\n    pointInsertCacheMut.RUnlock()\n\n    if !cached {\n        wl, returnColumns := columns.InsertColumnSet(\n            pointAllColumns,\n            pointColumnsWithDefault,\n            pointColumnsWithoutDefault,\n            nzDefaults,\n        )\n\n        cache.valueMapping, err = queries.BindMapping(pointType, pointMapping, wl)\n        if err != nil {\n            return err\n        }\n        cache.retMapping, err = queries.BindMapping(pointType, pointMapping, returnColumns)\n        if err != nil {\n            return err\n        }\n        if len(wl) != 0 {\n            cache.query = fmt.Sprintf(\"INSERT INTO `points` (`%s`) %%sVALUES (%s)%%s\", strings.Join(wl, \"`,`\"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))\n        } else {\n            cache.query = \"INSERT INTO `points` () VALUES ()%s%s\"\n        }\n\n        var queryOutput, queryReturning string\n\n        if len(cache.retMapping) != 0 {\n            cache.retQuery = fmt.Sprintf(\"SELECT `%s` FROM `points` WHERE %s\", strings.Join(returnColumns, \"`,`\"), strmangle.WhereClause(\"`\", \"`\", 0, pointPrimaryKeyColumns))\n        }\n\n        cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)\n    }\n\n    value := reflect.Indirect(reflect.ValueOf(o))\n    vals := queries.ValuesFromMapping(value, cache.valueMapping)\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, cache.query)\n        fmt.Fprintln(writer, vals)\n    }\n    _, err = exec.ExecContext(ctx, cache.query, vals...)\n\n    if err != nil {\n        return errors.Wrap(err, \"models: unable to insert into points\")\n    }\n\n    var identifierCols []interface{}\n\n    if len(cache.retMapping) == 0 {\n        goto CacheNoHooks\n    }\n\n    identifierCols = []interface{}{\n        o.UserID,\n    }\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, cache.retQuery)\n        fmt.Fprintln(writer, identifierCols...)\n    }\n    err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)\n    if err != nil {\n        return errors.Wrap(err, \"models: unable to populate default values for points\")\n    }\n\nCacheNoHooks:\n    if !cached {\n        pointInsertCacheMut.Lock()\n        pointInsertCache[key] = cache\n        pointInsertCacheMut.Unlock()\n    }\n\n    return o.doAfterInsertHooks(ctx, exec)\n}\n</code></pre>"},{"location":"DB/model/points.go/#_48","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: <code>Point</code>\u69cb\u9020\u4f53\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9<code>o</code>\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\uff08INSERT\uff09\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li> <p><code>columns boil.Columns</code>: \u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u306e\u30bb\u30c3\u30c8\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li>nil\u30c1\u30a7\u30c3\u30af:<ul> <li><code>o</code>\u304c<code>nil</code>\u306e\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002    <pre><code>if o == nil {\n    return errors.New(\"models: no points provided for insertion\")\n}\n</code></pre></li> </ul> </li> <li>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u8a2d\u5b9a:<ul> <li>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u304c\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\u3057\u3001<code>CreatedAt</code>\u3068<code>UpdatedAt</code>\u304c\u30bc\u30ed\u5024\u306e\u5834\u5408\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002    <pre><code>if !boil.TimestampsAreSkipped(ctx) {\n    currTime := time.Now().In(boil.GetLocation())\n\n    if o.CreatedAt.IsZero() {\n        o.CreatedAt = currTime\n    }\n    if o.UpdatedAt.IsZero() {\n        o.UpdatedAt = currTime\n    }\n}\n</code></pre></li> </ul> </li> <li>\u633f\u5165\u524d\u306e\u30d5\u30c3\u30af\u51e6\u7406:<ul> <li>\u633f\u5165\u524d\u306b\u5fc5\u8981\u306a\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u307e\u3059\u3002    <pre><code>if err := o.doBeforeInsertHooks(ctx, exec); err != nil {\n    return err\n}\n</code></pre></li> </ul> </li> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u30bb\u30c3\u30c8:<ul> <li>\u975e\u30bc\u30ed\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u7279\u5b9a\u3057\u307e\u3059\u3002    <pre><code>nzDefaults := queries.NonZeroDefaultSet(pointColumnsWithDefault, o)\n</code></pre></li> </ul> </li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30ad\u30fc\u4f5c\u6210\u3068\u53d6\u5f97:<ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u3001\u633f\u5165\u7528\u306e\u30af\u30a8\u30ea\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002    <pre><code>key := makeCacheKey(columns, nzDefaults)\npointInsertCacheMut.RLock()\ncache, cached := pointInsertCache[key]\npointInsertCacheMut.RUnlock()\n</code></pre></li> </ul> </li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30af\u30a8\u30ea\u3092\u69cb\u7bc9:<ul> <li>\u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3068\u623b\u308a\u5024\u306e\u30ab\u30e9\u30e0\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</li> <li>\u30de\u30c3\u30d4\u30f3\u30b0\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u5024\u306e\u62bd\u51fa:<ul> <li><code>o</code>\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u60c5\u5831\u306b\u57fa\u3065\u3044\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002    <pre><code>value := reflect.Indirect(reflect.ValueOf(o))\nvals := queries.ValuesFromMapping(value, cache.valueMapping)\n</code></pre></li> </ul> </li> <li>\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u306e\u51fa\u529b:<ul> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u5834\u5408\u3001\u30af\u30a8\u30ea\u3068\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u633f\u5165\u5b9f\u884c:<ul> <li><code>exec.ExecContext</code>\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u633f\u5165\u3057\u307e\u3059\u3002    <pre><code>_, err = exec.ExecContext(ctx, cache.query, vals...)\n</code></pre></li> </ul> </li> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u53d6\u5f97:<ul> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u518d\u53d6\u5f97\u3057\u3001<code>o</code>\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u66f4\u65b0:<ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u65b0\u3057\u304f\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u633f\u5165\u5f8c\u306e\u30d5\u30c3\u30af\u51e6\u7406:<ul> <li>\u633f\u5165\u5f8c\u306b\u5fc5\u8981\u306a\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul> </li> </ul>"},{"location":"DB/model/points.go/#_49","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u65b0\u3057\u3044\u30dd\u30a4\u30f3\u30c8\u3092\u4f5c\u6210\npoint := &amp;Point{\n    UserID: 123,\n    Score:  100,\n    // \u4ed6\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u521d\u671f\u5316\n}\n\n// \u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\uff08\u5fc5\u8981\u306a\u5834\u5408\uff09\ncolumns := boil.Infer()\n\n// \u30dd\u30a4\u30f3\u30c8\u3092\u633f\u5165\nif err := point.Insert(ctx, db, columns); err != nil {\n    log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n}\n\nfmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u304c\u633f\u5165\u3055\u308c\u307e\u3057\u305f:\", point)\n</code></pre>"},{"location":"DB/model/points.go/#point_8","title":"Point\u69cb\u9020\u4f53\u306e\u30ec\u30b3\u30fc\u30c9\u66f4\u65b0\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// Update uses an executor to update the Point.\n// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.\n// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.\nfunc (o *Point) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {\n    if !boil.TimestampsAreSkipped(ctx) {\n        currTime := time.Now().In(boil.GetLocation())\n\n        o.UpdatedAt = currTime\n    }\n\n    var err error\n    if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {\n        return 0, err\n    }\n    key := makeCacheKey(columns, nil)\n    pointUpdateCacheMut.RLock()\n    cache, cached := pointUpdateCache[key]\n    pointUpdateCacheMut.RUnlock()\n\n    if !cached {\n        wl := columns.UpdateColumnSet(\n            pointAllColumns,\n            pointPrimaryKeyColumns,\n        )\n\n        if !columns.IsWhitelist() {\n            wl = strmangle.SetComplement(wl, []string{\"created_at\"})\n        }\n        if len(wl) == 0 {\n            return 0, errors.New(\"models: unable to update points, could not build whitelist\")\n        }\n\n        cache.query = fmt.Sprintf(\"UPDATE `points` SET %s WHERE %s\",\n            strmangle.SetParamNames(\"`\", \"`\", 0, wl),\n            strmangle.WhereClause(\"`\", \"`\", 0, pointPrimaryKeyColumns),\n        )\n        cache.valueMapping, err = queries.BindMapping(pointType, pointMapping, append(wl, pointPrimaryKeyColumns...))\n        if err != nil {\n            return 0, err\n        }\n    }\n\n    values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, cache.query)\n        fmt.Fprintln(writer, values)\n    }\n    var result sql.Result\n    result, err = exec.ExecContext(ctx, cache.query, values...)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to update points row\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by update for points\")\n    }\n\n    if !cached {\n        pointUpdateCacheMut.Lock()\n        pointUpdateCache[key] = cache\n        pointUpdateCacheMut.Unlock()\n    }\n\n    return rowsAff, o.doAfterUpdateHooks(ctx, exec)\n}\n</code></pre>"},{"location":"DB/model/points.go/#_50","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: <code>Point</code>\u69cb\u9020\u4f53\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9<code>o</code>\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5185\u3067\u66f4\u65b0\uff08UPDATE\uff09\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li> <p><code>columns boil.Columns</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u306e\u30bb\u30c3\u30c8\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u66f4\u65b0:<ul> <li>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u304c\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001<code>UpdatedAt</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u73fe\u5728\u6642\u523b\u306b\u66f4\u65b0\u3057\u307e\u3059\u3002    <pre><code>if !boil.TimestampsAreSkipped(ctx) {\n    currTime := time.Now().In(boil.GetLocation())\n\n    o.UpdatedAt = currTime\n}\n</code></pre></li> </ul> </li> <li>\u66f4\u65b0\u524d\u306e\u30d5\u30c3\u30af\u51e6\u7406:<ul> <li>\u66f4\u65b0\u524d\u306b\u5fc5\u8981\u306a\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u307e\u3059\u3002    <pre><code>if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {\n    return 0, err\n}\n</code></pre></li> </ul> </li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30ad\u30fc\u4f5c\u6210\u3068\u53d6\u5f97:<ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u3001\u66f4\u65b0\u7528\u306e\u30af\u30a8\u30ea\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30af\u30a8\u30ea\u3092\u69cb\u7bc9:<ul> <li>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u306e\u30ea\u30b9\u30c8\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u3067<code>created_at</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u66f4\u65b0\u5bfe\u8c61\u304b\u3089\u9664\u5916\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</li> <li>\u30de\u30c3\u30d4\u30f3\u30b0\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u304c0\u306e\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u5024\u306e\u62bd\u51fa:<ul> <li><code>o</code>\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u60c5\u5831\u306b\u57fa\u3065\u3044\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u306e\u51fa\u529b:<ul> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u5834\u5408\u3001\u30af\u30a8\u30ea\u3068\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u66f4\u65b0\u5b9f\u884c:<ul> <li><code>exec.ExecContext</code>\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u306e\u53d6\u5f97:<ul> <li>\u66f4\u65b0\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u66f4\u65b0:<ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u65b0\u3057\u304f\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u66f4\u65b0\u5f8c\u306e\u30d5\u30c3\u30af\u51e6\u7406:</p> <ul> <li>\u66f4\u65b0\u5f8c\u306b\u5fc5\u8981\u306a\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u6ce8\u610f\u70b9:</p> </li> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u66f4\u65b0\u3055\u308c\u305f\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b<code>o</code>\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u304c\u66f4\u65b0\u3055\u308c\u307e\u305b\u3093\u3002\u6700\u65b0\u306e\u72b6\u614b\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f<code>.Reload()</code>\u3092\u4f7f\u7528\u3057\u3066\u30ec\u30b3\u30fc\u30c9\u3092\u518d\u8aad\u307f\u8fbc\u307f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_51","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3057\u305f\u3044\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\npoint, err := FindPoint(ctx, db, 123)\nif err != nil {\n    log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n}\n\n// \u30dd\u30a4\u30f3\u30c8\u306e\u30b9\u30b3\u30a2\u3092\u66f4\u65b0\npoint.Score = 200\n\n// \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\ncolumns := boil.Whitelist(\"score\")\n\n// \u30dd\u30a4\u30f3\u30c8\u3092\u66f4\u65b0\nrowsAff, err := point.Update(ctx, db, columns)\nif err != nil {\n    log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n}\n\nfmt.Printf(\"\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570: %d\\n\", rowsAff)\n</code></pre>"},{"location":"DB/model/points.go/#_52","title":"\u30af\u30a8\u30ea\u306b\u30de\u30c3\u30c1\u3059\u308b\u5168\u30ec\u30b3\u30fc\u30c9\u306e\u66f4\u65b0\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// UpdateAll updates all rows with the specified column values.\nfunc (q pointQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {\n    queries.SetUpdate(q.Query, cols)\n\n    result, err := q.Query.ExecContext(ctx, exec)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to update all for points\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to retrieve rows affected for points\")\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_53","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: \u30af\u30a8\u30ea<code>q</code>\u306b\u30de\u30c3\u30c1\u3059\u308b\u3059\u3079\u3066\u306e<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u3092\u4e00\u62ec\u3067\u66f4\u65b0\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li> <p><code>cols M</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u540d\u3068\u65b0\u3057\u3044\u5024\u306e\u30de\u30c3\u30d7\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li>\u66f4\u65b0\u5185\u5bb9\u306e\u8a2d\u5b9a:<ul> <li>\u30af\u30a8\u30ea\u306b\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3068\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002    <pre><code>queries.SetUpdate(q.Query, cols)\n</code></pre></li> </ul> </li> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u66f4\u65b0\u5b9f\u884c:<ul> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u306e\u53d6\u5f97:<ul> <li>\u66f4\u65b0\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u884c\u6570\u3092\u8fd4\u3059:<ul> <li>\u66f4\u65b0\u306b\u3088\u3063\u3066\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul> </li> </ul>"},{"location":"DB/model/points.go/#_54","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u30b9\u30b3\u30a2\u304c100\u672a\u6e80\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u9078\u629e\npointQuery := Points(qm.Where(\"score &lt; ?\", 100))\n\n// \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3068\u5024\u3092\u6307\u5b9a\ncols := M{\n    \"score\": 100,\n}\n\n// \u8a72\u5f53\u30ec\u30b3\u30fc\u30c9\u3092\u4e00\u62ec\u66f4\u65b0\nrowsAff, err := pointQuery.UpdateAll(ctx, db, cols)\nif err != nil {\n    log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n}\n\nfmt.Printf(\"\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570: %d\\n\", rowsAff)\n</code></pre>"},{"location":"DB/model/points.go/#pointslice","title":"PointSlice\u306e\u4e00\u62ec\u66f4\u65b0\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// UpdateAll updates all rows with the specified column values, using an executor.\nfunc (o PointSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {\n    ln := int64(len(o))\n    if ln == 0 {\n        return 0, nil\n    }\n\n    if len(cols) == 0 {\n        return 0, errors.New(\"models: update all requires at least one column argument\")\n    }\n\n    colNames := make([]string, len(cols))\n    args := make([]interface{}, len(cols))\n\n    i := 0\n    for name, value := range cols {\n        colNames[i] = name\n        args[i] = value\n        i++\n    }\n\n    // Append all of the primary key values for each column\n    for _, obj := range o {\n        pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pointPrimaryKeyMapping)\n        args = append(args, pkeyArgs...)\n    }\n\n    sql := fmt.Sprintf(\"UPDATE `points` SET %s WHERE %s\",\n        strmangle.SetParamNames(\"`\", \"`\", 0, colNames),\n        strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pointPrimaryKeyColumns, len(o)))\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, args...)\n    }\n    result, err := exec.ExecContext(ctx, sql, args...)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to update all in point slice\")\n    }\n\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to retrieve rows affected all in update all point\")\n    }\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_55","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u6982\u8981: <code>Point</code>\u306e\u30b9\u30e9\u30a4\u30b9<code>PointSlice</code>\u5185\u306e\u3059\u3079\u3066\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u305f\u30ab\u30e9\u30e0\u3068\u5024\u3067\u4e00\u62ec\u66f4\u65b0\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f15\u6570:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li> <p><code>cols M</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u540d\u3068\u65b0\u3057\u3044\u5024\u306e\u30de\u30c3\u30d7\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li>\u30b9\u30e9\u30a4\u30b9\u306e\u9577\u3055\u3092\u78ba\u8a8d:<ul> <li>\u30b9\u30e9\u30a4\u30b9\u304c\u7a7a\u306e\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d:<ul> <li>\u30ab\u30e9\u30e0\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30ab\u30e9\u30e0\u540d\u3068\u5024\u306e\u62bd\u51fa:<ul> <li>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u540d\u3068\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u5024\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u4e3b\u30ad\u30fc\u5024\u306e\u53ce\u96c6:<ul> <li>\u5404<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e3b\u30ad\u30fc\u5024\u3092\u62bd\u51fa\u3057\u3001<code>args</code>\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> </ul> </li> <li>SQL\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:<ul> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3057\u3001WHERE\u53e5\u3067\u5404\u30ec\u30b3\u30fc\u30c9\u3092\u8b58\u5225\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u306e\u51fa\u529b:<ul> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u5834\u5408\u3001\u30af\u30a8\u30ea\u3068\u5f15\u6570\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u66f4\u65b0\u5b9f\u884c:<ul> <li><code>exec.ExecContext</code>\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u306e\u53d6\u5f97:<ul> <li>\u66f4\u65b0\u64cd\u4f5c\u306b\u3088\u3063\u3066\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u884c\u6570\u3092\u8fd4\u3059:</p> <ul> <li>\u66f4\u65b0\u306b\u3088\u3063\u3066\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u6ce8\u610f\u70b9:</p> </li> <li>\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5404<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e3b\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066\u500b\u5225\u306b\u30ec\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_56","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3057\u305f\u3044\u30dd\u30a4\u30f3\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u4f5c\u6210\npoints, err := Points(qm.Where(\"score &lt; ?\", 50)).All(ctx, db)\nif err != nil {\n    log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n}\n\n// \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3068\u5024\u3092\u6307\u5b9a\ncols := M{\n    \"score\": 75,\n}\n\n// \u30dd\u30a4\u30f3\u30c8\u30b9\u30e9\u30a4\u30b9\u3092\u4e00\u62ec\u66f4\u65b0\nrowsAff, err := points.UpdateAll(ctx, db, cols)\nif err != nil {\n    log.Fatalf(\"\u30a8\u30e9\u30fc: %v\", err)\n}\n\nfmt.Printf(\"\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570: %d\\n\", rowsAff)\n</code></pre>"},{"location":"DB/model/points.go/#mysqlpoint","title":"MySQL\u306b\u304a\u3051\u308bPoint\u30c6\u30fc\u30d6\u30eb\u306e\u30e6\u30cb\u30fc\u30af\u30ab\u30e9\u30e0","text":"<pre><code>var mySQLPointUniqueColumns = []string{\n    \"user_id\",\n}\n</code></pre>"},{"location":"DB/model/points.go/#_57","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u5909\u6570\u306e\u6982\u8981: <code>mySQLPointUniqueColumns</code>\u306f\u3001MySQL\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u304a\u3044\u3066<code>points</code>\u30c6\u30fc\u30d6\u30eb\u306e\u30e6\u30cb\u30fc\u30af\u5236\u7d04\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ab\u30e9\u30e0\u306e\u30ea\u30b9\u30c8\u3092\u8868\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5185\u5bb9:</p> </li> <li> <p><code>\"user_id\"</code>: <code>user_id</code>\u30ab\u30e9\u30e0\u304c\u30e6\u30cb\u30fc\u30af\u5236\u7d04\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> </li> <li> <p>\u7528\u9014:</p> </li> <li>\u3053\u306e\u5909\u6570\u306f\u3001ORM\uff08Object-Relational Mapping\uff09\u3084\u305d\u306e\u4ed6\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3067\u3001\u7279\u5b9a\u306e\u30ab\u30e9\u30e0\u304c\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308b\u3053\u3068\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306b\u5224\u65ad\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_58","title":"\u5229\u7528\u4f8b","text":"<p>\u30e6\u30cb\u30fc\u30af\u5236\u7d04\u3092\u8003\u616e\u3057\u3066\u30c7\u30fc\u30bf\u3092\u633f\u5165\u3059\u308b\u5834\u5408\u3084\u3001\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u306b\u57fa\u3065\u3044\u3066\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u30fb\u66f4\u65b0\u3059\u308b\u5834\u5408\u306b\u3001\u3053\u306e\u60c5\u5831\u3092\u4f7f\u7528\u3057\u3066\u9069\u5207\u306a\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#_59","title":"\u30b3\u30fc\u30c9\u89e3\u8aac\u3068\u4f7f\u7528\u4f8b","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u3001Go\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u305fORM\uff08Object-Relational Mapping\uff09\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b<code>boil</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u95a2\u6570\u7fa4\u3067\u3059\u3002\u7279\u306b\u3001<code>Point</code>\u3068\u3044\u3046\u30c7\u30fc\u30bf\u30e2\u30c7\u30eb\u306b\u5bfe\u3059\u308b\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\uff08Upsert\uff09\u3001\u524a\u9664\u3001\u30ea\u30ed\u30fc\u30c9\u64cd\u4f5c\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001\u5404\u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u3068\u3001\u958b\u767a\u8005\u5411\u3051\u306e\u4f7f\u7528\u4f8b\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#_60","title":"\u76ee\u6b21","text":"<ul> <li><code>Upsert</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac</li> <li><code>Delete</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac</li> <li><code>DeleteAll</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac</li> <li><code>Reload</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac</li> <li><code>ReloadAll</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac</li> <li>\u4f7f\u7528\u4f8b</li> </ul>"},{"location":"DB/model/points.go/#upsert","title":"<code>Upsert</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac","text":"<pre><code>func (o *Point) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {\n    // nil\u30c1\u30a7\u30c3\u30af\uff1aPoint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    if o == nil {\n        return errors.New(\"models: no points provided for upsert\")\n    }\n\n    // \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u8a2d\u5b9a\uff1a\u4f5c\u6210\u65e5\u6642\u3068\u66f4\u65b0\u65e5\u6642\u3092\u8a2d\u5b9a\n    if !boil.TimestampsAreSkipped(ctx) {\n        currTime := time.Now().In(boil.GetLocation())\n\n        if o.CreatedAt.IsZero() {\n            o.CreatedAt = currTime\n        }\n        o.UpdatedAt = currTime\n    }\n\n    // Upsert\u524d\u306e\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\n    if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {\n        return err\n    }\n\n    // \u975e\u30bc\u30ed\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u306e\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\n    nzDefaults := queries.NonZeroDefaultSet(pointColumnsWithDefault, o)\n    nzUniques := queries.NonZeroDefaultSet(mySQLPointUniqueColumns, o)\n\n    // \u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\n    if len(nzUniques) == 0 {\n        return errors.New(\"cannot upsert with a table that cannot conflict on a unique column\")\n    }\n\n    // \u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u751f\u6210\n    buf := strmangle.GetBuffer()\n    // updateColumns\u3068insertColumns\u306e\u60c5\u5831\u3092\u30ad\u30fc\u306b\u542b\u3081\u308b\n    buf.WriteString(strconv.Itoa(updateColumns.Kind))\n    for _, c := range updateColumns.Cols {\n        buf.WriteString(c)\n    }\n    buf.WriteByte('.')\n    buf.WriteString(strconv.Itoa(insertColumns.Kind))\n    for _, c := range insertColumns.Cols {\n        buf.WriteString(c)\n    }\n    buf.WriteByte('.')\n    for _, c := range nzDefaults {\n        buf.WriteString(c)\n    }\n    buf.WriteByte('.')\n    for _, c := range nzUniques {\n        buf.WriteString(c)\n    }\n    key := buf.String()\n    strmangle.PutBuffer(buf)\n\n    // \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30c1\u30a7\u30c3\u30af\n    pointUpsertCacheMut.RLock()\n    cache, cached := pointUpsertCache[key]\n    pointUpsertCacheMut.RUnlock()\n\n    var err error\n\n    if !cached {\n        // \u633f\u5165\u304a\u3088\u3073\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u306e\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\n        insert, _ := insertColumns.InsertColumnSet(\n            pointAllColumns,\n            pointColumnsWithDefault,\n            pointColumnsWithoutDefault,\n            nzDefaults,\n        )\n\n        update := updateColumns.UpdateColumnSet(\n            pointAllColumns,\n            pointPrimaryKeyColumns,\n        )\n\n        if !updateColumns.IsNone() &amp;&amp; len(update) == 0 {\n            return errors.New(\"models: unable to upsert points, could not build update column list\")\n        }\n\n        // \u623b\u308a\u5024\u306e\u30ab\u30e9\u30e0\u3092\u6c7a\u5b9a\n        ret := strmangle.SetComplement(pointAllColumns, strmangle.SetIntersect(insert, update))\n\n        // Upsert\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\n        cache.query = buildUpsertQueryMySQL(dialect, \"`points`\", update, insert)\n        cache.retQuery = fmt.Sprintf(\n            \"SELECT %s FROM `points` WHERE %s\",\n            strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), \",\"),\n            strmangle.WhereClause(\"`\", \"`\", 0, nzUniques),\n        )\n\n        // \u30de\u30c3\u30d4\u30f3\u30b0\u306e\u4f5c\u6210\n        cache.valueMapping, err = queries.BindMapping(pointType, pointMapping, insert)\n        if err != nil {\n            return err\n        }\n        if len(ret) != 0 {\n            cache.retMapping, err = queries.BindMapping(pointType, pointMapping, ret)\n            if err != nil {\n                return err\n            }\n        }\n    }\n\n    // \u5024\u3068\u623b\u308a\u5024\u306e\u53d6\u5f97\n    value := reflect.Indirect(reflect.ValueOf(o))\n    vals := queries.ValuesFromMapping(value, cache.valueMapping)\n    var returns []interface{}\n    if len(cache.retMapping) != 0 {\n        returns = queries.PtrsFromMapping(value, cache.retMapping)\n    }\n\n    // \u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u306e\u51fa\u529b\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, cache.query)\n        fmt.Fprintln(writer, vals)\n    }\n\n    // \u30af\u30a8\u30ea\u306e\u5b9f\u884c\n    _, err = exec.ExecContext(ctx, cache.query, vals...)\n\n    if err != nil {\n        return errors.Wrap(err, \"models: unable to upsert for points\")\n    }\n\n    var uniqueMap []uint64\n    var nzUniqueCols []interface{}\n\n    if len(cache.retMapping) == 0 {\n        goto CacheNoHooks\n    }\n\n    // \u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u306e\u5024\u3092\u53d6\u5f97\n    uniqueMap, err = queries.BindMapping(pointType, pointMapping, nzUniques)\n    if err != nil {\n        return errors.Wrap(err, \"models: unable to retrieve unique values for points\")\n    }\n    nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)\n\n    // \u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u306e\u51fa\u529b\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, cache.retQuery)\n        fmt.Fprintln(writer, nzUniqueCols...)\n    }\n\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u53d6\u5f97\n    err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)\n    if err != nil {\n        return errors.Wrap(err, \"models: unable to populate default values for points\")\n    }\n\nCacheNoHooks:\n    // \u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4fdd\u5b58\n    if !cached {\n        pointUpsertCacheMut.Lock()\n        pointUpsertCache[key] = cache\n        pointUpsertCacheMut.Unlock()\n    }\n\n    // Upsert\u5f8c\u306e\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\n    return o.doAfterUpsertHooks(ctx, exec)\n}\n</code></pre>"},{"location":"DB/model/points.go/#_61","title":"\u89e3\u8aac","text":"<ul> <li>\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3:</li> <li><code>Upsert</code>\u306f\u3001<code>Point</code>\u578b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u64cd\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002</li> <li> <p>\u30d1\u30e9\u30e1\u30fc\u30bf\uff1a</p> <ul> <li><code>ctx</code>\uff1a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8</li> <li><code>exec</code>\uff1a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc</li> <li><code>updateColumns</code>\uff1a\u66f4\u65b0\u5bfe\u8c61\u306e\u30ab\u30e9\u30e0</li> <li><code>insertColumns</code>\uff1a\u633f\u5165\u5bfe\u8c61\u306e\u30ab\u30e9\u30e0</li> </ul> </li> <li> <p>nil\u30c1\u30a7\u30c3\u30af:</p> </li> <li> <p><code>o</code>\u304c<code>nil</code>\u306e\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u8a2d\u5b9a:</p> </li> <li><code>CreatedAt</code>\u3068<code>UpdatedAt</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u73fe\u5728\u306e\u6642\u9593\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li> <p>\u3053\u308c\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u304a\u3088\u3073\u66f4\u65b0\u65e5\u6642\u3092\u81ea\u52d5\u7684\u306b\u7ba1\u7406\u3059\u308b\u305f\u3081\u3067\u3059\u3002</p> </li> <li> <p>\u30d5\u30c3\u30af\u51e6\u7406\u306e\u547c\u3073\u51fa\u3057:</p> </li> <li> <p><code>doBeforeUpsertHooks</code>\uff1a\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u64cd\u4f5c\u306e\u524d\u306b\u5b9f\u884c\u3055\u308c\u308b\u30d5\u30c3\u30af\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u306e\u78ba\u8a8d:</p> </li> <li>\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u3001\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u304c\u5fc5\u8981\u3067\u3059\u3002</li> <li> <p>\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u751f\u6210:</p> </li> <li>\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u30af\u30a8\u30ea\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6539\u5584\u3059\u308b\u305f\u3081\u306b\u3001\u30af\u30a8\u30ea\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002</li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306f\u3001\u66f4\u65b0\u30ab\u30e9\u30e0\u3001\u633f\u5165\u30ab\u30e9\u30e0\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3001\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u306e\u7d44\u307f\u5408\u308f\u305b\u304b\u3089\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002</p> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u5229\u7528:</p> </li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u30af\u30a8\u30ea\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u3001\u305d\u308c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li> <p>\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u65b0\u305f\u306b\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3057\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</p> </li> <li><code>buildUpsertQueryMySQL</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001MySQL\u7528\u306e\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</li> <li> <p>\u623b\u308a\u5024\u30af\u30a8\u30ea\u3082\u69cb\u7bc9\u3057\u3001\u633f\u5165\u5f8c\u306b\u81ea\u52d5\u751f\u6210\u3055\u308c\u305fID\u3084\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5024\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0:</p> </li> <li> <p><code>BindMapping</code>\u3068<code>ValuesFromMapping</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30ab\u30e9\u30e0\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3044\u3001\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u306e\u51fa\u529b:</p> </li> <li> <p>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u304c\u6709\u52b9\u306a\u5834\u5408\u3001\u5b9f\u884c\u3059\u308b\u30af\u30a8\u30ea\u3068\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u5024\u3092\u30ed\u30b0\u306b\u51fa\u529b\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</p> </li> <li> <p>\u69cb\u7bc9\u3057\u305f\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u623b\u308a\u5024\u306e\u53d6\u5f97:</p> </li> <li> <p>\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u5f8c\u306b\u5fc5\u8981\u306a\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3084\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u3078\u306e\u4fdd\u5b58:</p> </li> <li> <p>\u65b0\u305f\u306b\u69cb\u7bc9\u3057\u305f\u30af\u30a8\u30ea\u306f\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002</p> </li> <li> <p>\u30d5\u30c3\u30af\u51e6\u7406\u306e\u547c\u3073\u51fa\u3057\uff08\u5f8c\u51e6\u7406\uff09:</p> </li> <li><code>doAfterUpsertHooks</code>\uff1a\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u64cd\u4f5c\u306e\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308b\u30d5\u30c3\u30af\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#delete_1","title":"<code>Delete</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac","text":"<pre><code>func (o *Point) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    // nil\u30c1\u30a7\u30c3\u30af\uff1aPoint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n    if o == nil {\n        return 0, errors.New(\"models: no Point provided for delete\")\n    }\n\n    // \u524a\u9664\u524d\u306e\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\n    if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {\n        return 0, err\n    }\n\n    // \u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u306e\u5024\u3092\u53d6\u5f97\n    args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), pointPrimaryKeyMapping)\n    sql := \"DELETE FROM `points` WHERE `user_id`=?\"\n\n    // \u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u306e\u51fa\u529b\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, args...)\n    }\n\n    // \u30af\u30a8\u30ea\u306e\u5b9f\u884c\n    result, err := exec.ExecContext(ctx, sql, args...)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to delete from points\")\n    }\n\n    // \u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u306e\u53d6\u5f97\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by delete for points\")\n    }\n\n    // \u524a\u9664\u5f8c\u306e\u30d5\u30c3\u30af\u51e6\u7406\u3092\u5b9f\u884c\n    if err := o.doAfterDeleteHooks(ctx, exec); err != nil {\n        return 0, err\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_62","title":"\u89e3\u8aac","text":"<ul> <li>\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3:</li> <li><code>Delete</code>\u306f\u3001<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002</li> <li> <p>\u623b\u308a\u5024\u306f\u3001\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3068\u30a8\u30e9\u30fc\u60c5\u5831\u3067\u3059\u3002</p> </li> <li> <p>nil\u30c1\u30a7\u30c3\u30af:</p> </li> <li> <p><code>o</code>\u304c<code>nil</code>\u306e\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30d5\u30c3\u30af\u51e6\u7406\u306e\u547c\u3073\u51fa\u3057\uff08\u524d\u51e6\u7406\uff09:</p> </li> <li> <p><code>doBeforeDeleteHooks</code>\uff1a\u524a\u9664\u64cd\u4f5c\u306e\u524d\u306b\u5b9f\u884c\u3055\u308c\u308b\u30d5\u30c3\u30af\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</p> </li> <li> <p>\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\uff08<code>user_id</code>\uff09\u3092\u4f7f\u7528\u3057\u3066\u524a\u9664\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u306e\u51fa\u529b:</p> </li> <li> <p>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u304c\u6709\u52b9\u306a\u5834\u5408\u3001\u5b9f\u884c\u3059\u308b\u30af\u30a8\u30ea\u3068\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u5024\u3092\u30ed\u30b0\u306b\u51fa\u529b\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</p> </li> <li> <p>\u524a\u9664\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u306e\u53d6\u5f97:</p> </li> <li> <p><code>RowsAffected</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30d5\u30c3\u30af\u51e6\u7406\u306e\u547c\u3073\u51fa\u3057\uff08\u5f8c\u51e6\u7406\uff09:</p> </li> <li><code>doAfterDeleteHooks</code>\uff1a\u524a\u9664\u64cd\u4f5c\u306e\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308b\u30d5\u30c3\u30af\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#deleteall","title":"<code>DeleteAll</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac","text":"<pre><code>func (q pointQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    // \u30af\u30a8\u30ea\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\n    if q.Query == nil {\n        return 0, errors.New(\"models: no pointQuery provided for delete all\")\n    }\n\n    // \u30af\u30a8\u30ea\u3092\u524a\u9664\u64cd\u4f5c\u306b\u8a2d\u5b9a\n    queries.SetDelete(q.Query)\n\n    // \u30af\u30a8\u30ea\u306e\u5b9f\u884c\n    result, err := q.Query.ExecContext(ctx, exec)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: unable to delete all from points\")\n    }\n\n    // \u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u306e\u53d6\u5f97\n    rowsAff, err := result.RowsAffected()\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: failed to get rows affected by deleteall for points\")\n    }\n\n    return rowsAff, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_63","title":"\u89e3\u8aac","text":"<ul> <li>\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3:</li> <li><code>DeleteAll</code>\u306f\u3001<code>pointQuery</code>\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u305f\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u5168\u3066\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002</li> <li> <p>\u623b\u308a\u5024\u306f\u3001\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3068\u30a8\u30e9\u30fc\u60c5\u5831\u3067\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u691c\u8a3c:</p> </li> <li> <p>\u30af\u30a8\u30ea\u304c<code>nil</code>\u306e\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u8a2d\u5b9a:</p> </li> <li> <p><code>SetDelete</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u30af\u30a8\u30ea\u3092\u524a\u9664\u64cd\u4f5c\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0:</p> </li> <li> <p>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u8a73\u7d30\u306a\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5f71\u97ff\u3092\u53d7\u3051\u305f\u884c\u6570\u306e\u53d6\u5f97:</p> </li> <li><code>RowsAffected</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#reload","title":"<code>Reload</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac","text":"<pre><code>func (o *Point) Reload(ctx context.Context, exec boil.ContextExecutor) error {\n    // \u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u518d\u53d6\u5f97\n    ret, err := FindPoint(ctx, exec, o.UserID)\n    if err != nil {\n        return err\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u66f4\u65b0\n    *o = *ret\n    return nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_64","title":"\u89e3\u8aac","text":"<ul> <li>\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3:</li> <li> <p><code>Reload</code>\u306f\u3001\u73fe\u5728\u306e<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u6700\u65b0\u72b6\u614b\u3067\u66f4\u65b0\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30c7\u30fc\u30bf\u306e\u518d\u53d6\u5f97:</p> </li> <li> <p><code>FindPoint</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\uff08<code>UserID</code>\uff09\u3092\u5143\u306b\u30c7\u30fc\u30bf\u3092\u518d\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u66f4\u65b0:</p> </li> <li>\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3067\u73fe\u5728\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#reloadall","title":"<code>ReloadAll</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac","text":"<pre><code>func (o *PointSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {\n    if o == nil || len(*o) == 0 {\n        return nil\n    }\n\n    slice := PointSlice{}\n    var args []interface{}\n    for _, obj := range *o {\n        pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), pointPrimaryKeyMapping)\n        args = append(args, pkeyArgs...)\n    }\n\n    sql := \"SELECT `points`.* FROM `points` WHERE \" +\n        strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, pointPrimaryKeyColumns, len(*o))\n\n    q := queries.Raw(sql, args...)\n\n    err := q.Bind(ctx, exec, &amp;slice)\n    if err != nil {\n        return errors.Wrap(err, \"models: unable to reload all in PointSlice\")\n    }\n\n    *o = slice\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_65","title":"\u89e3\u8aac","text":"<ul> <li>\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3:</li> <li> <p><code>ReloadAll</code>\u306f\u3001<code>PointSlice</code>\u5185\u306e\u5168\u3066\u306e<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u6700\u65b0\u72b6\u614b\u3067\u66f4\u65b0\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u7a7a\u30c1\u30a7\u30c3\u30af:</p> </li> <li> <p>\u30b9\u30e9\u30a4\u30b9\u304c<code>nil</code>\u307e\u305f\u306f\u7a7a\u306e\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u623b\u308a\u307e\u3059\u3002</p> </li> <li> <p>\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u306e\u53ce\u96c6:</p> </li> <li> <p>\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u306e\u5024\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</p> </li> <li> <p>\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3001\u8907\u6570\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u30c7\u30fc\u30bf\u306e\u30d0\u30a4\u30f3\u30c9:</p> </li> <li> <p>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u65b0\u3057\u3044\u30b9\u30e9\u30a4\u30b9\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u66f4\u65b0:</p> </li> <li>\u73fe\u5728\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3067\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_66","title":"\u4f7f\u7528\u4f8b","text":""},{"location":"DB/model/points.go/#1-upsert","title":"1. Upsert\u306e\u4f7f\u7528\u4f8b","text":"<pre><code>import (\n    \"context\"\n    \"database/sql\"\n\n    \"github.com/volatiletech/sqlboiler/boil\"\n)\n\nfunc upsertPointExample(db *sql.DB) error {\n    ctx := context.Background()\n    exec := boil.ContextExecutor(db)\n\n    point := &amp;Point{\n        UserID: 1,\n        Score: 100,\n    }\n\n    // \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3068\u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\n    updateColumns := boil.Whitelist(\"score\")\n    insertColumns := boil.Whitelist(\"user_id\", \"score\")\n\n    err := point.Upsert(ctx, exec, updateColumns, insertColumns)\n    if err != nil {\n        return err\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_67","title":"\u89e3\u8aac","text":"<ul> <li><code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3001<code>UserID</code>\u3068<code>Score</code>\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li><code>Upsert</code>\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3001<code>score</code>\u30ab\u30e9\u30e0\u3092\u66f4\u65b0\u3057\u3001<code>user_id</code>\u3068<code>score</code>\u30ab\u30e9\u30e0\u3092\u633f\u5165\u3057\u307e\u3059\u3002</li> <li><code>boil.Whitelist</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u5bfe\u8c61\u306e\u30ab\u30e9\u30e0\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#2-delete","title":"2. Delete\u306e\u4f7f\u7528\u4f8b","text":"<pre><code>func deletePointExample(db *sql.DB) error {\n    ctx := context.Background()\n    exec := boil.ContextExecutor(db)\n\n    // \u524a\u9664\u3059\u308bPoint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\n    point, err := FindPoint(ctx, exec, 1) // UserID\u304c1\u306ePoint\u3092\u53d6\u5f97\n    if err != nil {\n        return err\n    }\n\n    // \u524a\u9664\n    _, err = point.Delete(ctx, exec)\n    if err != nil {\n        return err\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_68","title":"\u89e3\u8aac","text":"<ul> <li><code>FindPoint</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u524a\u9664\u5bfe\u8c61\u306e<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li><code>Delete</code>\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u524a\u9664\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#3-reload","title":"3. Reload\u306e\u4f7f\u7528\u4f8b","text":"<pre><code>func reloadPointExample(db *sql.DB) error {\n    ctx := context.Background()\n    exec := boil.ContextExecutor(db)\n\n    // Point\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\n    point, err := FindPoint(ctx, exec, 1)\n    if err != nil {\n        return err\n    }\n\n    // \u30c7\u30fc\u30bf\u3092\u5909\u66f4\uff08\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u72b6\u614b\u3068\u306f\u7570\u306a\u308b\u72b6\u614b\u306b\u3059\u308b\uff09\n    point.Score = 200\n\n    // \u30ea\u30ed\u30fc\u30c9\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u6700\u65b0\u72b6\u614b\u306b\u66f4\u65b0\n    err = point.Reload(ctx, exec)\n    if err != nil {\n        return err\n    }\n\n    // \u3053\u3053\u3067point.Score\u306f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5024\u306b\u623b\u308a\u307e\u3059\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_69","title":"\u89e3\u8aac","text":"<ul> <li>\u307e\u305a<code>FindPoint</code>\u3067<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u30ed\u30fc\u30ab\u30eb\u3067<code>Score</code>\u3092\u5909\u66f4\u3057\u307e\u3059\u3002</li> <li><code>Reload</code>\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u6700\u65b0\u72b6\u614b\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_70","title":"\u30b3\u30fc\u30c9\u89e3\u8aac\u3068\u4f7f\u7528\u4f8b","text":"<p>\u4ee5\u4e0b\u306b\u63d0\u4f9b\u3055\u308c\u305fGo\u8a00\u8a9e\u306e\u30b3\u30fc\u30c9\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u304a\u3051\u308b<code>Point</code>\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u306e\u5b58\u5728\u78ba\u8a8d\u3092\u884c\u3046\u95a2\u6570\u3067\u3059\u3002\u7279\u306b\u3001<code>PointExists</code>\u95a2\u6570\u3068\u3001\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u30ec\u30b7\u30fc\u30d0\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3042\u308b<code>Exists</code>\u95a2\u6570\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u89e3\u8aac\u3057\u3001\u958b\u767a\u8005\u5411\u3051\u306e\u4f7f\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#pointexists","title":"<code>PointExists</code>\u95a2\u6570\u306e\u8a73\u7d30\u89e3\u8aac","text":"<pre><code>// PointExists \u306f\u3001\u6307\u5b9a\u3055\u308c\u305f userID \u3092\u6301\u3064 Point \u884c\u304c\u5b58\u5728\u3059\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\nfunc PointExists(ctx context.Context, exec boil.ContextExecutor, userID uint) (bool, error) {\n    var exists bool\n    sql := \"select exists(select 1 from `points` where `user_id`=? limit 1)\"\n\n    // \u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u304c\u6709\u52b9\u306a\u5834\u5408\u306f\u3001SQL\u30af\u30a8\u30ea\u3068\u5f15\u6570\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, sql)\n        fmt.Fprintln(writer, userID)\n    }\n\n    // \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n    row := exec.QueryRowContext(ctx, sql, userID)\n\n    // \u30af\u30a8\u30ea\u306e\u7d50\u679c\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3001exists \u5909\u6570\u306b\u4ee3\u5165\u3057\u307e\u3059\u3002\n    err := row.Scan(&amp;exists)\n    if err != nil {\n        return false, errors.Wrap(err, \"models: unable to check if points exists\")\n    }\n\n    // \u5b58\u5728\u3059\u308b\u5834\u5408\u306f true\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f false \u3092\u8fd4\u3057\u307e\u3059\u3002\n    return exists, nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_71","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u76ee\u7684: \u4e0e\u3048\u3089\u308c\u305f<code>userID</code>\u3092\u6301\u3064<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5185\u306b\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30d1\u30e9\u30e1\u30fc\u30bf:</p> </li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u5236\u5fa1\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\uff08\u901a\u5e38\u306f<code>*sql.DB</code>\u3084<code>*sql.Tx</code>\uff09\u3002</li> <li> <p><code>userID uint</code>: \u5b58\u5728\u78ba\u8a8d\u3092\u884c\u3044\u305f\u3044<code>Point</code>\u306e<code>userID</code>\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li><code>exists</code>\u3068\u3044\u3046\u30d6\u30fc\u30eb\u5024\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002\u3053\u306e\u5909\u6570\u306b\u30af\u30a8\u30ea\u306e\u7d50\u679c\uff08\u30ec\u30b3\u30fc\u30c9\u306e\u5b58\u5728\u6709\u7121\uff09\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002</li> <li>SQL\u30af\u30a8\u30ea\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u306e\u30af\u30a8\u30ea\u306f\u3001<code>points</code>\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u6307\u5b9a\u3055\u308c\u305f<code>user_id</code>\u306b\u4e00\u81f4\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002<ul> <li><code>select exists(select 1 from</code>points<code>where</code>user_id<code>=? limit 1)</code></li> <li><code>exists</code>\u95a2\u6570\u306f\u3001\u30b5\u30d6\u30af\u30a8\u30ea\u306e\u7d50\u679c\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306b<code>true</code>\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul> </li> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u304c\u6709\u52b9\u306a\u5834\u5408\u3001\u5b9f\u884c\u3059\u308bSQL\u30af\u30a8\u30ea\u3068\u5f15\u6570\u3092\u6a19\u6e96\u51fa\u529b\u307e\u305f\u306f\u30ed\u30b0\u306b\u51fa\u529b\u3057\u307e\u3059\u3002</li> <li><code>QueryRowContext</code>\u3092\u4f7f\u7528\u3057\u3066\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u306e\u884c\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li><code>row.Scan(&amp;exists)</code>\u3067\u3001\u30af\u30a8\u30ea\u306e\u7d50\u679c\u3092<code>exists</code>\u5909\u6570\u306b\u30b9\u30ad\u30e3\u30f3\u3057\u307e\u3059\u3002<ul> <li>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u8a73\u7d30\u306a\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u30e9\u30c3\u30d7\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u6700\u7d42\u7684\u306b\u3001\u5b58\u5728\u78ba\u8a8d\u306e\u7d50\u679c\u3067\u3042\u308b<code>exists</code>\u3068\u30a8\u30e9\u30fc\uff08\u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070<code>nil</code>\uff09\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0:</p> </li> <li>\u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3084\u7d50\u679c\u306e\u30b9\u30ad\u30e3\u30f3\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a73\u7d30\u306b\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#exists","title":"<code>Exists</code>\u30e1\u30bd\u30c3\u30c9\u306e\u8a73\u7d30\u89e3\u8aac","text":"<pre><code>// Exists \u306f\u3001\u73fe\u5728\u306e Point \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5185\u306b\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\nfunc (o *Point) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {\n    return PointExists(ctx, exec, o.UserID)\n}\n</code></pre>"},{"location":"DB/model/points.go/#_72","title":"\u89e3\u8aac","text":"<ul> <li> <p>\u95a2\u6570\u306e\u76ee\u7684: <code>Point</code>\u69cb\u9020\u4f53\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u3001\u81ea\u8eab\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5185\u306b\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30d1\u30e9\u30e1\u30fc\u30bf:</p> </li> <li><code>o *Point</code>: \u30e1\u30bd\u30c3\u30c9\u30ec\u30b7\u30fc\u30d0\u30fc\u3002\u5b58\u5728\u78ba\u8a8d\u3092\u884c\u3044\u305f\u3044<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li> <p><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3002</p> </li> <li> <p>\u51e6\u7406\u306e\u6d41\u308c:</p> </li> <li><code>PointExists</code>\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3001<code>o.UserID</code>\u3092\u6e21\u3057\u3066\u5b58\u5728\u78ba\u8a8d\u3092\u884c\u3044\u307e\u3059\u3002</li> <li> <p><code>PointExists</code>\u95a2\u6570\u306e\u623b\u308a\u5024\uff08\u5b58\u5728\u78ba\u8a8d\u7d50\u679c\u3068\u30a8\u30e9\u30fc\uff09\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30e1\u30ea\u30c3\u30c8:</p> </li> <li>\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3001<code>Point</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u76f4\u63a5\u5b58\u5728\u78ba\u8a8d\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> <li>\u30b3\u30fc\u30c9\u306e\u53ef\u8aad\u6027\u3068\u4f7f\u3044\u3084\u3059\u3055\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#_73","title":"\u4f7f\u7528\u4f8b","text":"<p>\u4ee5\u4e0b\u306b\u3001\u958b\u767a\u8005\u304c\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u3069\u306e\u3088\u3046\u306b\u4f7f\u7528\u3067\u304d\u308b\u304b\u3092\u793a\u3059\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#1-pointexists","title":"1. <code>PointExists</code>\u95a2\u6570\u306e\u4f7f\u7528\u4f8b","text":"<pre><code>import (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n\n    \"github.com/volatiletech/sqlboiler/boil\"\n)\n\nfunc checkPointExists(db *sql.DB, userID uint) error {\n    ctx := context.Background()\n    // boil.ContextExecutor\u306f\u3001*sql.DB\u3084*sql.Tx\u3068\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n    exec := boil.ContextExecutor(db)\n\n    // \u6307\u5b9a\u3055\u308c\u305f userID \u3092\u6301\u3064 Point \u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\n    exists, err := PointExists(ctx, exec, userID)\n    if err != nil {\n        return err\n    }\n\n    if exists {\n        fmt.Printf(\"UserID %d \u306e Point \u30ec\u30b3\u30fc\u30c9\u306f\u5b58\u5728\u3057\u307e\u3059\u3002\\n\", userID)\n    } else {\n        fmt.Printf(\"UserID %d \u306e Point \u30ec\u30b3\u30fc\u30c9\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\\n\", userID)\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_74","title":"\u89e3\u8aac","text":"<ul> <li><code>PointExists</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u7279\u5b9a\u306e<code>userID</code>\u3092\u6301\u3064<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u306e\u5b58\u5728\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> <li>\u7d50\u679c\u306b\u5fdc\u3058\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u9069\u5207\u306b\u884c\u3063\u3066\u3044\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/points.go/#2-exists","title":"2. <code>Exists</code>\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b","text":"<pre><code>func checkPointExistsMethod(db *sql.DB, userID uint) error {\n    ctx := context.Background()\n    exec := boil.ContextExecutor(db)\n\n    // Point \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\uff08\u5b9f\u969b\u306b\u306f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff09\n    point := &amp;Point{\n        UserID: userID,\n    }\n\n    // Point \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u81ea\u4f53\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\n    exists, err := point.Exists(ctx, exec)\n    if err != nil {\n        return err\n    }\n\n    if exists {\n        fmt.Printf(\"UserID %d \u306e Point \u30ec\u30b3\u30fc\u30c9\u306f\u5b58\u5728\u3057\u307e\u3059\u3002\\n\", userID)\n    } else {\n        fmt.Printf(\"UserID %d \u306e Point \u30ec\u30b3\u30fc\u30c9\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\\n\", userID)\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/points.go/#_75","title":"\u89e3\u8aac","text":"<ul> <li><code>Point</code>\u69cb\u9020\u4f53\u306e<code>Exists</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u81ea\u8eab\u306e\u5b58\u5728\u78ba\u8a8d\u3092\u884c\u3044\u307e\u3059\u3002</li> <li><code>PointExists</code>\u95a2\u6570\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u4ee3\u308f\u308a\u306b\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u30b3\u30fc\u30c9\u304c\u3088\u308a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u7684\u306b\u306a\u308a\u307e\u3059\u3002</li> </ul> <p>\u4ee5\u4e0a\u304c<code>PointExists</code>\u95a2\u6570\u3068<code>Exists</code>\u30e1\u30bd\u30c3\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u304a\u3088\u3073\u4f7f\u7528\u4f8b\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u6d3b\u7528\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5185\u306e\u30ec\u30b3\u30fc\u30c9\u306e\u5b58\u5728\u78ba\u8a8d\u3092\u52b9\u7387\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/points.go/#_76","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u306e\u7ba1\u7406:</li> <li><code>sql.DB</code>\u3084<code>sql.Tx</code>\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u3092\u7ba1\u7406\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li> <p>\u9069\u5207\u306a\u63a5\u7d9a\u306e\u30af\u30ed\u30fc\u30ba\u3084\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3044\u3001\u30ea\u30bd\u30fc\u30b9\u30ea\u30fc\u30af\u3092\u9632\u304e\u307e\u3057\u3087\u3046\u3002</p> </li> <li> <p>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u5229\u7528:</p> </li> <li><code>context.Context</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002</li> <li> <p>\u7279\u306b\u9577\u6642\u9593\u5b9f\u884c\u3055\u308c\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30af\u30a8\u30ea\u3067\u306f\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u9069\u5207\u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> </li> <li> <p>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9:</p> </li> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u3001\u5b9f\u884c\u3055\u308c\u308bSQL\u30af\u30a8\u30ea\u3084\u5f15\u6570\u3092\u30ed\u30b0\u306b\u51fa\u529b\u3067\u304d\u307e\u3059\u3002</li> <li> <p>\u30c7\u30d0\u30c3\u30b0\u6642\u306b\u306f<code>boil.DebugMode = true</code>\u3092\u8a2d\u5b9a\u3059\u308b\u304b\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> </li> <li> <p>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0:</p> </li> <li>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u8a73\u7d30\u306a\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u5f97\u308b\u305f\u3081\u306b<code>errors.Wrap</code>\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30a8\u30e9\u30fc\u5185\u5bb9\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u958b\u793a\u3059\u308b\u969b\u306b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/","title":"User\u30e2\u30c7\u30eb\u306e\u8a73\u7d30\u89e3\u8aac\u3068\u5229\u7528\u4f8b","text":"<p>\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001\u63d0\u4f9b\u3055\u308c\u305fGo\u8a00\u8a9e\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u3001\u5168\u3066\u306e\u30b3\u30fc\u30c9\u90e8\u5206\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u307e\u3059\u3002\u958b\u767a\u8005\u304c\u7406\u89e3\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u5229\u7528\u4f8b\u3082\u4ea4\u3048\u306a\u304c\u3089\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001ORM\uff08Object-Relational Mapping\uff09\u30c4\u30fc\u30eb\u3067\u3042\u308bSQLBoiler\u3092\u4f7f\u7528\u3057\u3066\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u3082\u306e\u3067\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e<code>users</code>\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u3059<code>User</code>\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30e2\u30c7\u30eb\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068Go\u8a00\u8a9e\u306e\u9593\u3067\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u305f\u3081\u306e\u3055\u307e\u3056\u307e\u306a\u30e1\u30bd\u30c3\u30c9\u3084\u30d5\u30c3\u30af\uff08hooks\uff09\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_2","title":"\u30d1\u30c3\u30b1\u30fc\u30b8\u5ba3\u8a00\u3068\u30a4\u30f3\u30dd\u30fc\u30c8","text":"<pre><code>package models\n\nimport (\n    // \u6a19\u6e96\u30d1\u30c3\u30b1\u30fc\u30b8\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"reflect\"\n    \"strconv\"\n    \"strings\"\n    \"sync\"\n    \"time\"\n\n    // \u5916\u90e8\u30d1\u30c3\u30b1\u30fc\u30b8\n    \"github.com/friendsofgo/errors\"\n    \"github.com/volatiletech/null/v8\"\n    \"github.com/volatiletech/sqlboiler/v4/boil\"\n    \"github.com/volatiletech/sqlboiler/v4/queries\"\n    \"github.com/volatiletech/sqlboiler/v4/queries/qm\"\n    \"github.com/volatiletech/sqlboiler/v4/queries/qmhelper\"\n    \"github.com/volatiletech/strmangle\"\n)\n</code></pre>"},{"location":"DB/model/users.go/#_3","title":"\u89e3\u8aac","text":"<ul> <li>package models: \u3053\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5c5e\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u3092<code>models</code>\u3068\u3057\u3066\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30e2\u30c7\u30eb\u3092\u542b\u3080\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u3057\u3066\u6a5f\u80fd\u3057\u307e\u3059\u3002</li> <li>\u30a4\u30f3\u30dd\u30fc\u30c8\u30bb\u30af\u30b7\u30e7\u30f3: \u5fc5\u8981\u306a\u6a19\u6e96\u30d1\u30c3\u30b1\u30fc\u30b8\u3084\u5916\u90e8\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</li> <li><code>context</code>, <code>database/sql</code>, <code>fmt</code>\u306a\u3069\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3002</li> <li><code>github.com/volatiletech/sqlboiler/v4/*</code>\u306a\u3069\u306eSQLBoiler\u95a2\u9023\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3002</li> <li><code>github.com/volatiletech/null/v8</code>: Null\u8a31\u5bb9\u306a\u578b\u3092\u6271\u3046\u305f\u3081\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3002</li> </ul>"},{"location":"DB/model/users.go/#user_1","title":"User\u69cb\u9020\u4f53\u306e\u5b9a\u7fa9","text":"<pre><code>type User struct {\n    UserID     uint      `boil:\"user_id\" json:\"user_id\" toml:\"user_id\" yaml:\"user_id\"`\n    FirebaseID string    `boil:\"firebase_id\" json:\"firebase_id\" toml:\"firebase_id\" yaml:\"firebase_id\"`\n    IsAdmin    bool      `boil:\"is_admin\" json:\"is_admin\" toml:\"is_admin\" yaml:\"is_admin\"`\n    CreatedAt  null.Time `boil:\"created_at\" json:\"created_at,omitempty\" toml:\"created_at\" yaml:\"created_at,omitempty\"`\n    UpdatedAt  null.Time `boil:\"updated_at\" json:\"updated_at,omitempty\" toml:\"updated_at\" yaml:\"updated_at,omitempty\"`\n\n    R *userR `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n    L userL  `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n}\n</code></pre>"},{"location":"DB/model/users.go/#_4","title":"\u89e3\u8aac","text":"<ul> <li>User\u69cb\u9020\u4f53: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e<code>users</code>\u30c6\u30fc\u30d6\u30eb\u3092\u8868\u73fe\u3059\u308b\u30e2\u30c7\u30eb\u3002\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u30c6\u30fc\u30d6\u30eb\u306e\u30ab\u30e9\u30e0\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u30bf\u30b0:</li> <li><code>UserID</code>: \u30e6\u30fc\u30b6\u30fc\u306e\u30e6\u30cb\u30fc\u30af\u306aID\u3002\u578b\u306f<code>uint</code>\u3002</li> <li><code>FirebaseID</code>: Firebase\u3067\u306e\u30e6\u30fc\u30b6\u30fcID\u3002\u578b\u306f<code>string</code>\u3002</li> <li><code>IsAdmin</code>: \u7ba1\u7406\u8005\u6a29\u9650\u3092\u6301\u3064\u304b\u3069\u3046\u304b\u3002\u578b\u306f<code>bool</code>\u3002</li> <li><code>CreatedAt</code>: \u30ec\u30b3\u30fc\u30c9\u306e\u4f5c\u6210\u65e5\u6642\u3002\u578b\u306f<code>null.Time</code>\u3067\u3001Null\u5024\u3092\u8a31\u5bb9\u3002</li> <li><code>UpdatedAt</code>: \u30ec\u30b3\u30fc\u30c9\u306e\u66f4\u65b0\u65e5\u6642\u3002\u578b\u306f<code>null.Time</code>\u3067\u3001Null\u5024\u3092\u8a31\u5bb9\u3002</li> <li>\u69cb\u9020\u4f53\u30bf\u30b0:</li> <li><code>boil</code>\u30bf\u30b0: SQLBoiler\u304c\u5229\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30ab\u30e9\u30e0\u540d\u3092\u6307\u5b9a\u3002</li> <li><code>json</code>\u30bf\u30b0: JSON\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba/\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30ad\u30fc\u540d\u3092\u6307\u5b9a\u3002</li> <li><code>toml</code>\u3001<code>yaml</code>\u30bf\u30b0: TOML\u3001YAML\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba/\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306e\u30ad\u30fc\u540d\u3092\u6307\u5b9a\u3002</li> <li><code>omitempty</code>: \u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u30bc\u30ed\u5024\u306e\u5834\u5408\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u6642\u306b\u51fa\u529b\u3057\u306a\u3044\u3002</li> <li>\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a3\u30fc\u30eb\u30c9:</li> <li><code>R *userR</code>: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u683c\u7d0d\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3002\u9045\u5ef6\u30ed\u30fc\u30c9\u3055\u308c\u305f\u95a2\u9023\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u683c\u7d0d\u3055\u308c\u308b\u3002</li> <li><code>L userL</code>: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u306e\u57cb\u3081\u8fbc\u307f\u69cb\u9020\u4f53\u3002</li> </ul>"},{"location":"DB/model/users.go/#_5","title":"\u30ab\u30e9\u30e0\u540d\u306e\u5b9a\u7fa9","text":"<pre><code>var UserColumns = struct {\n    UserID     string\n    FirebaseID string\n    IsAdmin    string\n    CreatedAt  string\n    UpdatedAt  string\n}{\n    UserID:     \"user_id\",\n    FirebaseID: \"firebase_id\",\n    IsAdmin:    \"is_admin\",\n    CreatedAt:  \"created_at\",\n    UpdatedAt:  \"updated_at\",\n}\n</code></pre>"},{"location":"DB/model/users.go/#_6","title":"\u89e3\u8aac","text":"<p><code>UserColumns</code>\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30ab\u30e9\u30e0\u540d\u3092\u4fdd\u6301\u3059\u308b\u5b9a\u6570\u306e\u96c6\u5408\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30b3\u30fc\u30c9\u5185\u3067\u30ab\u30e9\u30e0\u540d\u3092\u76f4\u63a5\u6587\u5b57\u5217\u3068\u3057\u3066\u66f8\u304f\u306e\u3067\u306f\u306a\u304f\u3001\u5b9a\u6570\u3068\u3057\u3066\u53c2\u7167\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_7","title":"\u30c6\u30fc\u30d6\u30eb\u4ed8\u304d\u306e\u30ab\u30e9\u30e0\u540d","text":"<pre><code>var UserTableColumns = struct {\n    UserID     string\n    FirebaseID string\n    IsAdmin    string\n    CreatedAt  string\n    UpdatedAt  string\n}{\n    UserID:     \"users.user_id\",\n    FirebaseID: \"users.firebase_id\",\n    IsAdmin:    \"users.is_admin\",\n    CreatedAt:  \"users.created_at\",\n    UpdatedAt:  \"users.updated_at\",\n}\n</code></pre>"},{"location":"DB/model/users.go/#_8","title":"\u89e3\u8aac","text":"<p><code>UserTableColumns</code>\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u540d\u4ed8\u304d\u306e\u30ab\u30e9\u30e0\u540d\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30af\u30a8\u30ea\u3067\u30c6\u30fc\u30d6\u30eb\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408\u306b\u4fbf\u5229\u3067\u3059\u3002</p>"},{"location":"DB/model/users.go/#where","title":"WHERE\u30d8\u30eb\u30d1\u30fc\u306e\u751f\u6210","text":"<pre><code>var UserWhere = struct {\n    UserID     whereHelperuint\n    FirebaseID whereHelperstring\n    IsAdmin    whereHelperbool\n    CreatedAt  whereHelpernull_Time\n    UpdatedAt  whereHelpernull_Time\n}{\n    UserID:     whereHelperuint{field: \"`users`.`user_id`\"},\n    FirebaseID: whereHelperstring{field: \"`users`.`firebase_id`\"},\n    IsAdmin:    whereHelperbool{field: \"`users`.`is_admin`\"},\n    CreatedAt:  whereHelpernull_Time{field: \"`users`.`created_at`\"},\n    UpdatedAt:  whereHelpernull_Time{field: \"`users`.`updated_at`\"},\n}\n</code></pre>"},{"location":"DB/model/users.go/#_9","title":"\u89e3\u8aac","text":"<p><code>UserWhere</code>\u306f\u3001\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3059\u308b\u969b\u306eWHERE\u53e5\u3092\u7c21\u6f54\u306b\u66f8\u304f\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u3067\u3059\u3002\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u578b\u306e\u30d8\u30eb\u30d1\u30fc\u69cb\u9020\u4f53\u3092\u6301\u3061\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_10","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u5b9a\u7fa9","text":"<pre><code>var UserRels = struct {\n    Point       string\n    CheckinLogs string\n    PointLogs   string\n    Seichies    string\n}{\n    Point:       \"Point\",\n    CheckinLogs: \"CheckinLogs\",\n    PointLogs:   \"PointLogs\",\n    Seichies:    \"Seichies\",\n}\n</code></pre>"},{"location":"DB/model/users.go/#_11","title":"\u89e3\u8aac","text":"<p><code>UserRels</code>\u306f\u3001<code>User</code>\u30e2\u30c7\u30eb\u304c\u6301\u3064\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u540d\u524d\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u3001\u95a2\u9023\u3059\u308b\u4ed6\u306e\u30e2\u30c7\u30eb\u3068\u306e\u95a2\u4fc2\u3092\u8868\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#userr","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u69cb\u9020\u4f53 <code>userR</code>","text":"<pre><code>type userR struct {\n    Point       *Point          `boil:\"Point\" json:\"Point\" toml:\"Point\" yaml:\"Point\"`\n    CheckinLogs CheckinLogSlice `boil:\"CheckinLogs\" json:\"CheckinLogs\" toml:\"CheckinLogs\" yaml:\"CheckinLogs\"`\n    PointLogs   PointLogSlice   `boil:\"PointLogs\" json:\"PointLogs\" toml:\"PointLogs\" yaml:\"PointLogs\"`\n    Seichies    SeichySlice     `boil:\"Seichies\" json:\"Seichies\" toml:\"Seichies\" yaml:\"Seichies\"`\n}\n</code></pre>"},{"location":"DB/model/users.go/#_12","title":"\u89e3\u8aac","text":"<ul> <li>userR\u69cb\u9020\u4f53: <code>User</code>\u30e2\u30c7\u30eb\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u69cb\u9020\u4f53\u3002</li> <li>\u30d5\u30a3\u30fc\u30eb\u30c9:</li> <li><code>Point</code>: \u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b<code>Point</code>\u30e2\u30c7\u30eb\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3002</li> <li><code>CheckinLogs</code>: \u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b<code>CheckinLog</code>\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>PointLogs</code>: \u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b<code>PointLog</code>\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>Seichies</code>: \u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b<code>Seichy</code>\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> </ul>"},{"location":"DB/model/users.go/#_13","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u7528\u306e\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// NewStruct creates a new relationship struct\nfunc (*userR) NewStruct() *userR {\n    return &amp;userR{}\n}\n\nfunc (r *userR) GetPoint() *Point {\n    if r == nil {\n        return nil\n    }\n    return r.Point\n}\n\nfunc (r *userR) GetCheckinLogs() CheckinLogSlice {\n    if r == nil {\n        return nil\n    }\n    return r.CheckinLogs\n}\n\nfunc (r *userR) GetPointLogs() PointLogSlice {\n    if r == nil {\n        return nil\n    }\n    return r.PointLogs\n}\n\nfunc (r *userR) GetSeichies() SeichySlice {\n    if r == nil {\n        return nil\n    }\n    return r.Seichies\n}\n</code></pre>"},{"location":"DB/model/users.go/#_14","title":"\u89e3\u8aac","text":"<ul> <li>NewStruct\u30e1\u30bd\u30c3\u30c9: \u65b0\u3057\u3044<code>userR</code>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002</li> <li>Get\u30e1\u30bd\u30c3\u30c9: \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30b2\u30c3\u30bf\u30fc\u30e1\u30bd\u30c3\u30c9\u3002<code>nil</code>\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u3001\u5b89\u5168\u306b\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#load-userl","title":"Load\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3059\u308b\u69cb\u9020\u4f53 <code>userL</code>","text":"<pre><code>type userL struct{}\n</code></pre>"},{"location":"DB/model/users.go/#_15","title":"\u89e3\u8aac","text":"<ul> <li><code>userL</code>\u69cb\u9020\u4f53\u306f\u7a7a\u3067\u3059\u304c\u3001\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u57cb\u3081\u8fbc\u307f\u3067\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306fSQLBoiler\u304c\u81ea\u52d5\u751f\u6210\u3059\u308b\u3082\u306e\u3067\u3001\u30b3\u30fc\u30c9\u4e0a\u3067\u306f\u5b9f\u88c5\u304c\u7701\u7565\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_16","title":"\u5909\u6570\u3068\u521d\u671f\u5316","text":"<pre><code>var (\n    userAllColumns            = []string{\"user_id\", \"firebase_id\", \"is_admin\", \"created_at\", \"updated_at\"}\n    userColumnsWithoutDefault = []string{\"firebase_id\"}\n    userColumnsWithDefault    = []string{\"user_id\", \"is_admin\", \"created_at\", \"updated_at\"}\n    userPrimaryKeyColumns     = []string{\"user_id\"}\n    userGeneratedColumns      = []string{}\n)\n</code></pre>"},{"location":"DB/model/users.go/#_17","title":"\u89e3\u8aac","text":"<ul> <li>userAllColumns: <code>User</code>\u30e2\u30c7\u30eb\u306e\u5168\u3066\u306e\u30ab\u30e9\u30e0\u540d\u3092\u30ea\u30b9\u30c8\u5316\u3002</li> <li>userColumnsWithoutDefault: \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u305f\u306a\u3044\u30ab\u30e9\u30e0\u540d\u306e\u30ea\u30b9\u30c8\u3002\u633f\u5165\u6642\u306b\u660e\u793a\u7684\u306b\u5024\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</li> <li>userColumnsWithDefault: \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ab\u30e9\u30e0\u540d\u306e\u30ea\u30b9\u30c8\u3002\u633f\u5165\u6642\u306b\u5024\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002</li> <li>userPrimaryKeyColumns: \u4e3b\u30ad\u30fc\u3068\u306a\u308b\u30ab\u30e9\u30e0\u540d\u306e\u30ea\u30b9\u30c8\u3002</li> <li>userGeneratedColumns: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5074\u3067\u751f\u6210\u3055\u308c\u308b\u30ab\u30e9\u30e0\u540d\u306e\u30ea\u30b9\u30c8\u3002\u4eca\u56de\u306f\u7a7a\u3067\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_18","title":"\u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u3068\u30af\u30a8\u30ea\u69cb\u9020\u4f53","text":"<pre><code>type (\n    // UserSlice is an alias for a slice of pointers to User.\n    // This should almost always be used instead of []User.\n    UserSlice []*User\n    // UserHook is the signature for custom User hook methods\n    UserHook func(context.Context, boil.ContextExecutor, *User) error\n\n    userQuery struct {\n        *queries.Query\n    }\n)\n</code></pre>"},{"location":"DB/model/users.go/#_19","title":"\u89e3\u8aac","text":"<ul> <li>UserSlice: <code>*User</code>\u306e\u30b9\u30e9\u30a4\u30b9\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u3002<code>[]User</code>\u3067\u306f\u306a\u304f<code>UserSlice</code>\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002</li> <li>UserHook: \u30ab\u30b9\u30bf\u30e0\u30d5\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u5b9a\u7fa9\u3059\u308b\u95a2\u6570\u578b\u3002</li> <li>userQuery: \u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u69cb\u9020\u4f53\u3067\u3001<code>queries.Query</code>\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_20","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u95a2\u9023\u306e\u5909\u6570","text":"<pre><code>var (\n    userType                 = reflect.TypeOf(&amp;User{})\n    userMapping              = queries.MakeStructMapping(userType)\n    userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)\n    userInsertCacheMut       sync.RWMutex\n    userInsertCache          = make(map[string]insertCache)\n    userUpdateCacheMut       sync.RWMutex\n    userUpdateCache          = make(map[string]updateCache)\n    userUpsertCacheMut       sync.RWMutex\n    userUpsertCache          = make(map[string]insertCache)\n)\n</code></pre>"},{"location":"DB/model/users.go/#_21","title":"\u89e3\u8aac","text":"<ul> <li>\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u30de\u30c3\u30d4\u30f3\u30b0:</li> <li><code>userType</code>: <code>User</code>\u69cb\u9020\u4f53\u306e\u578b\u60c5\u5831\u3092\u4fdd\u6301\u3002</li> <li><code>userMapping</code>: <code>User</code>\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u751f\u6210\u3002</li> <li><code>userPrimaryKeyMapping</code>: \u4e3b\u30ad\u30fc\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u751f\u6210\u3002</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9:</li> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\uff08\u633f\u5165\u3001\u66f4\u65b0\u3001\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\uff09\u306e\u969b\u306b\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u3001\u305d\u308c\u3092\u4fdd\u8b77\u3059\u308b\u305f\u3081\u306e\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u3002</li> </ul>"},{"location":"DB/model/users.go/#_22","title":"\u305d\u306e\u4ed6\u306e\u5909\u6570\u3068\u4f9d\u5b58\u6027\u306e\u5f37\u5236","text":"<pre><code>var (\n    // Force time package dependency for automated UpdatedAt/CreatedAt.\n    _ = time.Second\n    // Force qmhelper dependency for where clause generation (which doesn't\n    // always happen)\n    _ = qmhelper.Where\n)\n</code></pre>"},{"location":"DB/model/users.go/#_23","title":"\u89e3\u8aac","text":"<p>\u672a\u4f7f\u7528\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u30d3\u30eb\u30c9\u304b\u3089\u6700\u9069\u5316\u3067\u9664\u5916\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3001\u30c0\u30df\u30fc\u3067\u5909\u6570\u306b\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u81ea\u52d5\u7684\u306a<code>UpdatedAt</code>/<code>CreatedAt</code>\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u66f4\u65b0\u3084\u3001<code>qmhelper</code>\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4f9d\u5b58\u6027\u3092\u5f37\u5236\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_24","title":"\u30d5\u30c3\u30af\u95a2\u9023\u306e\u5909\u6570\u3068\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>var userAfterSelectMu sync.Mutex\nvar userAfterSelectHooks []UserHook\n\nvar userBeforeInsertMu sync.Mutex\nvar userBeforeInsertHooks []UserHook\nvar userAfterInsertMu sync.Mutex\nvar userAfterInsertHooks []UserHook\n\nvar userBeforeUpdateMu sync.Mutex\nvar userBeforeUpdateHooks []UserHook\nvar userAfterUpdateMu sync.Mutex\nvar userAfterUpdateHooks []UserHook\n\nvar userBeforeDeleteMu sync.Mutex\nvar userBeforeDeleteHooks []UserHook\nvar userAfterDeleteMu sync.Mutex\nvar userAfterDeleteHooks []UserHook\n\nvar userBeforeUpsertMu sync.Mutex\nvar userBeforeUpsertHooks []UserHook\nvar userAfterUpsertMu sync.Mutex\nvar userAfterUpsertHooks []UserHook\n</code></pre>"},{"location":"DB/model/users.go/#_25","title":"\u89e3\u8aac","text":"<p>\u5404\u7a2e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\uff08Select\u3001Insert\u3001Update\u3001Delete\u3001Upsert\uff09\u306e\u524d\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308b\u30d5\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u3068\u30b9\u30e9\u30a4\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_26","title":"\u30d5\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u4f8b","text":"<pre><code>// doAfterSelectHooks executes all \"after Select\" hooks.\nfunc (o *User) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {\n    if boil.HooksAreSkipped(ctx) {\n        return nil\n    }\n\n    for _, hook := range userAfterSelectHooks {\n        if err := hook(ctx, exec, o); err != nil {\n            return err\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_27","title":"\u89e3\u8aac","text":"<ul> <li>doAfterSelectHooks\u30e1\u30bd\u30c3\u30c9: <code>Select</code>\u64cd\u4f5c\u306e\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308b\u30d5\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u3092\u9806\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</li> <li>\u30d5\u30c3\u30af\u30b9\u30ad\u30c3\u30d7\u306e\u78ba\u8a8d: <code>boil.HooksAreSkipped(ctx)</code>\u3067\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u30d5\u30c3\u30af\u304c\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> <li>\u30d5\u30c3\u30af\u306e\u5b9f\u884c: \u767b\u9332\u3055\u308c\u305f\u5168\u3066\u306e\u30d5\u30c3\u30af\u3092\u9806\u306b\u5b9f\u884c\u3057\u3001\u30a8\u30e9\u30fc\u304c\u3042\u308c\u3070\u5373\u5ea7\u306b\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_28","title":"\u5229\u7528\u4f8b","text":""},{"location":"DB/model/users.go/#_29","title":"\u30e6\u30fc\u30b6\u30fc\u306e\u633f\u5165","text":"<pre><code>func createUser(exec boil.ContextExecutor, firebaseID string, isAdmin bool) error {\n    user := &amp;User{\n        FirebaseID: firebaseID,\n        IsAdmin:    isAdmin,\n    }\n\n    err := user.Insert(context.Background(), exec, boil.Infer())\n    if err != nil {\n        return fmt.Errorf(\"\u30e6\u30fc\u30b6\u30fc\u306e\u633f\u5165\u306b\u5931\u6557\u3057\u307e\u3057\u305f: %w\", err)\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_30","title":"\u89e3\u8aac","text":"<ul> <li>createUser\u95a2\u6570: \u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3057\u307e\u3059\u3002</li> <li>\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210: <code>FirebaseID</code>\u3068<code>IsAdmin</code>\u3092\u8a2d\u5b9a\u3057\u3066\u3001<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3002</li> <li>\u30e6\u30fc\u30b6\u30fc\u306e\u633f\u5165: <code>Insert</code>\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002<code>boil.Infer()</code>\u3092\u4f7f\u7528\u3057\u3066\u3001\u81ea\u52d5\u7684\u306b\u30ab\u30e9\u30e0\u3092\u63a8\u8ad6\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_31","title":"\u30e6\u30fc\u30b6\u30fc\u306e\u53d6\u5f97","text":"<pre><code>func getUserByID(exec boil.ContextExecutor, userID uint) (*User, error) {\n    user, err := FindUser(context.Background(), exec, userID)\n    if err != nil {\n        if errors.Cause(err) == sql.ErrNoRows {\n            return nil, fmt.Errorf(\"\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n        }\n        return nil, fmt.Errorf(\"\u30e6\u30fc\u30b6\u30fc\u306e\u691c\u7d22\u306b\u5931\u6557\u3057\u307e\u3057\u305f: %w\", err)\n    }\n\n    return user, nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_32","title":"\u89e3\u8aac","text":"<ul> <li>getUserByID\u95a2\u6570: <code>user_id</code>\u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u30e6\u30fc\u30b6\u30fc\u306e\u691c\u7d22: <code>FindUser</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u3092\u691c\u7d22\u3057\u307e\u3059\u3002</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0: \u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3084\u3001\u4ed6\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u9069\u5207\u306b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_33","title":"\u30e6\u30fc\u30b6\u30fc\u306e\u66f4\u65b0","text":"<pre><code>func updateUserIsAdmin(exec boil.ContextExecutor, userID uint, isAdmin bool) error {\n    user, err := getUserByID(exec, userID)\n    if err != nil {\n        return err\n    }\n\n    user.IsAdmin = isAdmin\n\n    _, err = user.Update(context.Background(), exec, boil.Infer())\n    if err != nil {\n        return fmt.Errorf(\"\u30e6\u30fc\u30b6\u30fc\u306e\u66f4\u65b0\u306b\u5931\u6557\u3057\u307e\u3057\u305f: %w\", err)\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_34","title":"\u89e3\u8aac","text":"<ul> <li>updateUserIsAdmin\u95a2\u6570: \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u306e<code>IsAdmin</code>\u30d5\u30e9\u30b0\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30e6\u30fc\u30b6\u30fc\u306e\u53d6\u5f97: <code>getUserByID</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\u3002</li> <li>\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u66f4\u65b0: <code>IsAdmin</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u66f4\u65b0\u3002</li> <li>\u30e6\u30fc\u30b6\u30fc\u306e\u66f4\u65b0: <code>Update</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u5909\u66f4\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3002</li> </ul>"},{"location":"DB/model/users.go/#_35","title":"\u30e6\u30fc\u30b6\u30fc\u306e\u524a\u9664","text":"<pre><code>func deleteUser(exec boil.ContextExecutor, userID uint) error {\n    user, err := getUserByID(exec, userID)\n    if err != nil {\n        return err\n    }\n\n    _, err = user.Delete(context.Background(), exec)\n    if err != nil {\n        return fmt.Errorf(\"\u30e6\u30fc\u30b6\u30fc\u306e\u524a\u9664\u306b\u5931\u6557\u3057\u307e\u3057\u305f: %w\", err)\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_36","title":"\u89e3\u8aac","text":"<ul> <li>deleteUser\u95a2\u6570: \u6307\u5b9a\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002</li> <li>\u30e6\u30fc\u30b6\u30fc\u306e\u53d6\u5f97: \u524a\u9664\u524d\u306b\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\u3057\u3066\u5b58\u5728\u3092\u78ba\u8a8d\u3002</li> <li>\u30e6\u30fc\u30b6\u30fc\u306e\u524a\u9664: <code>Delete</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u524a\u9664\u3002</li> </ul>"},{"location":"DB/model/users.go/#adduserhook","title":"AddUserHook\u95a2\u6570","text":"<pre><code>// AddUserHook\u306f\u3001\u3059\u3079\u3066\u306e\u5c06\u6765\u306e\u64cd\u4f5c\u306b\u5bfe\u3057\u3066\u30d5\u30c3\u30af\u95a2\u6570\u3092\u767b\u9332\u3057\u307e\u3059\u3002\nfunc AddUserHook(hookPoint boil.HookPoint, userHook UserHook) {\n    switch hookPoint {\n    case boil.AfterSelectHook:\n        userAfterSelectMu.Lock()\n        userAfterSelectHooks = append(userAfterSelectHooks, userHook)\n        userAfterSelectMu.Unlock()\n    // \u4ed6\u306e\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306e\u5834\u5408\u3082\u540c\u69d8\n    // ...\n    }\n}\n</code></pre>"},{"location":"DB/model/users.go/#_37","title":"\u8aac\u660e","text":"<p><code>AddUserHook</code>\u95a2\u6570\u306f\u3001\u7279\u5b9a\u306e\u30bf\u30a4\u30df\u30f3\u30b0\uff08\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\uff09\u3067\u547c\u3073\u51fa\u3055\u308c\u308b\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30d5\u30c3\u30af\u95a2\u6570\u3092\u767b\u9332\u3057\u307e\u3059\u3002\u767b\u9332\u3055\u308c\u305f\u30d5\u30c3\u30af\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u6642\u306b\u81ea\u52d5\u7684\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_38","title":"\u30d5\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u4e00\u89a7","text":"<ul> <li><code>boil.AfterSelectHook</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u306eSELECT\u5f8c</li> <li><code>boil.BeforeInsertHook</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306eINSERT\u524d</li> <li><code>boil.AfterInsertHook</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306eINSERT\u5f8c</li> <li><code>boil.BeforeUpdateHook</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306eUPDATE\u524d</li> <li><code>boil.AfterUpdateHook</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306eUPDATE\u5f8c</li> <li><code>boil.BeforeDeleteHook</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306eDELETE\u524d</li> <li><code>boil.AfterDeleteHook</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306eDELETE\u5f8c</li> <li><code>boil.BeforeUpsertHook</code>: UPSERT\uff08\u66f4\u65b0\u307e\u305f\u306f\u633f\u5165\uff09\u524d</li> <li><code>boil.AfterUpsertHook</code>: UPSERT\u5f8c</li> </ul>"},{"location":"DB/model/users.go/#_39","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>import (\n    \"context\"\n    \"fmt\"\n    \"log\"\n\n    \"github.com/volatiletech/sqlboiler/v4/boil\"\n)\n\n// \u30e6\u30fc\u30b6\u30fc\u306eINSERT\u524d\u306b\u5b9f\u884c\u3055\u308c\u308b\u30d5\u30c3\u30af\u95a2\u6570\u3092\u5b9a\u7fa9\nfunc beforeInsertUserHook(ctx context.Context, exec boil.ContextExecutor, user *User) error {\n    fmt.Println(\"\u30e6\u30fc\u30b6\u30fc\u306e\u633f\u5165\u524d\u51e6\u7406\")\n    // \u4f8b\u3048\u3070\u3001\u633f\u5165\u524d\u306b\u30c7\u30fc\u30bf\u3092\u691c\u8a3c\u3059\u308b\n    if user.Name == \"\" {\n        return fmt.Errorf(\"\u30e6\u30fc\u30b6\u30fc\u540d\u304c\u7a7a\u3067\u3059\")\n    }\n    return nil\n}\n\nfunc main() {\n    // \u30d5\u30c3\u30af\u3092\u767b\u9332\n    AddUserHook(boil.BeforeInsertHook, beforeInsertUserHook)\n\n    // \u30e6\u30fc\u30b6\u30fc\u3092\u65b0\u898f\u4f5c\u6210\n    user := &amp;User{\n        Name: \"\u5c71\u7530\u592a\u90ce\",\n        // \u305d\u306e\u4ed6\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\n    }\n\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\n    err := user.Insert(context.Background(), db, boil.Infer())\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n</code></pre>"},{"location":"DB/model/users.go/#one","title":"One\u95a2\u6570","text":"<pre><code>// One\u306f\u3001\u30af\u30a8\u30ea\u304b\u3089\u5358\u4e00\u306e\u30e6\u30fc\u30b6\u30fc\u30ec\u30b3\u30fc\u30c9\u3092\u8fd4\u3057\u307e\u3059\u3002\nfunc (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error) {\n    o := &amp;User{}\n\n    queries.SetLimit(q.Query, 1)\n\n    err := q.Bind(ctx, exec, o)\n    if err != nil {\n        if errors.Is(err, sql.ErrNoRows) {\n            return nil, sql.ErrNoRows\n        }\n        return nil, errors.Wrap(err, \"models: users\u306eOne\u30af\u30a8\u30ea\u306e\u5b9f\u884c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n\n    if err := o.doAfterSelectHooks(ctx, exec); err != nil {\n        return o, err\n    }\n\n    return o, nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_40","title":"\u8aac\u660e","text":"<p><code>One</code>\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u30af\u30a8\u30ea\u304b\u3089\u5358\u4e00\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u30af\u30a8\u30ea\u306b\u4e00\u81f4\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u304c\u306a\u3044\u5834\u5408\u306f\u3001<code>sql.ErrNoRows</code>\u3092\u8fd4\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_41","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>func main() {\n    ctx := context.Background()\n\n    // \u30e6\u30fc\u30b6\u30fcID\u304c1\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\n    user, err := Users(qm.Where(\"id=?\", 1)).One(ctx, db)\n    if err != nil {\n        if errors.Is(err, sql.ErrNoRows) {\n            fmt.Println(\"\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n        } else {\n            log.Fatal(err)\n        }\n        return\n    }\n\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fc\u540d: %s\\n\", user.Name)\n}\n</code></pre>"},{"location":"DB/model/users.go/#all","title":"All\u95a2\u6570","text":"<pre><code>// All\u306f\u3001\u30af\u30a8\u30ea\u304b\u3089\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u30ec\u30b3\u30fc\u30c9\u3092\u8fd4\u3057\u307e\u3059\u3002\nfunc (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error) {\n    var o []*User\n\n    err := q.Bind(ctx, exec, &amp;o)\n    if err != nil {\n        return nil, errors.Wrap(err, \"models: User\u30b9\u30e9\u30a4\u30b9\u3078\u306e\u3059\u3079\u3066\u306e\u30af\u30a8\u30ea\u7d50\u679c\u306e\u5272\u308a\u5f53\u3066\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n\n    if len(userAfterSelectHooks) != 0 {\n        for _, obj := range o {\n            if err := obj.doAfterSelectHooks(ctx, exec); err != nil {\n                return o, err\n            }\n        }\n    }\n\n    return o, nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_42","title":"\u8aac\u660e","text":"<p><code>All</code>\u95a2\u6570\u306f\u3001\u30af\u30a8\u30ea\u306b\u4e00\u81f4\u3059\u308b\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_43","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>func main() {\n    ctx := context.Background()\n\n    // \u5168\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\n    users, err := Users().All(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, user := range users {\n        fmt.Printf(\"\u30e6\u30fc\u30b6\u30fcID: %d, \u30e6\u30fc\u30b6\u30fc\u540d: %s\\n\", user.ID, user.Name)\n    }\n}\n</code></pre>"},{"location":"DB/model/users.go/#count","title":"Count\u95a2\u6570","text":"<pre><code>// Count\u306f\u3001\u30af\u30a8\u30ea\u5185\u306e\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u30ec\u30b3\u30fc\u30c9\u306e\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\nfunc (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {\n    var count int64\n\n    queries.SetSelect(q.Query, nil)\n    queries.SetCount(q.Query)\n\n    err := q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)\n    if err != nil {\n        return 0, errors.Wrap(err, \"models: users\u884c\u306e\u30ab\u30a6\u30f3\u30c8\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n\n    return count, nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_44","title":"\u8aac\u660e","text":"<p><code>Count</code>\u95a2\u6570\u306f\u3001\u30af\u30a8\u30ea\u306b\u4e00\u81f4\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u30ec\u30b3\u30fc\u30c9\u306e\u7dcf\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_45","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>func main() {\n    ctx := context.Background()\n\n    // \u30e6\u30fc\u30b6\u30fc\u540d\u304c\"\u5c71\u7530\u592a\u90ce\"\u306e\u30e6\u30fc\u30b6\u30fc\u6570\u3092\u53d6\u5f97\n    count, err := Users(qm.Where(\"name=?\", \"\u5c71\u7530\u592a\u90ce\")).Count(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"\u8a72\u5f53\u30e6\u30fc\u30b6\u30fc\u6570: %d\\n\", count)\n}\n</code></pre>"},{"location":"DB/model/users.go/#exists","title":"Exists\u95a2\u6570","text":"<pre><code>// Exists\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u5185\u306b\u884c\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\nfunc (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {\n    var count int64\n\n    queries.SetSelect(q.Query, nil)\n    queries.SetCount(q.Query)\n    queries.SetLimit(q.Query, 1)\n\n    err := q.Query.QueryRowContext(ctx, exec).Scan(&amp;count)\n    if err != nil {\n        return false, errors.Wrap(err, \"models: users\u306e\u5b58\u5728\u78ba\u8a8d\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n\n    return count &gt; 0, nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_46","title":"\u8aac\u660e","text":"<p><code>Exists</code>\u95a2\u6570\u306f\u3001\u30af\u30a8\u30ea\u306b\u4e00\u81f4\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u304c\u30c6\u30fc\u30d6\u30eb\u5185\u306b\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_47","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>func main() {\n    ctx := context.Background()\n\n    // \u30e6\u30fc\u30b6\u30fc\u540d\u304c\"\u5c71\u7530\u592a\u90ce\"\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\n    exists, err := Users(qm.Where(\"name=?\", \"\u5c71\u7530\u592a\u90ce\")).Exists(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    if exists {\n        fmt.Println(\"\u30e6\u30fc\u30b6\u30fc\u306f\u5b58\u5728\u3057\u307e\u3059\")\n    } else {\n        fmt.Println(\"\u30e6\u30fc\u30b6\u30fc\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\")\n    }\n}\n</code></pre>"},{"location":"DB/model/users.go/#_48","title":"\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u95a2\u6570","text":""},{"location":"DB/model/users.go/#point","title":"Point\u95a2\u6570","text":"<pre><code>// Point\u306f\u5916\u90e8\u30ad\u30fc\u306b\u3088\u3063\u3066\u6307\u3057\u793a\u3055\u308c\u305f\u30dd\u30a4\u30f3\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\nfunc (o *User) Point(mods ...qm.QueryMod) pointQuery {\n    queryMods := []qm.QueryMod{\n        qm.Where(\"`user_id` = ?\", o.UserID),\n    }\n\n    queryMods = append(queryMods, mods...)\n\n    return Points(queryMods...)\n}\n</code></pre>"},{"location":"DB/model/users.go/#_49","title":"\u8aac\u660e","text":"<p><code>Point</code>\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f<code>Point</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_50","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>func main() {\n    ctx := context.Background()\n\n    // \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\n    user, err := Users(qm.Where(\"id=?\", 1)).One(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\n    point, err := user.Point().One(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fc\u306e\u30dd\u30a4\u30f3\u30c8: %d\\n\", point.Amount)\n}\n</code></pre>"},{"location":"DB/model/users.go/#checkinlogs","title":"CheckinLogs\u95a2\u6570","text":"<pre><code>// CheckinLogs\u306f\u3001\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3067checkin_log\u306eCheckinLogs\u3092\u3059\u3079\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002\nfunc (o *User) CheckinLogs(mods ...qm.QueryMod) checkinLogQuery {\n    var queryMods []qm.QueryMod\n    if len(mods) != 0 {\n        queryMods = append(queryMods, mods...)\n    }\n\n    queryMods = append(queryMods,\n        qm.Where(\"`checkin_logs`.`user_id`=?\", o.UserID),\n    )\n\n    return CheckinLogs(queryMods...)\n}\n</code></pre>"},{"location":"DB/model/users.go/#_51","title":"\u8aac\u660e","text":"<p><code>CheckinLogs</code>\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f<code>CheckinLog</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_52","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>func main() {\n    ctx := context.Background()\n\n    // \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\n    user, err := Users(qm.Where(\"id=?\", 1)).One(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u30e6\u30fc\u30b6\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u3092\u53d6\u5f97\n    checkinLogs, err := user.CheckinLogs().All(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for _, log := range checkinLogs {\n        fmt.Printf(\"\u65e5\u4ed8: %s, \u30e1\u30c3\u30bb\u30fc\u30b8: %s\\n\", log.Date, log.Message)\n    }\n}\n</code></pre>"},{"location":"DB/model/users.go/#pointlogs","title":"PointLogs\u95a2\u6570","text":"<pre><code>// PointLogs\u306f\u3001\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3067point_log\u306ePointLogs\u3092\u3059\u3079\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002\nfunc (o *User) PointLogs(mods ...qm.QueryMod) pointLogQuery {\n    // \u7701\u7565\uff08\u540c\u69d8\u306e\u69cb\u9020\uff09\n}\n</code></pre>"},{"location":"DB/model/users.go/#_53","title":"\u8aac\u660e","text":"<p><code>PointLogs</code>\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f<code>PointLog</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#seichies","title":"Seichies\u95a2\u6570","text":"<pre><code>// Seichies\u306f\u3001\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3067seichy's Seichies\u3092\u3059\u3079\u3066\u53d6\u5f97\u3057\u307e\u3059\u3002\nfunc (o *User) Seichies(mods ...qm.QueryMod) seichyQuery {\n    // \u7701\u7565\uff08\u540c\u69d8\u306e\u69cb\u9020\uff09\n}\n</code></pre>"},{"location":"DB/model/users.go/#_54","title":"\u8aac\u660e","text":"<p><code>Seichies</code>\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f<code>Seichy</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#loadpoint","title":"LoadPoint\u95a2\u6570","text":"<pre><code>// LoadPoint\u306f\u3001\u5024\u306e\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3092\u884c\u3044\u3001\n// \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8aad\u307f\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\u3053\u308c\u306f1\u5bfe1\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\nfunc (userL) LoadPoint(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {\n    // \u95a2\u6570\u306e\u5185\u5bb9\n}\n</code></pre>"},{"location":"DB/model/users.go/#_55","title":"\u8aac\u660e","text":"<p><code>LoadPoint</code>\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u69cb\u9020\u4f53\u306b\u95a2\u9023\u3059\u308b<code>Point</code>\u30c7\u30fc\u30bf\u3092\u4e8b\u524d\u306b\u30ed\u30fc\u30c9\uff08\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\uff09\u3057\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5f8c\u3067\u95a2\u9023\u30c7\u30fc\u30bf\u3092\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306b\u8ffd\u52a0\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30af\u30a8\u30ea\u3092\u767a\u884c\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_56","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>func main() {\n    ctx := context.Background()\n\n    // \u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\n    users, err := Users().All(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u30dd\u30a4\u30f3\u30c8\u3092\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\n    if err := userL.LoadPoint(ctx, db, false, users, nil); err != nil {\n        log.Fatal(err)\n    }\n\n    // \u30dd\u30a4\u30f3\u30c8\u60c5\u5831\u3092\u8868\u793a\n    for _, user := range users {\n        fmt.Printf(\"\u30e6\u30fc\u30b6\u30fc\u540d: %s, \u30dd\u30a4\u30f3\u30c8: %d\\n\", user.Name, user.R.Point.Amount)\n    }\n}\n</code></pre>"},{"location":"DB/model/users.go/#_57","title":"\u6ce8\u610f\u70b9","text":"<ul> <li>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f7f\u7528: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306b\u306f<code>context.Context</code>\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406: \u30a8\u30e9\u30fc\u306f\u9069\u5207\u306b\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30ed\u30b0\u51fa\u529b\u3084\u30e6\u30fc\u30b6\u30fc\u3078\u306e\u901a\u77e5\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u4e26\u884c\u51e6\u7406: \u30d5\u30c3\u30af\u306e\u767b\u9332\u3084\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u3067\u306f\u3001\u4e26\u884c\u51e6\u7406\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306b\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#loadcheckinlogsloadpointlogs","title":"LoadCheckinLogs\u304a\u3088\u3073LoadPointLogs\u95a2\u6570\u306e\u8a73\u89e3\u3068\u4f7f\u7528\u4f8b","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u30e2\u30c7\u30eb\u306b\u95a2\u9023\u3059\u308b\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u95a2\u6570\u3067\u3042\u308b<code>LoadCheckinLogs</code>\u3068<code>LoadPointLogs</code>\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u3001\u4e00\u5bfe\u591a\uff081-M\uff09\u3084\u591a\u5bfe\u591a\uff08N-M\uff09\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306b\u304a\u3044\u3066\u95a2\u9023\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u30af\u30a8\u30ea\u6570\u3092\u6e1b\u3089\u3057\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5411\u4e0a\u306b\u7e4b\u304c\u308a\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#loadcheckinlogs","title":"LoadCheckinLogs\u95a2\u6570","text":"<pre><code>// LoadCheckinLogs\u306f\u3001\u5024\u306e\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3092\u884c\u3044\u3001\n// \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8aad\u307f\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\n// \u3053\u308c\u306f1-M\u3084N-M\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\nfunc (userL) LoadCheckinLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {\n    var slice []*User\n    var object *User\n\n    if singular {\n        var ok bool\n        object, ok = maybeUser.(*User)\n        if !ok {\n            object = new(User)\n            ok = queries.SetFromEmbeddedStruct(&amp;object, &amp;maybeUser)\n            if !ok {\n                return errors.New(fmt.Sprintf(\"\u57cb\u3081\u8fbc\u307f\u69cb\u9020\u4f53%T\u304b\u3089%T\u3078\u306e\u8a2d\u5b9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f\", object, maybeUser))\n            }\n        }\n    } else {\n        s, ok := maybeUser.(*[]*User)\n        if ok {\n            slice = *s\n        } else {\n            ok = queries.SetFromEmbeddedStruct(&amp;slice, maybeUser)\n            if !ok {\n                return errors.New(fmt.Sprintf(\"\u57cb\u3081\u8fbc\u307f\u69cb\u9020\u4f53%T\u304b\u3089%T\u3078\u306e\u8a2d\u5b9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f\", slice, maybeUser))\n            }\n        }\n    }\n\n    // \u30e6\u30fc\u30b6\u30fcID\u306e\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n    args := make(map[interface{}]struct{})\n    if singular {\n        if object.R == nil {\n            object.R = &amp;userR{}\n        }\n        args[object.UserID] = struct{}{}\n    } else {\n        for _, obj := range slice {\n            if obj.R == nil {\n                obj.R = &amp;userR{}\n            }\n            args[obj.UserID] = struct{}{}\n        }\n    }\n\n    // \u30ed\u30fc\u30c9\u3059\u3079\u304d\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u7d42\u4e86\n    if len(args) == 0 {\n        return nil\n    }\n\n    // \u30e6\u30fc\u30b6\u30fcID\u3092\u30b9\u30e9\u30a4\u30b9\u306b\u5909\u63db\n    argsSlice := make([]interface{}, len(args))\n    i := 0\n    for arg := range args {\n        argsSlice[i] = arg\n        i++\n    }\n\n    // \u30af\u30a8\u30ea\u3092\u4f5c\u6210\n    query := NewQuery(\n        qm.From(`checkin_logs`),\n        qm.WhereIn(`checkin_logs.user_id in ?`, argsSlice...),\n    )\n    if mods != nil {\n        mods.Apply(query)\n    }\n\n    // \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u7d50\u679c\u3092\u53d6\u5f97\n    results, err := query.QueryContext(ctx, e)\n    if err != nil {\n        return errors.Wrap(err, \"checkin_logs\u306e\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n\n    // \u7d50\u679c\u3092\u30d0\u30a4\u30f3\u30c9\n    var resultSlice []*CheckinLog\n    if err = queries.Bind(results, &amp;resultSlice); err != nil {\n        return errors.Wrap(err, \"\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u305fcheckin_logs\u306e\u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30d0\u30a4\u30f3\u30c9\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n\n    // \u30af\u30ed\u30fc\u30ba\u51e6\u7406\n    if err = results.Close(); err != nil {\n        return errors.Wrap(err, \"checkin_logs\u306e\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u4e2d\u306e\u7d50\u679c\u306e\u30af\u30ed\u30fc\u30ba\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n    if err = results.Err(); err != nil {\n        return errors.Wrap(err, \"checkin_logs\u306e\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\")\n    }\n\n    // \u30d5\u30c3\u30af\u306e\u51e6\u7406\n    if len(checkinLogAfterSelectHooks) != 0 {\n        for _, obj := range resultSlice {\n            if err := obj.doAfterSelectHooks(ctx, e); err != nil {\n                return err\n            }\n        }\n    }\n\n    // \u7d50\u679c\u3092\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u4ed8\u3051\u308b\n    if singular {\n        object.R.CheckinLogs = resultSlice\n        for _, foreign := range resultSlice {\n            if foreign.R == nil {\n                foreign.R = &amp;checkinLogR{}\n            }\n            foreign.R.User = object\n        }\n        return nil\n    }\n\n    for _, foreign := range resultSlice {\n        for _, local := range slice {\n            if local.UserID == foreign.UserID {\n                local.R.CheckinLogs = append(local.R.CheckinLogs, foreign)\n                if foreign.R == nil {\n                    foreign.R = &amp;checkinLogR{}\n                }\n                foreign.R.User = local\n                break\n            }\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_58","title":"\u8aac\u660e","text":"<p><code>LoadCheckinLogs</code>\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b<code>CheckinLog</code>\uff08\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\uff09\u3092\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3068\u540c\u6642\u306b\u3001\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u3092\u4e00\u5ea6\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30af\u30a8\u30ea\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_59","title":"\u95a2\u6570\u306e\u5f15\u6570","text":"<ul> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> <li><code>e boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li><code>singular bool</code>: <code>true</code>\u306e\u5834\u5408\u5358\u4e00\u306e\u30e6\u30fc\u30b6\u30fc\u3001<code>false</code>\u306e\u5834\u5408\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u3002</li> <li><code>maybeUser interface{}</code>: \u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>mods queries.Applicator</code>: \u30af\u30a8\u30ea\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\uff08\u30af\u30a8\u30ea\u3092\u4fee\u6b63\u3059\u308b\u305f\u3081\u306e\u3082\u306e\uff09\u3002</li> </ul>"},{"location":"DB/model/users.go/#_60","title":"\u95a2\u6570\u306e\u6d41\u308c","text":"<ol> <li>\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u5224\u5b9a\u3068\u53d6\u5f97:</li> <li><code>singular</code>\u306e\u5024\u306b\u5fdc\u3058\u3066\u3001<code>maybeUser</code>\u304b\u3089\u5358\u4e00\u306e\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li> <p>\u578b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u6b63\u3057\u3044\u578b\u3092\u53d6\u5f97\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30e6\u30fc\u30b6\u30fcID\u306e\u53ce\u96c6:</p> </li> <li> <p>\u30ed\u30fc\u30c9\u3059\u308b\u3079\u304d\u30e6\u30fc\u30b6\u30fc\u306eID\u3092<code>args</code>\u30de\u30c3\u30d7\u306b\u53ce\u96c6\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30e6\u30fc\u30b6\u30fcID\u306e\u30b9\u30e9\u30a4\u30b9\u5316:</p> </li> <li> <p>\u30af\u30a8\u30ea\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u30e6\u30fc\u30b6\u30fcID\u3092\u30b9\u30e9\u30a4\u30b9\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u4f5c\u6210\u3068\u5b9f\u884c:</p> </li> <li><code>checkin_logs</code>\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u3001<code>user_id</code>\u304c\u53ce\u96c6\u3057\u305f\u30e6\u30fc\u30b6\u30fcID\u306b\u542b\u307e\u308c\u308b\u3082\u306e\u3092\u9078\u629e\u3059\u308b\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> <li><code>mods</code>\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30af\u30a8\u30ea\u306b\u9069\u7528\u3057\u307e\u3059\u3002</li> <li> <p>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066\u7d50\u679c\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u7d50\u679c\u306e\u30d0\u30a4\u30f3\u30c9:</p> </li> <li> <p>\u7d50\u679c\u3092<code>CheckinLog</code>\u578b\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3068\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af:</p> </li> <li> <p>\u7d50\u679c\u306e\u30af\u30ed\u30fc\u30ba\u51e6\u7406\u3068\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002</p> </li> <li> <p>\u30d5\u30c3\u30af\u306e\u5b9f\u884c:</p> </li> <li> <p><code>checkinLogAfterSelectHooks</code>\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u3001\u5404<code>CheckinLog</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u7d50\u679c\u306e\u95a2\u9023\u4ed8\u3051:</p> </li> <li>\u5358\u4e00\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u5834\u5408\u306f\u3001\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u306e<code>R.CheckinLogs</code>\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u7d50\u679c\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u5834\u5408\u306f\u3001\u5404<code>CheckinLog</code>\u306e<code>UserID</code>\u3092\u53c2\u7167\u3057\u3066\u3001\u5bfe\u5fdc\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u306e<code>R.CheckinLogs</code>\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> <li>\u9006\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\uff08<code>CheckinLog</code>\u304b\u3089<code>User</code>\u3078\u306e\u53c2\u7167\uff09\u3082\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ol>"},{"location":"DB/model/users.go/#_61","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>func main() {\n    ctx := context.Background()\n\n    // \u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\n    users, err := Users().All(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u30e6\u30fc\u30b6\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u3092\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\n    if err := userL.LoadCheckinLogs(ctx, db, false, users, nil); err != nil {\n        log.Fatal(err)\n    }\n\n    // \u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u3092\u8868\u793a\n    for _, user := range users {\n        fmt.Printf(\"\u30e6\u30fc\u30b6\u30fc\u540d: %s\\n\", user.Name)\n        for _, log := range user.R.CheckinLogs {\n            fmt.Printf(\"  \u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u65e5: %s, \u30e1\u30c3\u30bb\u30fc\u30b8: %s\\n\", log.Date, log.Message)\n        }\n    }\n}\n</code></pre>"},{"location":"DB/model/users.go/#_62","title":"\u8aac\u660e","text":"<p>\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u3092\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002<code>user.R.CheckinLogs</code>\u3092\u901a\u3058\u3066\u3001\u5404\u30e6\u30fc\u30b6\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#loadpointlogs","title":"LoadPointLogs\u95a2\u6570","text":"<pre><code>// LoadPointLogs\u306f\u3001\u5024\u306e\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3092\u884c\u3044\u3001\n// \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8aad\u307f\u8fbc\u307e\u308c\u305f\u69cb\u9020\u4f53\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002\n// \u3053\u308c\u306f1-M\u3084N-M\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\nfunc (userL) LoadPointLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {\n    var slice []*User\n    var object *User\n\n    if singular {\n        var ok bool\n        object, ok = maybeUser.(*User)\n        if !ok {\n            object = new(User)\n            ok = queries.SetFromEmbeddedStruct(&amp;object, &amp;maybeUser)\n            if !ok {\n                return errors.New(fmt.Sprintf(\"\u57cb\u3081\u8fbc\u307f\u69cb\u9020\u4f53%T\u304b\u3089%T\u3078\u306e\u8a2d\u5b9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f\", object, maybeUser))\n            }\n        }\n    } else {\n        s, ok := maybeUser.(*[]*User)\n        if ok {\n            slice = *s\n        } else {\n            ok = queries.SetFromEmbeddedStruct(&amp;slice, maybeUser)\n            if !ok {\n                return errors.New(fmt.Sprintf(\"\u57cb\u3081\u8fbc\u307f\u69cb\u9020\u4f53%T\u304b\u3089%T\u3078\u306e\u8a2d\u5b9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f\", slice, maybeUser))\n            }\n        }\n    }\n\n    // \u30e6\u30fc\u30b6\u30fcID\u306e\u30de\u30c3\u30d7\u3092\u4f5c\u6210\n    args := make(map[interface{}]struct{})\n    if singular {\n        if object.R == nil {\n            object.R = &amp;userR{}\n        }\n        args[object.UserID] = struct{}{}\n    } else {\n        for _, obj := range slice {\n            if obj.R == nil {\n                obj.R = &amp;userR{}\n            }\n            args[obj.UserID] = struct{}{}\n        }\n    }\n\n    // \u30ed\u30fc\u30c9\u3059\u3079\u304d\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u7d42\u4e86\n    if len(args) == 0 {\n        return nil\n    }\n\n    // \u30e6\u30fc\u30b6\u30fcID\u3092\u30b9\u30e9\u30a4\u30b9\u306b\u5909\u63db\n    argsSlice := make([]interface{}, len(args))\n    i := 0\n    for arg := range args {\n        argsSlice[i] = arg\n        i++\n    }\n\n    // \u30af\u30a8\u30ea\u3092\u4f5c\u6210\n    query := NewQuery(\n        qm.From(`point_logs`),\n        qm.WhereIn(`point_logs.user_id in ?`, argsSlice...),\n    )\n    if mods != nil {\n        mods.Apply(query)\n    }\n\n    // \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u7d50\u679c\u3092\u53d6\u5f97\n    results, err := query.QueryContext(ctx, e)\n    if err != nil {\n        return errors.Wrap(err, \"point_logs\u306e\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n\n    // \u7d50\u679c\u3092\u30d0\u30a4\u30f3\u30c9\n    var resultSlice []*PointLog\n    if err = queries.Bind(results, &amp;resultSlice); err != nil {\n        return errors.Wrap(err, \"\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u305fpoint_logs\u306e\u30b9\u30e9\u30a4\u30b9\u3078\u306e\u30d0\u30a4\u30f3\u30c9\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n\n    // \u30af\u30ed\u30fc\u30ba\u51e6\u7406\n    if err = results.Close(); err != nil {\n        return errors.Wrap(err, \"point_logs\u306e\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u4e2d\u306e\u7d50\u679c\u306e\u30af\u30ed\u30fc\u30ba\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    }\n    if err = results.Err(); err != nil {\n        return errors.Wrap(err, \"point_logs\u306e\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\")\n    }\n\n    // \u30d5\u30c3\u30af\u306e\u51e6\u7406\n    if len(pointLogAfterSelectHooks) != 0 {\n        for _, obj := range resultSlice {\n            if err := obj.doAfterSelectHooks(ctx, e); err != nil {\n                return err\n            }\n        }\n    }\n\n    // \u7d50\u679c\u3092\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u9023\u4ed8\u3051\u308b\n    if singular {\n        object.R.PointLogs = resultSlice\n        for _, foreign := range resultSlice {\n            if foreign.R == nil {\n                foreign.R = &amp;pointLogR{}\n            }\n            foreign.R.User = object\n        }\n        return nil\n    }\n\n    for _, foreign := range resultSlice {\n        for _, local := range slice {\n            if local.UserID == foreign.UserID {\n                local.R.PointLogs = append(local.R.PointLogs, foreign)\n                if foreign.R == nil {\n                    foreign.R = &amp;pointLogR{}\n                }\n                foreign.R.User = local\n                break\n            }\n        }\n    }\n\n    return nil\n}\n</code></pre>"},{"location":"DB/model/users.go/#_63","title":"\u8aac\u660e","text":"<p><code>LoadPointLogs</code>\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b<code>PointLog</code>\uff08\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\uff09\u3092\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u95a2\u9023\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u3092\u52b9\u7387\u7684\u306b\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_64","title":"\u95a2\u6570\u306e\u6d41\u308c","text":"<p>\u3053\u306e\u95a2\u6570\u306e\u6d41\u308c\u306f<code>LoadCheckinLogs</code>\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u304c\u3001\u64cd\u4f5c\u5bfe\u8c61\u304c<code>point_logs</code>\u30c6\u30fc\u30d6\u30eb\u3067\u3042\u308a\u3001<code>PointLog</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6271\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_65","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>func main() {\n    ctx := context.Background()\n\n    // \u5358\u4e00\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\n    user, err := Users(qm.Where(\"id = ?\", 1)).One(ctx, db)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u30e6\u30fc\u30b6\u30fc\u306e\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u3092\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\n    if err := userL.LoadPointLogs(ctx, db, true, user, nil); err != nil {\n        log.Fatal(err)\n    }\n\n    // \u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u3092\u8868\u793a\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fc\u540d: %s\\n\", user.Name)\n    for _, log := range user.R.PointLogs {\n        fmt.Printf(\"  \u65e5\u4ed8: %s, \u30dd\u30a4\u30f3\u30c8\u5909\u52d5: %d\\n\", log.Date, log.Change)\n    }\n}\n</code></pre>"},{"location":"DB/model/users.go/#_66","title":"\u8aac\u660e","text":"<p>\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001ID\u304c1\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u3092\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002<code>user.R.PointLogs</code>\u3092\u901a\u3058\u3066\u3001\u30e6\u30fc\u30b6\u30fc\u306e\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_67","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li>\u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u306e\u5229\u70b9: \u30a4\u30fc\u30ac\u30fc\u30ed\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u95a2\u9023\u30c7\u30fc\u30bf\u3092\u4e00\u5ea6\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30af\u30a8\u30ea\u3067\u53d6\u5f97\u3067\u304d\u3001N+1\u554f\u984c\u3092\u9632\u3050\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> <li>\u30e1\u30e2\u30ea\u306e\u4f7f\u7528: \u4e00\u5ea6\u306b\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\u5834\u5408\u3001\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u5897\u52a0\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306e\u307f\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u30af\u30a8\u30ea\u3092\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u5f15\u6570\u306e<code>mods</code>\u306e\u6d3b\u7528: <code>mods</code>\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u30af\u30a8\u30ea\u306b\u30d5\u30a3\u30eb\u30bf\u3084\u30bd\u30fc\u30c8\u306a\u3069\u306e\u6761\u4ef6\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#loadcheckinlogsloadpointlogs_1","title":"<code>LoadCheckinLogs</code>\u3001<code>LoadPointLogs</code>\u95a2\u6570\u307e\u3068\u3081","text":"<p><code>LoadCheckinLogs</code>\u3068<code>LoadPointLogs</code>\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u3068\u95a2\u9023\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u3084\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u3092\u52b9\u7387\u7684\u306b\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u9069\u5207\u306b\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u52b9\u7387\u5316\u306b\u8ca2\u732e\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#loadseichies","title":"<code>LoadSeichies</code> \u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u3068\u5229\u7528\u4f8b","text":"<p><code>LoadSeichies</code> \u95a2\u6570\u306f\u3001Go\u8a00\u8a9e\u306b\u304a\u3051\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306e\u305f\u3081\u306e\u95a2\u6570\u3067\u3042\u308a\u3001\u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u30fc\uff08<code>User</code>\uff09\u306b\u95a2\u9023\u3059\u308b\u300c\u8056\u5730\u300d\uff08<code>Seichies</code>\uff09\u3092\u52b9\u7387\u7684\u306b\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u30011\u5bfe\u591a\uff081-M\uff09\u307e\u305f\u306f\u591a\u5bfe\u591a\uff08N-M\uff09\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u308a\u3001\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3001\u52b9\u7387\u7684\u306a\u691c\u7d22\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u3067\u306f\u3001\u3053\u306e\u95a2\u6570\u306e\u30b3\u30fc\u30c9\u3092\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u3001\u958b\u767a\u8005\u304c\u3069\u306e\u3088\u3046\u306b\u5229\u7528\u3067\u304d\u308b\u304b\u3092\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u4f8b\u3068\u3068\u3082\u306b\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_68","title":"\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (userL) LoadSeichies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error\n</code></pre> <ul> <li><code>ctx context.Context</code>\uff1a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306a\u3069\u306e\u5236\u5fa1\u306b\u4f7f\u7528\u3002</li> <li><code>e boil.ContextExecutor</code>\uff1a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3002\u901a\u5e38\u306f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u3002</li> <li><code>singular bool</code>\uff1a<code>maybeUser</code> \u304c\u5358\u4e00\u306e <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3001\u305d\u308c\u3068\u3082 <code>User</code> \u306e\u30b9\u30e9\u30a4\u30b9\u304b\u3092\u793a\u3059\u30d5\u30e9\u30b0\u3002</li> <li><code>maybeUser interface{}</code>\uff1a<code>User</code> \u578b\u307e\u305f\u306f <code>User</code> \u306e\u30b9\u30e9\u30a4\u30b9\u3002\u30ed\u30fc\u30c7\u30a3\u30f3\u30b0\u5bfe\u8c61\u306e\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> <li><code>mods queries.Applicator</code>\uff1a\u30af\u30a8\u30ea\u3092\u4fee\u6b63\u3059\u308b\u305f\u3081\u306e\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u3002\u6761\u4ef6\u306e\u8ffd\u52a0\u306a\u3069\u306b\u4f7f\u7528\u3002</li> </ul>"},{"location":"DB/model/users.go/#_69","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":""},{"location":"DB/model/users.go/#1","title":"1. \u5909\u6570\u306e\u521d\u671f\u5316","text":"<pre><code>var slice []*User\nvar object *User\n</code></pre> <ul> <li><code>slice</code>\uff1a\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u3002\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u5834\u5408\u306b\u4f7f\u7528\u3002</li> <li><code>object</code>\uff1a\u5358\u4e00\u306e\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\u306b\u4f7f\u7528\u3002</li> </ul>"},{"location":"DB/model/users.go/#2","title":"2. \u5358\u4e00\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u8907\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u306e\u5224\u5b9a","text":"<pre><code>if singular {\n    // \u5358\u4e00\u306e\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\n    var ok bool\n    object, ok = maybeUser.(*User)\n    if !ok {\n        object = new(User)\n        ok = queries.SetFromEmbeddedStruct(&amp;object, &amp;maybeUser)\n        if !ok {\n            return errors.New(fmt.Sprintf(\"failed to set %T from embedded struct %T\", object, maybeUser))\n        }\n    }\n} else {\n    // \u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u306e\u5834\u5408\n    s, ok := maybeUser.(*[]*User)\n    if ok {\n        slice = *s\n    } else {\n        ok = queries.SetFromEmbeddedStruct(&amp;slice, maybeUser)\n        if !ok {\n            return errors.New(fmt.Sprintf(\"failed to set %T from embedded struct %T\", slice, maybeUser))\n        }\n    }\n}\n</code></pre> <ul> <li><code>singular</code> \u30d5\u30e9\u30b0\u306b\u57fa\u3065\u3044\u3066\u3001<code>maybeUser</code> \u3092\u9069\u5207\u306a\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002<ul> <li>\u5358\u4e00\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\uff1a<code>*User</code> \u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3002</li> <li>\u8907\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\uff1a<code>*[]*User</code> \u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3002</li> </ul> </li> <li>\u30ad\u30e3\u30b9\u30c8\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u3001\u57cb\u3081\u8fbc\u307f\u69cb\u9020\u4f53\u304b\u3089\u8a2d\u5b9a\u3092\u8a66\u307f\u307e\u3059\u3002</li> <li>\u30ad\u30e3\u30b9\u30c8\u3084\u8a2d\u5b9a\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#3-args","title":"3. <code>args</code> \u306e\u6e96\u5099","text":"<pre><code>args := make(map[interface{}]struct{})\nif singular {\n    if object.R == nil {\n        object.R = &amp;userR{}\n    }\n    args[object.UserID] = struct{}{}\n} else {\n    for _, obj := range slice {\n        if obj.R == nil {\n            obj.R = &amp;userR{}\n        }\n        args[obj.UserID] = struct{}{}\n    }\n}\n</code></pre> <ul> <li><code>args</code>\uff1a\u30e6\u30fc\u30b6\u30fcID\u3092\u30ad\u30fc\u3068\u3059\u308b\u30de\u30c3\u30d7\u3002\u91cd\u8907\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u30de\u30c3\u30d7\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002</li> <li>\u5358\u4e00\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\uff1a<ul> <li><code>object.R</code> \u304c <code>nil</code> \u306e\u5834\u5408\u3001\u65b0\u3057\u304f\u521d\u671f\u5316\u3057\u307e\u3059\u3002</li> <li><code>args</code> \u306b <code>object.UserID</code> \u3092\u8ffd\u52a0\u3002</li> </ul> </li> <li>\u8907\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\uff1a<ul> <li>\u5404 <code>obj</code> \u306b\u5bfe\u3057\u3066\u3001<code>R</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u521d\u671f\u5316\u3002</li> <li><code>args</code> \u306b\u5404 <code>obj.UserID</code> \u3092\u8ffd\u52a0\u3002</li> </ul> </li> </ul>"},{"location":"DB/model/users.go/#4-args","title":"4. <code>args</code> \u306e\u5185\u5bb9\u78ba\u8a8d","text":"<pre><code>if len(args) == 0 {\n    return nil\n}\n</code></pre> <ul> <li><code>args</code> \u304c\u7a7a\u306e\u5834\u5408\u3001\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u304c\u306a\u3044\u305f\u3081\u3001\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#5","title":"5. \u30af\u30a8\u30ea\u306e\u4f5c\u6210","text":"<pre><code>argsSlice := make([]interface{}, len(args))\ni := 0\nfor arg := range args {\n    argsSlice[i] = arg\n    i++\n}\n\nquery := NewQuery(\n    qm.From(`seichies`),\n    qm.WhereIn(`seichies.user_id in ?`, argsSlice...),\n)\nif mods != nil {\n    mods.Apply(query)\n}\n</code></pre> <ul> <li><code>args</code> \u306e\u30ad\u30fc\u3092\u30b9\u30e9\u30a4\u30b9 <code>argsSlice</code> \u306b\u5909\u63db\u3002<code>WhereIn</code> \u30af\u30a8\u30ea\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u30d3\u30eb\u30c0\u30fc\u3092\u4f7f\u7528\u3057\u3066\u3001<code>seichies</code> \u30c6\u30fc\u30d6\u30eb\u304b\u3089 <code>user_id</code> \u304c <code>argsSlice</code> \u306b\u542b\u307e\u308c\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u9078\u629e\u3059\u308b\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3002</li> <li><code>mods</code> \u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30af\u30a8\u30ea\u306b\u9069\u7528\u3002</li> </ul>"},{"location":"DB/model/users.go/#6","title":"6. \u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u53d6\u5f97","text":"<pre><code>results, err := query.QueryContext(ctx, e)\nif err != nil {\n    return errors.Wrap(err, \"failed to eager load seichies\")\n}\n\nvar resultSlice []*Seichy\nif err = queries.Bind(results, &amp;resultSlice); err != nil {\n    return errors.Wrap(err, \"failed to bind eager loaded slice seichies\")\n}\n\nif err = results.Close(); err != nil {\n    return errors.Wrap(err, \"failed to close results in eager load on seichies\")\n}\nif err = results.Err(); err != nil {\n    return errors.Wrap(err, \"error occurred during iteration of eager loaded relations for seichies\")\n}\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3002</li> <li>\u7d50\u679c\u3092 <code>resultSlice</code> \u306b\u30d0\u30a4\u30f3\u30c9\u3002</li> <li>\u7d50\u679c\u30bb\u30c3\u30c8\u3092\u9589\u3058\u3001\u30a8\u30e9\u30fc\u3092\u78ba\u8a8d\u3002</li> </ul>"},{"location":"DB/model/users.go/#7","title":"7. \u30d5\u30c3\u30af\u306e\u51e6\u7406","text":"<pre><code>if len(seichyAfterSelectHooks) != 0 {\n    for _, obj := range resultSlice {\n        if err := obj.doAfterSelectHooks(ctx, e); err != nil {\n            return err\n        }\n    }\n}\n</code></pre> <ul> <li><code>seichyAfterSelectHooks</code> \u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u3001\u5404 <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3002</li> </ul>"},{"location":"DB/model/users.go/#8","title":"8. \u7d50\u679c\u306e\u30de\u30c3\u30d4\u30f3\u30b0","text":"<ul> <li>\u5358\u4e00\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\uff1a</li> </ul> <pre><code>if singular {\n    object.R.Seichies = resultSlice\n    for _, foreign := range resultSlice {\n        if foreign.R == nil {\n            foreign.R = &amp;seichyR{}\n        }\n        foreign.R.User = object\n    }\n    return nil\n}\n</code></pre> <ul> <li><code>object.R.Seichies</code> \u306b\u7d50\u679c\u3092\u30bb\u30c3\u30c8\u3002</li> <li> <p>\u5404 <code>foreign</code>\uff08<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306b\u5bfe\u3057\u3066\u3001\u305d\u306e <code>R.User</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8a2d\u5b9a\u3002</p> </li> <li> <p>\u8907\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\uff1a</p> </li> </ul> <pre><code>for _, foreign := range resultSlice {\n    for _, local := range slice {\n        if local.UserID == foreign.UserID {\n            local.R.Seichies = append(local.R.Seichies, foreign)\n            if foreign.R == nil {\n                foreign.R = &amp;seichyR{}\n            }\n            foreign.R.User = local\n            break\n        }\n    }\n}\n</code></pre> <ul> <li>\u5404 <code>foreign</code>\uff08<code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306b\u5bfe\u3057\u3066\u3001\u5bfe\u5fdc\u3059\u308b <code>local</code>\uff08<code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u63a2\u7d22\u3002</li> <li><code>UserID</code> \u304c\u4e00\u81f4\u3059\u308b\u5834\u5408\u3001<code>local.R.Seichies</code> \u306b <code>foreign</code> \u3092\u8ffd\u52a0\u3002</li> <li><code>foreign.R.User</code> \u3092 <code>local</code> \u306b\u8a2d\u5b9a\u3002</li> </ul>"},{"location":"DB/model/users.go/#9","title":"9. \u7d42\u4e86\u51e6\u7406","text":"<pre><code>return nil\n</code></pre> <ul> <li>\u6b63\u5e38\u306b\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u305f\u5834\u5408\u3001<code>nil</code> \u3092\u8fd4\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_70","title":"\u958b\u767a\u8005\u5411\u3051\u5229\u7528\u4f8b","text":"<p>\u4ee5\u4e0b\u306b\u3001<code>LoadSeichies</code> \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u300c\u8056\u5730\u300d\u3092\u30ed\u30fc\u30c9\u3059\u308b\u5177\u4f53\u7684\u306a\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_71","title":"\u5358\u4e00\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u5834\u5408","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n    \"github.com/volatiletech/sqlboiler/boil\"\n    \"github.com/volatiletech/sqlboiler/queries/qm\"\n)\n\nfunc main() {\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\n    db, err := sql.Open(\"mysql\", \"user:password@/dbname\")\n    if err != nil {\n        panic(err)\n    }\n    defer db.Close()\n\n    // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n    ctx := context.Background()\n\n    // \u30e6\u30fc\u30b6\u30fc\u306e\u53d6\u5f97\n    user, err := Users(qm.Where(\"id = ?\", 1)).One(ctx, db)\n    if err != nil {\n        panic(err)\n    }\n\n    // \u95a2\u9023\u3059\u308b\u8056\u5730\u3092\u30ed\u30fc\u30c9\n    err = user.LoadSeichies(ctx, db, true, user, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    // \u7d50\u679c\u306e\u8868\u793a\n    fmt.Printf(\"User: %s\\n\", user.Name)\n    for _, seichy := range user.R.Seichies {\n        fmt.Printf(\"Seichy: %s\\n\", seichy.Title)\n    }\n}\n</code></pre> <ul> <li>\u30e6\u30fc\u30b6\u30fcID\u304c1\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3002</li> <li><code>LoadSeichies</code> \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u8056\u5730\u3092\u30ed\u30fc\u30c9\u3002</li> <li>\u30ed\u30fc\u30c9\u3055\u308c\u305f\u8056\u5730\u3092\u51fa\u529b\u3002</li> </ul>"},{"location":"DB/model/users.go/#_72","title":"\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u5834\u5408","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n    \"github.com/volatiletech/sqlboiler/boil\"\n    \"github.com/volatiletech/sqlboiler/queries/qm\"\n)\n\nfunc main() {\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u63a5\u7d9a\n    db, err := sql.Open(\"mysql\", \"user:password@/dbname\")\n    if err != nil {\n        panic(err)\n    }\n    defer db.Close()\n\n    // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n    ctx := context.Background()\n\n    // \u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u53d6\u5f97\n    users, err := Users(qm.Where(\"active = ?\", true)).All(ctx, db)\n    if err != nil {\n        panic(err)\n    }\n\n    // \u95a2\u9023\u3059\u308b\u8056\u5730\u3092\u30ed\u30fc\u30c9\n    var userL userL\n    err = userL.LoadSeichies(ctx, db, false, &amp;users, nil)\n    if err != nil {\n        panic(err)\n    }\n\n    // \u7d50\u679c\u306e\u8868\u793a\n    for _, user := range users {\n        fmt.Printf(\"User: %s\\n\", user.Name)\n        for _, seichy := range user.R.Seichies {\n            fmt.Printf(\"  Seichy: %s\\n\", seichy.Title)\n        }\n    }\n}\n</code></pre> <ul> <li>\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\u3002</li> <li><code>LoadSeichies</code> \u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u5404\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u8056\u5730\u3092\u30ed\u30fc\u30c9\u3002</li> <li>\u5404\u30e6\u30fc\u30b6\u30fc\u3068\u305d\u306e\u8056\u5730\u3092\u51fa\u529b\u3002</li> </ul>"},{"location":"DB/model/users.go/#_73","title":"\u30af\u30a8\u30ea\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u3092\u4f7f\u7528\u3057\u305f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba","text":"<pre><code>// \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u8ffd\u52a0\nmods := qm.Where(\"seichies.published = ?\", true)\n\n// \u30ed\u30fc\u30c9\u6642\u306b\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u3092\u9069\u7528\nerr = user.LoadSeichies(ctx, db, true, user, mods)\nif err != nil {\n    panic(err)\n}\n\n// \u516c\u958b\u3055\u308c\u3066\u3044\u308b\u8056\u5730\u306e\u307f\u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\n</code></pre> <ul> <li>\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2 <code>mods</code> \u3092\u5b9a\u7fa9\u3057\u3001\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u8056\u5730\u306e\u307f\u3092\u30ed\u30fc\u30c9\u3059\u308b\u6761\u4ef6\u3092\u8ffd\u52a0\u3002</li> <li><code>LoadSeichies</code> \u95a2\u6570\u306e <code>mods</code> \u5f15\u6570\u306b\u6e21\u3059\u3053\u3068\u3067\u3001\u30af\u30a8\u30ea\u306b\u6761\u4ef6\u3092\u9069\u7528\u3002</li> </ul>"},{"location":"DB/model/users.go/#loadseichies_1","title":"LoadSeichies` \u95a2\u6570\u307e\u3068\u3081","text":"<p><code>LoadSeichies</code> \u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u8056\u5730\u3092\u52b9\u7387\u7684\u306b\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306e\u5f37\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002\u5358\u4e00\u304a\u3088\u3073\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u6a5f\u80fd\u3057\u3001\u30ab\u30b9\u30bf\u30e0\u30af\u30a8\u30ea\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u3092\u4f7f\u7528\u3057\u3066\u7d50\u679c\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u6700\u9069\u5316\u3057\u3001\u95a2\u9023\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u3092\u7c21\u7d20\u5316\u3059\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u95a2\u6570\u3092\u9069\u5207\u306b\u6d3b\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"DB/model/users.go/#setpoint","title":"<code>SetPoint</code> \u95a2\u6570\u3068\u95a2\u9023\u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u3068\u5229\u7528\u4f8b","text":"<p>\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\u3001\u30e6\u30fc\u30b6\u30fc\uff08<code>User</code>\uff09\u3068\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\uff08<code>Point</code>\u3001<code>CheckinLog</code>\u3001<code>PointLog</code>\u3001<code>Seichy</code>\uff09\u3068\u306e\u95a2\u4fc2\u3092\u8a2d\u5b9a\u30fb\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u5404\u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u3068\u3001\u958b\u767a\u8005\u304c\u5229\u7528\u3059\u308b\u969b\u306e\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#1-setpoint","title":"1. <code>SetPoint</code> \u95a2\u6570","text":""},{"location":"DB/model/users.go/#_74","title":"\u8aac\u660e","text":"<pre><code>func (o *User) SetPoint(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Point) error\n</code></pre> <ul> <li>\u76ee\u7684: \u30e6\u30fc\u30b6\u30fc (<code>User</code>) \u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u305f\u30dd\u30a4\u30f3\u30c8 (<code>Point</code>) \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ad\u30e3\u30f3\u30bb\u30eb\u3084\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u5236\u5fa1\u306b\u4f7f\u7528\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3002</li> <li><code>insert bool</code>: <code>true</code> \u306e\u5834\u5408\u3001\u65b0\u3057\u3044 <code>Point</code> \u30ec\u30b3\u30fc\u30c9\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3057\u307e\u3059\u3002<code>false</code> \u306e\u5834\u5408\u3001\u65e2\u5b58\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li><code>related *Point</code>: \u95a2\u9023\u4ed8\u3051\u308b <code>Point</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> <li>\u623b\u308a\u5024: \u30a8\u30e9\u30fc\u60c5\u5831\u3002\u6b63\u5e38\u7d42\u4e86\u306e\u5834\u5408\u306f <code>nil</code>\u3002</li> </ul>"},{"location":"DB/model/users.go/#_75","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ol> <li> <p>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u5909\u6570\u521d\u671f\u5316</p> <pre><code>var err error\n</code></pre> </li> <li> <p><code>insert</code> \u30d5\u30e9\u30b0\u306e\u51e6\u7406</p> <pre><code>if insert {\n    related.UserID = o.UserID\n\n    if err = related.Insert(ctx, exec, boil.Infer()); err != nil {\n        return errors.Wrap(err, \"failed to insert into foreign table\")\n    }\n}\n</code></pre> <ul> <li><code>insert</code> \u304c <code>true</code> \u306e\u5834\u5408:</li> <li><code>related</code>\uff08<code>Point</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e <code>UserID</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u3001<code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e <code>UserID</code> \u3092\u30bb\u30c3\u30c8\u3002</li> <li><code>related.Insert</code> \u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u65b0\u3057\u3044 <code>Point</code> \u30ec\u30b3\u30fc\u30c9\u3092\u633f\u5165\u3002</li> <li>\u633f\u5165\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u3002</li> </ul> </li> <li> <p>\u65e2\u5b58\u30ec\u30b3\u30fc\u30c9\u306e\u66f4\u65b0</p> <pre><code>else {\n    updateQuery := fmt.Sprintf(\n        \"UPDATE `points` SET %s WHERE %s\",\n        strmangle.SetParamNames(\"`\", \"`\", 0, []string{\"user_id\"}),\n        strmangle.WhereClause(\"`\", \"`\", 0, pointPrimaryKeyColumns),\n    )\n    values := []interface{}{o.UserID, related.UserID}\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, updateQuery)\n        fmt.Fprintln(writer, values)\n    }\n    if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {\n        return errors.Wrap(err, \"failed to update foreign table\")\n    }\n\n    related.UserID = o.UserID\n}\n</code></pre> <ul> <li><code>insert</code> \u304c <code>false</code> \u306e\u5834\u5408\uff08\u65e2\u5b58\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u66f4\u65b0\uff09:</li> <li><code>UPDATE</code> \u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u3001<code>points</code> \u30c6\u30fc\u30d6\u30eb\u306e <code>user_id</code> \u3092\u66f4\u65b0\u3002</li> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u5834\u5408\u3001\u30af\u30a8\u30ea\u3068\u5024\u3092\u51fa\u529b\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3002</li> <li><code>related.UserID</code> \u3092\u66f4\u65b0\u3002</li> </ul> </li> <li> <p>\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u8a2d\u5b9a</p> <pre><code>if o.R == nil {\n    o.R = &amp;userR{\n        Point: related,\n    }\n} else {\n    o.R.Point = related\n}\n\nif related.R == nil {\n    related.R = &amp;pointR{\n        User: o,\n    }\n} else {\n    related.R.User = o\n}\n</code></pre> <ul> <li><code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068 <code>Point</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53cc\u65b9\u5411\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u8a2d\u5b9a\u3002</li> <li><code>o.R</code> \u306f <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u683c\u7d0d\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3002</li> <li><code>related.R</code> \u306f <code>Point</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u683c\u7d0d\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3002</li> </ul> </li> <li> <p>\u95a2\u6570\u306e\u7d42\u4e86</p> <pre><code>return nil\n</code></pre> <ul> <li>\u6b63\u5e38\u306b\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u305f\u5834\u5408\u3001<code>nil</code> \u3092\u8fd4\u3059\u3002</li> </ul> </li> </ol>"},{"location":"DB/model/users.go/#_76","title":"\u5229\u7528\u4f8b","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n    \"github.com/volatiletech/sqlboiler/boil\"\n)\n\nfunc main() {\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u306e\u8a2d\u5b9a\n    db, err := sql.Open(\"mysql\", \"user:password@/dbname\")\n    if err != nil {\n        panic(err)\n    }\n    defer db.Close()\n\n    // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n    ctx := context.Background()\n\n    // \u30e6\u30fc\u30b6\u30fc\u306e\u53d6\u5f97\n    user, err := FindUser(ctx, db, 1)\n    if err != nil {\n        panic(err)\n    }\n\n    // \u65b0\u3057\u3044\u30dd\u30a4\u30f3\u30c8\u306e\u4f5c\u6210\n    point := &amp;Point{\n        Points: 100,\n    }\n\n    // \u30dd\u30a4\u30f3\u30c8\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u8a2d\u5b9a\n    err = user.SetPoint(ctx, db, true, point)\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3057\u305f\u3002\")\n}\n</code></pre>"},{"location":"DB/model/users.go/#2-addcheckinlogs","title":"2. <code>AddCheckinLogs</code> \u95a2\u6570","text":""},{"location":"DB/model/users.go/#_77","title":"\u8aac\u660e","text":"<pre><code>func (o *User) AddCheckinLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckinLog) error\n</code></pre> <ul> <li>\u76ee\u7684: \u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\uff08<code>CheckinLog</code>\uff09\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u65b0\u3057\u3044\u30ec\u30b3\u30fc\u30c9\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u633f\u5165\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>related ...*CheckinLog</code>: \u8ffd\u52a0\u3059\u308b <code>CheckinLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53ef\u5909\u9577\u5f15\u6570\u3002</li> <li>\u623b\u308a\u5024: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/users.go/#_78","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ol> <li> <p>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u5909\u6570\u521d\u671f\u5316</p> <pre><code>var err error\n</code></pre> </li> <li> <p>\u95a2\u9023\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u51e6\u7406</p> <pre><code>for _, rel := range related {\n    if insert {\n        rel.UserID = o.UserID\n        if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {\n            return errors.Wrap(err, \"failed to insert into foreign table\")\n        }\n    } else {\n        // \u65e2\u5b58\u306e\u30ec\u30b3\u30fc\u30c9\u306e\u66f4\u65b0\n        // ...\n    }\n}\n</code></pre> <ul> <li>\u5404 <code>CheckinLog</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08<code>rel</code>\uff09\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002</li> <li><code>insert</code> \u304c <code>true</code> \u306e\u5834\u5408\u3001<code>rel.UserID</code> \u3092\u8a2d\u5b9a\u3057\u3001\u65b0\u3057\u3044\u30ec\u30b3\u30fc\u30c9\u3068\u3057\u3066\u633f\u5165\u3002</li> </ul> </li> <li> <p>\u65e2\u5b58\u30ec\u30b3\u30fc\u30c9\u306e\u66f4\u65b0</p> <pre><code>else {\n    updateQuery := fmt.Sprintf(\n        \"UPDATE `checkin_logs` SET %s WHERE %s\",\n        strmangle.SetParamNames(\"`\", \"`\", 0, []string{\"user_id\"}),\n        strmangle.WhereClause(\"`\", \"`\", 0, checkinLogPrimaryKeyColumns),\n    )\n    values := []interface{}{o.UserID, rel.CreatedAt, rel.UserID}\n\n    if boil.IsDebug(ctx) {\n        writer := boil.DebugWriterFrom(ctx)\n        fmt.Fprintln(writer, updateQuery)\n        fmt.Fprintln(writer, values)\n    }\n    if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {\n        return errors.Wrap(err, \"failed to update foreign table\")\n    }\n\n    rel.UserID = o.UserID\n}\n</code></pre> <ul> <li><code>insert</code> \u304c <code>false</code> \u306e\u5834\u5408\u3001\u65e2\u5b58\u306e <code>CheckinLog</code> \u30ec\u30b3\u30fc\u30c9\u306e <code>user_id</code> \u3092\u66f4\u65b0\u3002</li> </ul> </li> <li> <p>\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u306e\u8a2d\u5b9a</p> <pre><code>if o.R == nil {\n    o.R = &amp;userR{\n        CheckinLogs: related,\n    }\n} else {\n    o.R.CheckinLogs = append(o.R.CheckinLogs, related...)\n}\n\nfor _, rel := range related {\n    if rel.R == nil {\n        rel.R = &amp;checkinLogR{\n            User: o,\n        }\n    } else {\n        rel.R.User = o\n    }\n}\n</code></pre> <ul> <li>\u30e6\u30fc\u30b6\u30fc\u3068\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u9593\u306e\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u30b7\u30c3\u30d7\u3092\u8a2d\u5b9a\u3002</li> </ul> </li> <li> <p>\u95a2\u6570\u306e\u7d42\u4e86</p> <pre><code>return nil\n</code></pre> </li> </ol>"},{"location":"DB/model/users.go/#_79","title":"\u5229\u7528\u4f8b","text":"<pre><code>// \u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u306e\u8ffd\u52a0\ncheckinLog := &amp;CheckinLog{\n    CreatedAt: time.Now(),\n    Location:  \"\u6771\u4eac\u99c5\",\n}\n\nerr = user.AddCheckinLogs(ctx, db, true, checkinLog)\nif err != nil {\n    panic(err)\n}\n\nfmt.Println(\"\u30c1\u30a7\u30c3\u30af\u30a4\u30f3\u30ed\u30b0\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\")\n</code></pre>"},{"location":"DB/model/users.go/#3-addpointlogs","title":"3. <code>AddPointLogs</code> \u95a2\u6570","text":""},{"location":"DB/model/users.go/#_80","title":"\u8aac\u660e","text":"<pre><code>func (o *User) AddPointLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PointLog) error\n</code></pre> <ul> <li>\u76ee\u7684: \u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\uff08<code>PointLog</code>\uff09\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf\u306f <code>AddCheckinLogs</code> \u3068\u540c\u69d8\u3002</li> </ul>"},{"location":"DB/model/users.go/#_81","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ul> <li>\u3053\u306e\u95a2\u6570\u306f <code>AddCheckinLogs</code> \u3068\u307b\u307c\u540c\u69d8\u306e\u69cb\u9020\u3092\u6301\u3061\u307e\u3059\u304c\u3001\u5bfe\u8c61\u304c <code>PointLog</code> \u3067\u3042\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002</li> <li>\u30b3\u30fc\u30c9\u306e\u5404\u90e8\u5206\u306f <code>AddCheckinLogs</code> \u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u6a5f\u80fd\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_82","title":"\u5229\u7528\u4f8b","text":"<pre><code>// \u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u306e\u8ffd\u52a0\npointLog := &amp;PointLog{\n    CreatedAt: time.Now(),\n    Points:    50,\n    Reason:    \"\u30df\u30c3\u30b7\u30e7\u30f3\u9054\u6210\",\n}\n\nerr = user.AddPointLogs(ctx, db, true, pointLog)\nif err != nil {\n    panic(err)\n}\n\nfmt.Println(\"\u30dd\u30a4\u30f3\u30c8\u30ed\u30b0\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\")\n</code></pre>"},{"location":"DB/model/users.go/#4-addseichies","title":"4. <code>AddSeichies</code> \u95a2\u6570","text":""},{"location":"DB/model/users.go/#_83","title":"\u8aac\u660e","text":"<pre><code>func (o *User) AddSeichies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Seichy) error\n</code></pre> <ul> <li>\u76ee\u7684: \u30e6\u30fc\u30b6\u30fc\u306b\u95a2\u9023\u3059\u308b\u8056\u5730\uff08<code>Seichy</code>\uff09\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u524d\u8ff0\u306e\u95a2\u6570\u3068\u540c\u69d8\u3002</li> </ul>"},{"location":"DB/model/users.go/#_84","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ul> <li>\u3053\u306e\u95a2\u6570\u3082\u4e0a\u8a18\u306e <code>AddCheckinLogs</code>\u3001<code>AddPointLogs</code> \u3068\u540c\u69d8\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002</li> <li>\u5bfe\u8c61\u304c <code>Seichy</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_85","title":"\u5229\u7528\u4f8b","text":"<pre><code>// \u8056\u5730\u306e\u8ffd\u52a0\nseichy := &amp;Seichy{\n    SeichiID: 123,\n    Name:     \"\u79cb\u8449\u539f\",\n}\n\nerr = user.AddSeichies(ctx, db, true, seichy)\nif err != nil {\n    panic(err)\n}\n\nfmt.Println(\"\u8056\u5730\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\")\n</code></pre>"},{"location":"DB/model/users.go/#5-users","title":"5. <code>Users</code> \u95a2\u6570","text":""},{"location":"DB/model/users.go/#_86","title":"\u8aac\u660e","text":"<pre><code>func Users(mods ...qm.QueryMod) userQuery\n</code></pre> <ul> <li>\u76ee\u7684: \u30e6\u30fc\u30b6\u30fc\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u751f\u6210\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>mods ...qm.QueryMod</code>: \u30af\u30a8\u30ea\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u3002\u30af\u30a8\u30ea\u306b\u6761\u4ef6\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3002</li> </ul>"},{"location":"DB/model/users.go/#_87","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ol> <li> <p>\u30af\u30a8\u30ea\u30e2\u30c7\u30a3\u30d5\u30a1\u30a4\u30a2\u306e\u8a2d\u5b9a</p> <pre><code>mods = append(mods, qm.From(\"`users`\"))\n</code></pre> <ul> <li><code>users</code> \u30c6\u30fc\u30d6\u30eb\u3092\u30af\u30a8\u30ea\u306e\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u751f\u6210</p> <pre><code>q := NewQuery(mods...)\n</code></pre> </li> <li> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u306e SELECT \u5217\u306e\u8a2d\u5b9a</p> <pre><code>if len(queries.GetSelect(q)) == 0 {\n    queries.SetSelect(q, []string{\"`users`.*\"})\n}\n</code></pre> <ul> <li>SELECT \u53e5\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001<code>users</code> \u30c6\u30fc\u30d6\u30eb\u306e\u5168\u3066\u306e\u5217\u3092\u9078\u629e\u3002</li> </ul> </li> <li> <p><code>userQuery</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059</p> <pre><code>return userQuery{q}\n</code></pre> </li> </ol>"},{"location":"DB/model/users.go/#_88","title":"\u5229\u7528\u4f8b","text":"<pre><code>// \u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\nusers, err := Users().All(ctx, db)\nif err != nil {\n    panic(err)\n}\n\nfor _, user := range users {\n    fmt.Println(user.Name)\n}\n</code></pre>"},{"location":"DB/model/users.go/#6-finduser","title":"6. <code>FindUser</code> \u95a2\u6570","text":""},{"location":"DB/model/users.go/#_89","title":"\u8aac\u660e","text":"<pre><code>func FindUser(ctx context.Context, exec boil.ContextExecutor, userID uint, selectCols ...string) (*User, error)\n</code></pre> <ul> <li>\u76ee\u7684: \u6307\u5b9a\u3057\u305f <code>userID</code> \u306e\u30e6\u30fc\u30b6\u30fc\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>userID uint</code>: \u53d6\u5f97\u3057\u305f\u3044\u30e6\u30fc\u30b6\u30fc\u306eID\u3002</li> <li><code>selectCols ...string</code>: \u53d6\u5f97\u3059\u308b\u5217\u3092\u6307\u5b9a\u3002\u7701\u7565\u3057\u305f\u5834\u5408\u3001\u5168\u3066\u306e\u5217\u3092\u53d6\u5f97\u3002</li> </ul>"},{"location":"DB/model/users.go/#_90","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ol> <li> <p>\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316</p> <pre><code>userObj := &amp;User{}\n</code></pre> </li> <li> <p>SELECT \u53e5\u306e\u8a2d\u5b9a</p> <pre><code>sel := \"*\"\nif len(selectCols) &gt; 0 {\n    sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), \",\")\n}\n</code></pre> <ul> <li><code>selectCols</code> \u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070\u3001\u305d\u308c\u3089\u306e\u5217\u306e\u307f\u3092\u53d6\u5f97\u3002</li> </ul> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u4f5c\u6210</p> <pre><code>query := fmt.Sprintf(\n    \"select %s from `users` where `user_id`=?\", sel,\n)\n</code></pre> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u30d0\u30a4\u30f3\u30c9</p> <pre><code>q := queries.Raw(query, userID)\n\nerr := q.Bind(ctx, exec, userObj)\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092 <code>userObj</code> \u306b\u30d0\u30a4\u30f3\u30c9\u3002</li> </ul> </li> <li> <p>\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u3068\u30d5\u30c3\u30af\u306e\u5b9f\u884c</p> <pre><code>if err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        return nil, sql.ErrNoRows\n    }\n    return nil, errors.Wrap(err, \"models: unable to select from users\")\n}\n\nif err = userObj.doAfterSelectHooks(ctx, exec); err != nil {\n    return userObj, err\n}\n</code></pre> <ul> <li>\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001<code>sql.ErrNoRows</code> \u3092\u8fd4\u3059\u3002</li> <li>\u30d5\u30c3\u30af\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5b9f\u884c\u3002</li> </ul> </li> <li> <p>\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059</p> <pre><code>return userObj, nil\n</code></pre> </li> </ol>"},{"location":"DB/model/users.go/#_91","title":"\u5229\u7528\u4f8b","text":"<pre><code>// \u30e6\u30fc\u30b6\u30fcID\u304c1\u306e\u30e6\u30fc\u30b6\u30fc\u3092\u53d6\u5f97\nuser, err := FindUser(ctx, db, 1)\nif err != nil {\n    if errors.Is(err, sql.ErrNoRows) {\n        fmt.Println(\"\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\")\n    } else {\n        panic(err)\n    }\n} else {\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fc\u540d: %s\\n\", user.Name)\n}\n</code></pre>"},{"location":"DB/model/users.go/#insert","title":"<code>Insert</code> \u95a2\u6570\u3068\u95a2\u9023\u95a2\u6570\u306e\u8a73\u7d30\u306a\u89e3\u8aac\u3068\u5229\u7528\u4f8b","text":"<p>\u4ee5\u4e0b\u306eGo\u30b3\u30fc\u30c9\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u30ec\u30b3\u30fc\u30c9\u306e\u633f\u5165\u3084\u66f4\u65b0\u3001\u524a\u9664\u3092\u884c\u3046\u305f\u3081\u306eORM\uff08Object-Relational Mapping\uff09\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u90e8\u3067\u3059\u3002\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001<code>Insert</code>\u3001<code>Update</code>\u3001<code>UpdateAll</code> \u95a2\u6570\u3068\u95a2\u9023\u3059\u308b\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u69cb\u306b\u3064\u3044\u3066\u8a73\u7d30\u306b\u89e3\u8aac\u3057\u3001\u958b\u767a\u8005\u304c\u7406\u89e3\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u5177\u4f53\u7684\u306a\u5229\u7528\u4f8b\u3082\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#1-insert","title":"1. <code>Insert</code> \u95a2\u6570","text":""},{"location":"DB/model/users.go/#_92","title":"\u8aac\u660e","text":"<pre><code>func (o *User) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error\n</code></pre> <ul> <li>\u76ee\u7684: <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e <code>users</code> \u30c6\u30fc\u30d6\u30eb\u306b\u633f\u5165\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>ctx context.Context</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3084\u30ad\u30e3\u30f3\u30bb\u30eb\u306e\u5236\u5fa1\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li><code>exec boil.ContextExecutor</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u5b9f\u884c\u3092\u884c\u3046\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002\u901a\u5e38\u306f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</li> <li><code>columns boil.Columns</code>: \u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30ab\u30e9\u30e0\u306e\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u3084\u30d6\u30e9\u30c3\u30af\u30ea\u30b9\u30c8\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_93","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ol> <li> <p>Null \u30c1\u30a7\u30c3\u30af</p> <pre><code>if o == nil {\n    return errors.New(\"models: no users provided for insertion\")\n}\n</code></pre> <ul> <li><code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c <code>nil</code> \u306e\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u8a2d\u5b9a</p> <pre><code>if !boil.TimestampsAreSkipped(ctx) {\n    currTime := time.Now().In(boil.GetLocation())\n\n    if queries.MustTime(o.CreatedAt).IsZero() {\n        queries.SetScanner(&amp;o.CreatedAt, currTime)\n    }\n    if queries.MustTime(o.UpdatedAt).IsZero() {\n        queries.SetScanner(&amp;o.UpdatedAt, currTime)\n    }\n}\n</code></pre> <ul> <li>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u30b9\u30ad\u30c3\u30d7\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u3001<code>CreatedAt</code> \u3068 <code>UpdatedAt</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u73fe\u5728\u6642\u523b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>Before Insert \u30d5\u30c3\u30af\u306e\u5b9f\u884c</p> <pre><code>if err := o.doBeforeInsertHooks(ctx, exec); err != nil {\n    return err\n}\n</code></pre> <ul> <li>\u633f\u5165\u524d\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30d5\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u8a2d\u5b9a</p> <pre><code>nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)\n</code></pre> <ul> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30ab\u30e9\u30e0\u306e\u3046\u3061\u3001\u975e\u30bc\u30ed\u306e\u5024\u3092\u6301\u3064\u3082\u306e\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u4f5c\u6210\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u53d6\u5f97</p> <pre><code>key := makeCacheKey(columns, nzDefaults)\nuserInsertCacheMut.RLock()\ncache, cached := userInsertCache[key]\nuserInsertCacheMut.RUnlock()\n</code></pre> <ul> <li>\u633f\u5165\u30af\u30a8\u30ea\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3059\u308c\u3070\u3001\u305d\u308c\u3092\u518d\u5229\u7528\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4f5c\u6210</p> <pre><code>if !cached {\n    // \u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u3068\u623b\u308a\u5024\u306e\u30ab\u30e9\u30e0\u3092\u6c7a\u5b9a\n    wl, returnColumns := columns.InsertColumnSet(\n        userAllColumns,\n        userColumnsWithDefault,\n        userColumnsWithoutDefault,\n        nzDefaults,\n    )\n\n    // \u30de\u30c3\u30d4\u30f3\u30b0\u306e\u4f5c\u6210\n    cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)\n    if err != nil {\n        return err\n    }\n    cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)\n    if err != nil {\n        return err\n    }\n\n    // \u30af\u30a8\u30ea\u306e\u7d44\u307f\u7acb\u3066\n    if len(wl) != 0 {\n        cache.query = fmt.Sprintf(\"INSERT INTO `users` (`%s`) %%sVALUES (%s)%%s\", strings.Join(wl, \"`,`\"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))\n    } else {\n        cache.query = \"INSERT INTO `users` () VALUES ()%s%s\"\n    }\n\n    // \u623b\u308a\u5024\u306e\u30af\u30a8\u30ea\u304c\u5fc5\u8981\u306a\u5834\u5408\u306e\u51e6\u7406\n    if len(cache.retMapping) != 0 {\n        cache.retQuery = fmt.Sprintf(\"SELECT `%s` FROM `users` WHERE %s\", strings.Join(returnColumns, \"`,`\"), strmangle.WhereClause(\"`\", \"`\", 0, userPrimaryKeyColumns))\n    }\n\n    // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u9069\u7528\n    cache.query = fmt.Sprintf(cache.query, \"\", \"\")\n}\n</code></pre> <ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u633f\u5165\u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002</li> <li><code>wl</code> \u306f\u633f\u5165\u3059\u308b\u30ab\u30e9\u30e0\u306e\u30ea\u30b9\u30c8\u3001<code>returnColumns</code> \u306f\u633f\u5165\u5f8c\u306b\u53d6\u5f97\u3059\u308b\u30ab\u30e9\u30e0\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002</li> <li><code>valueMapping</code> \u3068 <code>retMapping</code> \u306f\u3001\u305d\u308c\u305e\u308c\u5024\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3068\u623b\u308a\u5024\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u5024\u306e\u53d6\u5f97</p> <pre><code>value := reflect.Indirect(reflect.ValueOf(o))\nvals := queries.ValuesFromMapping(value, cache.valueMapping)\n</code></pre> <ul> <li><code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u633f\u5165\u3059\u308b\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c</p> <pre><code>if boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, cache.query)\n    fmt.Fprintln(writer, vals)\n}\nresult, err := exec.ExecContext(ctx, cache.query, vals...)\nif err != nil {\n    return errors.Wrap(err, \"models: unable to insert into users\")\n}\n</code></pre> <ul> <li>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u5834\u5408\u3001\u30af\u30a8\u30ea\u3068\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\u3002</li> <li>\u633f\u5165\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u30a8\u30e9\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u623b\u308a\u5024\u306e\u53d6\u5f97</p> <pre><code>var lastID int64\nvar identifierCols []interface{}\n\nif len(cache.retMapping) == 0 {\n    goto CacheNoHooks\n}\n\nlastID, err = result.LastInsertId()\nif err != nil {\n    return ErrSyncFail\n}\n\no.UserID = uint(lastID)\nif lastID != 0 &amp;&amp; len(cache.retMapping) == 1 &amp;&amp; cache.retMapping[0] == userMapping[\"user_id\"] {\n    goto CacheNoHooks\n}\n\nidentifierCols = []interface{}{\n    o.UserID,\n}\n\nif boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, cache.retQuery)\n    fmt.Fprintln(writer, identifierCols...)\n}\nerr = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)\nif err != nil {\n    return errors.Wrap(err, \"models: unable to populate default values for users\")\n}\n</code></pre> <ul> <li>\u633f\u5165\u3055\u308c\u305f\u30ec\u30b3\u30fc\u30c9\u306e <code>LastInsertId</code> \u3092\u53d6\u5f97\u3057\u3001<code>UserID</code> \u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u623b\u308a\u5024\u306e\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u66f4\u65b0</p> <pre><code>CacheNoHooks:\nif !cached {\n    userInsertCacheMut.Lock()\n    userInsertCache[key] = cache\n    userInsertCacheMut.Unlock()\n}\n</code></pre> <ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u73fe\u5728\u306e\u30af\u30a8\u30ea\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>After Insert \u30d5\u30c3\u30af\u306e\u5b9f\u884c</p> <pre><code>return o.doAfterInsertHooks(ctx, exec)\n</code></pre> <ul> <li>\u633f\u5165\u5f8c\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30d5\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3001\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul> </li> </ol>"},{"location":"DB/model/users.go/#_94","title":"\u5229\u7528\u4f8b","text":"<pre><code>package main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n    \"github.com/volatiletech/sqlboiler/boil\"\n)\n\nfunc main() {\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u306e\u8a2d\u5b9a\n    db, err := sql.Open(\"mysql\", \"user:password@/dbname\")\n    if err != nil {\n        panic(err)\n    }\n    defer db.Close()\n\n    // \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f5c\u6210\n    ctx := context.Background()\n\n    // \u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\u306e\u4f5c\u6210\n    newUser := &amp;User{\n        FirebaseID: \"firebase_unique_id\",\n        Name:       \"\u5c71\u7530 \u592a\u90ce\",\n        Email:      \"taro.yamada@example.com\",\n    }\n\n    // \u30e6\u30fc\u30b6\u30fc\u306e\u633f\u5165\n    err = newUser.Insert(ctx, db, boil.Infer())\n    if err != nil {\n        panic(err)\n    }\n\n    fmt.Printf(\"\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\u304c\u4f5c\u6210\u3055\u308c\u307e\u3057\u305f\u3002UserID: %d\\n\", newUser.UserID)\n}\n</code></pre>"},{"location":"DB/model/users.go/#2-update","title":"2. <code>Update</code> \u95a2\u6570","text":""},{"location":"DB/model/users.go/#_95","title":"\u8aac\u660e","text":"<pre><code>func (o *User) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error)\n</code></pre> <ul> <li>\u76ee\u7684: \u65e2\u5b58\u306e <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u3067\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>columns boil.Columns</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u65b9\u5f0f\u3084\u30d6\u30e9\u30c3\u30af\u30ea\u30b9\u30c8\u65b9\u5f0f\u3067\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/users.go/#_96","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ol> <li> <p>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u66f4\u65b0</p> <pre><code>if !boil.TimestampsAreSkipped(ctx) {\n    currTime := time.Now().In(boil.GetLocation())\n\n    queries.SetScanner(&amp;o.UpdatedAt, currTime)\n}\n</code></pre> <ul> <li><code>UpdatedAt</code> \u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u73fe\u5728\u6642\u523b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>Before Update \u30d5\u30c3\u30af\u306e\u5b9f\u884c</p> <pre><code>var err error\nif err = o.doBeforeUpdateHooks(ctx, exec); err != nil {\n    return 0, err\n}\n</code></pre> <ul> <li>\u66f4\u65b0\u524d\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30d5\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u4f5c\u6210\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u53d6\u5f97</p> <pre><code>key := makeCacheKey(columns, nil)\nuserUpdateCacheMut.RLock()\ncache, cached := userUpdateCache[key]\nuserUpdateCacheMut.RUnlock()\n</code></pre> <ul> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4f5c\u6210</p> <pre><code>if !cached {\n    wl := columns.UpdateColumnSet(\n        userAllColumns,\n        userPrimaryKeyColumns,\n    )\n\n    if !columns.IsWhitelist() {\n        wl = strmangle.SetComplement(wl, []string{\"created_at\"})\n    }\n    if len(wl) == 0 {\n        return 0, errors.New(\"models: unable to update users, could not build whitelist\")\n    }\n\n    cache.query = fmt.Sprintf(\"UPDATE `users` SET %s WHERE %s\",\n        strmangle.SetParamNames(\"`\", \"`\", 0, wl),\n        strmangle.WhereClause(\"`\", \"`\", 0, userPrimaryKeyColumns),\n    )\n    cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))\n    if err != nil {\n        return 0, err\n    }\n}\n</code></pre> <ul> <li>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3001\u66f4\u65b0\u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u5024\u306e\u53d6\u5f97</p> <pre><code>values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)\n</code></pre> <ul> <li><code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u66f4\u65b0\u3059\u308b\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c</p> <pre><code>if boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, cache.query)\n    fmt.Fprintln(writer, values)\n}\nvar result sql.Result\nresult, err = exec.ExecContext(ctx, cache.query, values...)\nif err != nil {\n    return 0, errors.Wrap(err, \"models: unable to update users row\")\n}\n</code></pre> <ul> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u30a8\u30e9\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97</p> <pre><code>rowsAff, err := result.RowsAffected()\nif err != nil {\n    return 0, errors.Wrap(err, \"models: failed to get rows affected by update for users\")\n}\n</code></pre> <ul> <li>\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u66f4\u65b0</p> <pre><code>if !cached {\n    userUpdateCacheMut.Lock()\n    userUpdateCache[key] = cache\n    userUpdateCacheMut.Unlock()\n}\n</code></pre> <ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u73fe\u5728\u306e\u30af\u30a8\u30ea\u60c5\u5831\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>After Update \u30d5\u30c3\u30af\u306e\u5b9f\u884c</p> <pre><code>return rowsAff, o.doAfterUpdateHooks(ctx, exec)\n</code></pre> <ul> <li>\u66f4\u65b0\u5f8c\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30d5\u30c3\u30af\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3001\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul> </li> </ol>"},{"location":"DB/model/users.go/#_97","title":"\u5229\u7528\u4f8b","text":"<pre><code>// \u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u306e\u66f4\u65b0\nuser.Name = \"\u5c71\u7530 \u82b1\u5b50\"\nuser.Email = \"hanako.yamada@example.com\"\n\n// \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\uff08\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u65b9\u5f0f\uff09\ncolumns := boil.Whitelist(\"name\", \"email\")\n\nrowsAffected, err := user.Update(ctx, db, columns)\nif err != nil {\n    panic(err)\n}\n\nfmt.Printf(\"%d \u884c\u306e\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u304c\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\u3002\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/users.go/#3-updateall","title":"3. <code>UpdateAll</code> \u95a2\u6570\uff08\u30af\u30a8\u30ea\u69cb\u9020\u4f53\u306e\u30e1\u30bd\u30c3\u30c9\uff09","text":""},{"location":"DB/model/users.go/#_98","title":"\u8aac\u660e","text":"<pre><code>func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n</code></pre> <ul> <li>\u76ee\u7684: \u30af\u30a8\u30ea\u3067\u6307\u5b9a\u3055\u308c\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u5168\u3066\u306e <code>User</code> \u30ec\u30b3\u30fc\u30c9\u3092\u4e00\u62ec\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>cols M</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u540d\u3068\u5024\u306e\u30de\u30c3\u30d7\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/users.go/#_99","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ol> <li> <p>\u30af\u30a8\u30ea\u306e\u66f4\u65b0\u8a2d\u5b9a</p> <pre><code>queries.SetUpdate(q.Query, cols)\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u306b\u66f4\u65b0\u5185\u5bb9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c</p> <pre><code>result, err := q.Query.ExecContext(ctx, exec)\nif err != nil {\n    return 0, errors.Wrap(err, \"models: unable to update all for users\")\n}\n</code></pre> <ul> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u30a8\u30e9\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97</p> <pre><code>rowsAff, err := result.RowsAffected()\nif err != nil {\n    return 0, errors.Wrap(err, \"models: unable to retrieve rows affected for users\")\n}\n</code></pre> <ul> <li>\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</li> </ul> </li> </ol>"},{"location":"DB/model/users.go/#_100","title":"\u5229\u7528\u4f8b","text":"<pre><code>// \u5e74\u9f62\u304c30\u6b73\u4ee5\u4e0a\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u300cactive\u300d\u306b\u66f4\u65b0\nq := Users(qm.Where(\"age &gt;= ?\", 30))\ncols := M{\n    \"status\": \"active\",\n}\n\nrowsAffected, err := q.UpdateAll(ctx, db, cols)\nif err != nil {\n    panic(err)\n}\n\nfmt.Printf(\"%d \u884c\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u304c\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\u3002\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/users.go/#4-updateall","title":"4. <code>UpdateAll</code> \u95a2\u6570\uff08\u30b9\u30e9\u30a4\u30b9\u30e1\u30bd\u30c3\u30c9\uff09","text":""},{"location":"DB/model/users.go/#_101","title":"\u8aac\u660e","text":"<pre><code>func (o UserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error)\n</code></pre> <ul> <li>\u76ee\u7684: <code>User</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5168\u3066\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u4e00\u62ec\u66f4\u65b0\u3057\u307e\u3059\u3002</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf:</li> <li><code>cols M</code>: \u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u540d\u3068\u5024\u306e\u30de\u30c3\u30d7\u3002</li> </ul>"},{"location":"DB/model/users.go/#_102","title":"\u30b3\u30fc\u30c9\u306e\u8a73\u7d30\u306a\u89e3\u8aac","text":"<ol> <li> <p>\u30b9\u30e9\u30a4\u30b9\u306e\u9577\u3055\u30c1\u30a7\u30c3\u30af</p> <pre><code>ln := int64(len(o))\nif ln == 0 {\n    return 0, nil\n}\n</code></pre> <ul> <li>\u30b9\u30e9\u30a4\u30b9\u304c\u7a7a\u306e\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u7d42\u4e86\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u3068\u5024\u306e\u6e96\u5099</p> <pre><code>if len(cols) == 0 {\n    return 0, errors.New(\"models: update all requires at least one column argument\")\n}\n\ncolNames := make([]string, len(cols))\nargs := make([]interface{}, len(cols))\n\ni := 0\nfor name, value := range cols {\n    colNames[i] = name\n    args[i] = value\n    i++\n}\n</code></pre> <ul> <li>\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u540d\u3068\u5024\u3092\u6e96\u5099\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u4e3b\u30ad\u30fc\u306e\u5024\u306e\u53d6\u5f97</p> <pre><code>// Append all of the primary key values for each column\nfor _, obj := range o {\n    pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)\n    args = append(args, pkeyArgs...)\n}\n</code></pre> <ul> <li>\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u3001\u4e3b\u30ad\u30fc\u306e\u5024\u3092\u53d6\u5f97\u3057\u3001\u30af\u30a8\u30ea\u306e\u5f15\u6570\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u7d44\u307f\u7acb\u3066</p> <pre><code>sql := fmt.Sprintf(\"UPDATE `users` SET %s WHERE %s\",\n    strmangle.SetParamNames(\"`\", \"`\", 0, colNames),\n    strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o)))\n</code></pre> <ul> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u3092\u7d44\u307f\u7acb\u3066\u307e\u3059\u3002<code>WHERE</code> \u53e5\u306b\u306f\u5404\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e3b\u30ad\u30fc\u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u6761\u4ef6\u3092\u751f\u6210\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c</p> <pre><code>if boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, sql)\n    fmt.Fprintln(writer, args...)\n}\nresult, err := exec.ExecContext(ctx, sql, args...)\nif err != nil {\n    return 0, errors.Wrap(err, \"models: unable to update all in user slice\")\n}\n</code></pre> <ul> <li>\u66f4\u65b0\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u30a8\u30e9\u30fc\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</li> </ul> </li> <li> <p>\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97</p> <pre><code>rowsAff, err := result.RowsAffected()\nif err != nil {\n    return 0, errors.Wrap(err, \"models: unable to retrieve rows affected all in update all user\")\n}\nreturn rowsAff, nil\n</code></pre> <ul> <li>\u66f4\u65b0\u3055\u308c\u305f\u884c\u6570\u3092\u53d6\u5f97\u3057\u3001\u8fd4\u3057\u307e\u3059\u3002</li> </ul> </li> </ol>"},{"location":"DB/model/users.go/#_103","title":"\u5229\u7528\u4f8b","text":"<pre><code>// \u30e6\u30fc\u30b6\u30fc\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u53d6\u5f97\nusers, err := Users(qm.Where(\"status = ?\", \"inactive\")).All(ctx, db)\nif err != nil {\n    panic(err)\n}\n\n// \u30e6\u30fc\u30b6\u30fc\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u4e00\u62ec\u66f4\u65b0\ncols := M{\n    \"status\": \"active\",\n}\n\nrowsAffected, err := users.UpdateAll(ctx, db, cols)\nif err != nil {\n    panic(err)\n}\n\nfmt.Printf(\"%d \u884c\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u304c\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\u3002\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/users.go/#5-mysqluseruniquecolumns","title":"5. <code>mySQLUserUniqueColumns</code> \u5909\u6570","text":""},{"location":"DB/model/users.go/#_104","title":"\u8aac\u660e","text":"<pre><code>var mySQLUserUniqueColumns = []string{\n    \"user_id\",\n    \"firebase_id\",\n}\n</code></pre> <ul> <li>\u76ee\u7684: MySQL\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u304a\u3051\u308b <code>users</code> \u30c6\u30fc\u30d6\u30eb\u306e\u30e6\u30cb\u30fc\u30af\u306a\u30ab\u30e9\u30e0\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002</li> <li>\u7528\u9014: \u30e6\u30cb\u30fc\u30af\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u8a2d\u5b9a\u3084\u3001\u30c7\u30fc\u30bf\u306e\u4e00\u610f\u6027\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_105","title":"\u6ce8\u610f\u4e8b\u9805","text":"<ul> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0: \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u3001\u9069\u5207\u306b\u51e6\u7406\u3057\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30ed\u30b0\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5236\u7d04\uff08\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u3001\u5916\u90e8\u30ad\u30fc\u306a\u3069\uff09\u3092\u8003\u616e\u3057\u3066\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3: \u4e00\u9023\u306e\u64cd\u4f5c\u304c\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001<code>exec</code> \u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> <li>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3: \u30e6\u30fc\u30b6\u30fc\u304b\u3089\u306e\u5165\u529b\u3092\u76f4\u63a5\u30af\u30a8\u30ea\u306b\u4f7f\u7528\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3001SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul>"},{"location":"DB/model/users.go/#upsert","title":"<code>Upsert</code>\u30e1\u30bd\u30c3\u30c9\u306e\u89e3\u8aac","text":""},{"location":"DB/model/users.go/#_106","title":"\u6982\u8981","text":"<p><code>Upsert</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u5bfe\u3057\u3066\u30ec\u30b3\u30fc\u30c9\u306e\u633f\u5165\uff08INSERT\uff09\u3092\u8a66\u307f\u3001\u3082\u3057\u4e3b\u30ad\u30fc\u3084\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u306e\u885d\u7a81\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u306f\u66f4\u65b0\uff08UPDATE\uff09\u307e\u305f\u306f\u7121\u8996\uff08IGNORE\uff09\u3092\u884c\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30ec\u30b3\u30fc\u30c9\u306e\u5b58\u5728\u6709\u7121\u306b\u304b\u304b\u308f\u3089\u305a\u30c7\u30fc\u30bf\u3092\u9069\u5207\u306b\u4fdd\u6301\u3059\u308b\u305f\u3081\u306e\u64cd\u4f5c\u3067\u3059\u3002</p>"},{"location":"DB/model/users.go/#_107","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *User) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error\n</code></pre> <ul> <li><code>ctx</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u3084\u30ad\u30e3\u30f3\u30bb\u30eb\u306a\u3069\u306e\u5236\u5fa1\u306b\u4f7f\u7528\u3002</li> <li><code>exec</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li><code>updateColumns</code>: \u885d\u7a81\u6642\u306b\u66f4\u65b0\u3059\u308b\u30ab\u30e9\u30e0\u306e\u6307\u5b9a\u3002</li> <li><code>insertColumns</code>: \u633f\u5165\u6642\u306b\u6307\u5b9a\u3059\u308b\u30ab\u30e9\u30e0\u306e\u6307\u5b9a\u3002</li> </ul>"},{"location":"DB/model/users.go/#_108","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>nil\u30c1\u30a7\u30c3\u30af:</li> </ol> <pre><code>if o == nil {\n    return errors.New(\"models: no users provided for upsert\")\n}\n</code></pre> <p><code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cnil\u306e\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p> <ol> <li>\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u8a2d\u5b9a:</li> </ol> <pre><code>if !boil.TimestampsAreSkipped(ctx) {\n    currTime := time.Now().In(boil.GetLocation())\n\n    if queries.MustTime(o.CreatedAt).IsZero() {\n        queries.SetScanner(&amp;o.CreatedAt, currTime)\n    }\n    queries.SetScanner(&amp;o.UpdatedAt, currTime)\n}\n</code></pre> <ul> <li> <p><code>CreatedAt</code>\u3084<code>UpdatedAt</code>\u304c\u672a\u8a2d\u5b9a\u306e\u5834\u5408\u3001\u73fe\u5728\u306e\u6642\u523b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> </li> <li> <p><code>BeforeUpsert</code>\u30d5\u30c3\u30af\u306e\u5b9f\u884c:</p> </li> </ul> <pre><code>if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {\n    return err\n}\n</code></pre> <ul> <li> <p>\u767b\u9332\u3055\u308c\u3066\u3044\u308b<code>BeforeUpsert</code>\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u30d5\u30c3\u30af\u304c\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u305f\u5834\u5408\u3001\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u30e6\u30cb\u30fc\u30af\u30ad\u30fc\u306e\u53d6\u5f97:</p> </li> </ul> <pre><code>nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)\nnzUniques := queries.NonZeroDefaultSet(mySQLUserUniqueColumns, o)\n\nif len(nzUniques) == 0 {\n    return errors.New(\"cannot upsert with a table that cannot conflict on a unique column\")\n}\n</code></pre> <ul> <li>\u975e\u30bc\u30ed\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3068\u30e6\u30cb\u30fc\u30af\u30ab\u30e9\u30e0\u3092\u53d6\u5f97\u3002</li> <li> <p>\u30e6\u30cb\u30fc\u30af\u30ab\u30e9\u30e0\u304c\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u751f\u6210:</p> </li> </ul> <pre><code>buf := strmangle.GetBuffer()\n// \u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u69cb\u7bc9...\nkey := buf.String()\nstrmangle.PutBuffer(buf)\n</code></pre> <ul> <li> <p>\u30af\u30a8\u30ea\u306e\u518d\u5229\u7528\u306e\u305f\u3081\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u751f\u6210\u3002</p> </li> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u78ba\u8a8d:</p> </li> </ul> <pre><code>userUpsertCacheMut.RLock()\ncache, cached := userUpsertCache[key]\nuserUpsertCacheMut.RUnlock()\n</code></pre> <ul> <li> <p>\u65e2\u5b58\u306e\u30af\u30a8\u30ea\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</p> </li> </ul> <pre><code>if !cached {\n    // \u633f\u5165\u3068\u66f4\u65b0\u306e\u30ab\u30e9\u30e0\u30bb\u30c3\u30c8\u3092\u69cb\u7bc9\n    // MySQL\u7528\u306e\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\n    // \u30af\u30a8\u30ea\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\n}\n</code></pre> <ul> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u304c\u306a\u3044\u5834\u5408\u3001\u65b0\u3057\u304f\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5024\u306e\u53d6\u5f97:</p> </li> </ul> <pre><code>value := reflect.Indirect(reflect.ValueOf(o))\nvals := queries.ValuesFromMapping(value, cache.valueMapping)\n</code></pre> <ul> <li> <p><code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u6e21\u3059\u5024\u3092\u53d6\u5f97\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</p> </li> </ul> <pre><code>result, err := exec.ExecContext(ctx, cache.query, vals...)\n</code></pre> <ul> <li> <p>\u69cb\u7bc9\u3057\u305f\u30a2\u30c3\u30d7\u30b5\u30fc\u30c8\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3002</p> </li> <li> <p>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3068\u7d50\u679c\u306e\u51e6\u7406:</p> <pre><code>if err != nil {\n    return errors.Wrap(err, \"models: unable to upsert for users\")\n}\n\n// \u6700\u5f8c\u306b\u633f\u5165\u3057\u305fID\u3092\u53d6\u5f97\u3057\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u8a2d\u5b9a\n</code></pre> </li> <li> <p><code>AfterUpsert</code>\u30d5\u30c3\u30af\u306e\u5b9f\u884c:</p> <pre><code>return o.doAfterUpsertHooks(ctx, exec)\n</code></pre> <ul> <li>\u767b\u9332\u3055\u308c\u3066\u3044\u308b<code>AfterUpsert</code>\u30d5\u30c3\u30af\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</li> </ul> </li> </ul>"},{"location":"DB/model/users.go/#_109","title":"\u6ce8\u610f\u70b9","text":"<ul> <li>\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406: \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u30fb\u7d42\u4e86\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u547c\u3073\u51fa\u3057\u5143\u3067\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u9069\u5207\u306b\u30a8\u30e9\u30fc\u3092\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_110","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\nuser := &amp;User{\n    UserID:   1,\n    Name:     \"\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\",\n    Email:    \"newuser@example.com\",\n    // \u305d\u306e\u4ed6\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u8a2d\u5b9a\n}\n\ninsertColumns := boil.Infer()\nupdateColumns := boil.Set(\n    \"name\",\n    \"email\",\n    // \u66f4\u65b0\u3057\u305f\u3044\u30ab\u30e9\u30e0\u540d\u3092\u6307\u5b9a\n)\n\nerr = user.Upsert(ctx, db, updateColumns, insertColumns)\nif err != nil {\n    log.Fatal(err)\n}\n</code></pre>"},{"location":"DB/model/users.go/#delete","title":"<code>Delete</code>\u30e1\u30bd\u30c3\u30c9\u306e\u89e3\u8aac","text":""},{"location":"DB/model/users.go/#_111","title":"\u6982\u8981","text":"<p><code>Delete</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002\u524a\u9664\u306f\u4e3b\u30ad\u30fc\u306b\u57fa\u3065\u3044\u3066\u884c\u308f\u308c\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_112","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *User) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n</code></pre> <ul> <li><code>ctx</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>int64</code>: \u524a\u9664\u3055\u308c\u305f\u884c\u6570\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/users.go/#_113","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>nil\u30c1\u30a7\u30c3\u30af:</li> </ol> <pre><code>if o == nil {\n    return 0, errors.New(\"models: no User provided for delete\")\n}\n</code></pre> <ul> <li> <p><code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cnil\u306e\u5834\u5408\u3001\u30a8\u30e9\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p><code>BeforeDelete</code>\u30d5\u30c3\u30af\u306e\u5b9f\u884c:</p> </li> </ul> <pre><code>if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {\n    return 0, err\n}\n</code></pre> <ol> <li>\u4e3b\u30ad\u30fc\u306e\u5024\u53d6\u5f97:</li> </ol> <pre><code>args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)\n</code></pre> <ul> <li> <p>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u4e3b\u30ad\u30fc\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u524a\u9664\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</p> </li> </ul> <pre><code>sql := \"DELETE FROM `users` WHERE `user_id`=?\"\n</code></pre> <ol> <li>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</li> </ol> <pre><code>result, err := exec.ExecContext(ctx, sql, args...)\n</code></pre> <ol> <li>\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97:</li> </ol> <pre><code>rowsAff, err := result.RowsAffected()\n</code></pre> <ol> <li><code>AfterDelete</code>\u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> </ol> <pre><code>if err := o.doAfterDeleteHooks(ctx, exec); err != nil {\n    return 0, err\n}\n</code></pre>"},{"location":"DB/model/users.go/#_114","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\nuser := &amp;User{\n    UserID: 1,\n}\n\nrowsAffected, err := user.Delete(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"%d \u884c\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/users.go/#deleteall","title":"<code>DeleteAll</code>\u30e1\u30bd\u30c3\u30c9\u306e\u89e3\u8aac\uff08\u30af\u30a8\u30ea\u304b\u3089\u306e\u524a\u9664\uff09","text":""},{"location":"DB/model/users.go/#_115","title":"\u6982\u8981","text":"<p><code>DeleteAll</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30af\u30a8\u30ea\u306b\u30de\u30c3\u30c1\u3059\u308b\u3059\u3079\u3066\u306e<code>User</code>\u30ec\u30b3\u30fc\u30c9\u3092\u524a\u9664\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_116","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n</code></pre>"},{"location":"DB/model/users.go/#_117","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30af\u30a8\u30ea\u306e\u5b58\u5728\u78ba\u8a8d:</li> </ol> <pre><code>if q.Query == nil {\n    return 0, errors.New(\"models: no userQuery provided for delete all\")\n}\n</code></pre> <ol> <li>\u524a\u9664\u30d5\u30e9\u30b0\u306e\u8a2d\u5b9a:</li> </ol> <pre><code>queries.SetDelete(q.Query)\n</code></pre> <ul> <li> <p>\u30af\u30a8\u30ea\u304c\u524a\u9664\u64cd\u4f5c\u3067\u3042\u308b\u3053\u3068\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</p> </li> </ul> <pre><code>result, err := q.Query.ExecContext(ctx, exec)\n</code></pre> <ol> <li>\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97:</li> </ol> <pre><code>rowsAff, err := result.RowsAffected()\n</code></pre>"},{"location":"DB/model/users.go/#_118","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u3092\u524a\u9664\nrowsAffected, err := Users(qm.Where(\"created_at &lt; ?\", \"2022-01-01\")).DeleteAll(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"%d \u884c\u306e\u53e4\u3044\u30e6\u30fc\u30b6\u30fc\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/users.go/#deleteall_1","title":"<code>DeleteAll</code>\u30e1\u30bd\u30c3\u30c9\u306e\u89e3\u8aac\uff08\u30b9\u30e9\u30a4\u30b9\u304b\u3089\u306e\u524a\u9664\uff09","text":""},{"location":"DB/model/users.go/#_119","title":"\u6982\u8981","text":"<p><code>UserSlice</code>\u578b\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u5bfe\u3057\u3066\u3001\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_120","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o UserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error)\n</code></pre>"},{"location":"DB/model/users.go/#_121","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30b9\u30e9\u30a4\u30b9\u306e\u9577\u3055\u78ba\u8a8d:</li> </ol> <pre><code>if len(o) == 0 {\n    return 0, nil\n}\n</code></pre> <ul> <li> <p>\u30b9\u30e9\u30a4\u30b9\u304c\u7a7a\u306e\u5834\u5408\u3001\u524a\u9664\u3059\u308b\u884c\u306f\u306a\u3044\u305f\u30810\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p><code>BeforeDelete</code>\u30d5\u30c3\u30af\u306e\u5b9f\u884c:</p> </li> </ul> <pre><code>if len(userBeforeDeleteHooks) != 0 {\n    for _, obj := range o {\n        if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {\n            return 0, err\n        }\n    }\n}\n</code></pre> <ol> <li>\u4e3b\u30ad\u30fc\u306e\u5024\u53ce\u96c6:</li> </ol> <pre><code>var args []interface{}\nfor _, obj := range o {\n    pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)\n    args = append(args, pkeyArgs...)\n}\n</code></pre> <ol> <li>\u524a\u9664\u30af\u30a8\u30ea\u306e\u69cb\u7bc9:</li> </ol> <pre><code>sql := \"DELETE FROM `users` WHERE \" +\n    strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o))\n</code></pre> <ol> <li>\u30af\u30a8\u30ea\u306e\u5b9f\u884c:</li> </ol> <pre><code>result, err := exec.ExecContext(ctx, sql, args...)\n</code></pre> <ol> <li>\u524a\u9664\u3055\u308c\u305f\u884c\u6570\u306e\u53d6\u5f97:</li> </ol> <pre><code>rowsAff, err := result.RowsAffected()\n</code></pre> <ol> <li><code>AfterDelete</code>\u30d5\u30c3\u30af\u306e\u5b9f\u884c:</li> </ol> <pre><code>if len(userAfterDeleteHooks) != 0 {\n    for _, obj := range o {\n        if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {\n            return 0, err\n        }\n    }\n}\n</code></pre>"},{"location":"DB/model/users.go/#_122","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u524a\u9664\u3057\u305f\u3044\u30e6\u30fc\u30b6\u30fc\u306e\u30b9\u30e9\u30a4\u30b9\nusers := UserSlice{\n    &amp;User{UserID: 1},\n    &amp;User{UserID: 2},\n    // \u305d\u306e\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\n}\n\nrowsAffected, err := users.DeleteAll(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"%d \u884c\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u524a\u9664\u3055\u308c\u307e\u3057\u305f\u3002\\n\", rowsAffected)\n</code></pre>"},{"location":"DB/model/users.go/#reload","title":"<code>Reload</code>\u30e1\u30bd\u30c3\u30c9\u306e\u89e3\u8aac","text":""},{"location":"DB/model/users.go/#_123","title":"\u6982\u8981","text":"<p><code>Reload</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u73fe\u5728\u306e<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u518d\u53d6\u5f97\u3057\u3001\u6700\u65b0\u306e\u72b6\u614b\u306b\u66f4\u65b0\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_124","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *User) Reload(ctx context.Context, exec boil.ContextExecutor) error\n</code></pre>"},{"location":"DB/model/users.go/#_125","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u518d\u53d6\u5f97:</li> </ol> <pre><code>ret, err := FindUser(ctx, exec, o.UserID)\nif err != nil {\n    return err\n}\n</code></pre> <ul> <li> <p>\u4e3b\u30ad\u30fc\u3092\u7528\u3044\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u6700\u65b0\u306e<code>User</code>\u30ec\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u66f4\u65b0:</p> </li> </ul> <pre><code>*o = *ret\n</code></pre> <ul> <li>\u73fe\u5728\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u53cd\u6620\u3055\u305b\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_126","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\nuser := &amp;User{UserID: 1}\n\n// \u4ed6\u306e\u51e6\u7406\u3067\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u304c\u66f4\u65b0\u3055\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u5834\u5408\nerr = user.Reload(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nfmt.Printf(\"\u6700\u65b0\u306e\u30e6\u30fc\u30b6\u30fc\u60c5\u5831: %+v\\n\", user)\n</code></pre> <p>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306b\u304a\u3051\u308b\u4e00\u822c\u7684\u306aCRUD\uff08\u4f5c\u6210\u3001\u8aad\u307f\u53d6\u308a\u3001\u66f4\u65b0\u3001\u524a\u9664\uff09\u64cd\u4f5c\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u7279\u306b\u3001<code>Upsert</code>\u30e1\u30bd\u30c3\u30c9\u306f\u633f\u5165\u3068\u66f4\u65b0\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u4fbf\u5229\u306a\u6a5f\u80fd\u3067\u3042\u308a\u3001\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u3092\u7dad\u6301\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u9069\u5207\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u52b9\u7387\u7684\u304b\u3064\u5b89\u5168\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u958b\u767a\u8005\u306f\u3001\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3084\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u306b\u7559\u610f\u3057\u3064\u3064\u3001\u63d0\u4f9b\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u6d3b\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"DB/model/users.go/#reloadall","title":"<code>ReloadAll</code>\u30e1\u30bd\u30c3\u30c9\u306e\u89e3\u8aac","text":""},{"location":"DB/model/users.go/#_127","title":"\u6982\u8981","text":"<p><code>ReloadAll</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001<code>UserSlice</code>\uff08<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\uff09\u5185\u306e\u5404<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u3001\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u306e\u6700\u65b0\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u518d\u53d6\u5f97\u3057\u3001\u5143\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u3059\u3079\u3066\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u6700\u65b0\u72b6\u614b\u3068\u540c\u671f\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_128","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *UserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error\n</code></pre> <ul> <li><code>o</code>: <code>UserSlice</code>\u306e\u30dd\u30a4\u30f3\u30bf\u3002\u518d\u8aad\u307f\u8fbc\u307f\u5bfe\u8c61\u306e<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\u3002</li> <li><code>ctx</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30b9\u30b3\u30fc\u30d7\u3084\u30ad\u30e3\u30f3\u30bb\u30eb\u306a\u3069\u306e\u5236\u5fa1\u306b\u4f7f\u7528\u3002</li> <li><code>exec</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> </ul>"},{"location":"DB/model/users.go/#_129","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u5165\u529b\u30c7\u30fc\u30bf\u306e\u691c\u8a3c</li> </ol> <pre><code>if o == nil || len(*o) == 0 {\n    return nil\n}\n</code></pre> <ul> <li> <p><code>UserSlice</code>\u304c<code>nil</code>\u307e\u305f\u306f\u7a7a\u306e\u5834\u5408\u3001\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\u30a8\u30e9\u30fc\u3067\u306f\u306a\u304f<code>nil</code>\u3092\u8fd4\u3059\u306e\u306f\u3001\u518d\u8aad\u307f\u8fbc\u307f\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u306a\u3044\u305f\u3081\u554f\u984c\u304c\u306a\u3044\u304b\u3089\u3067\u3059\u3002</p> </li> <li> <p>\u518d\u53d6\u5f97\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e3b\u30ad\u30fc\u5024\u3092\u53ce\u96c6</p> </li> </ul> <pre><code>slice := UserSlice{}\nvar args []interface{}\nfor _, obj := range *o {\n    pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)\n    args = append(args, pkeyArgs...)\n}\n</code></pre> <ul> <li>\u65b0\u3057\u3044<code>UserSlice</code>\u3067\u3042\u308b<code>slice</code>\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> <li> <p>\u5404<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e3b\u30ad\u30fc\u5024\uff08<code>user_id</code>\uff09\u3092\u53d6\u5f97\u3057\u3001<code>args</code>\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u518d\u53d6\u5f97\u7528\u306eSQL\u30af\u30a8\u30ea\u306e\u69cb\u7bc9</p> </li> </ul> <pre><code>sql := \"SELECT `users`.* FROM `users` WHERE \" +\n    strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(*o))\n</code></pre> <ul> <li><code>strmangle.WhereClauseRepeated</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u4e3b\u30ad\u30fc\u306b\u57fa\u3065\u304fWHERE\u53e5\u3092\u751f\u6210\u3057\u307e\u3059\u3002</li> <li> <p>\u751f\u6210\u3055\u308c\u308bSQL\u30af\u30a8\u30ea\u306f\u3001\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>SELECT `users`.* FROM `users` WHERE (`user_id`=?) OR (`user_id`=?) OR ...\n</code></pre> <p>\u4e3b\u30ad\u30fc\u306e\u6570\u3060\u3051<code>OR</code>\u6761\u4ef6\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c</p> </li> </ul> <pre><code>q := queries.Raw(sql, args...)\n\nerr := q.Bind(ctx, exec, &amp;slice)\nif err != nil {\n    return errors.Wrap(err, \"models: unable to reload all in UserSlice\")\n}\n</code></pre> <ul> <li>\u751f\u306eSQL\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u3001<code>args</code>\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002</li> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092<code>slice</code>\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002</li> <li> <p>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u9069\u5207\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5143\u306e\u30b9\u30e9\u30a4\u30b9\u306e\u66f4\u65b0</p> </li> </ul> <pre><code>*o = slice\n\nreturn nil\n</code></pre> <ul> <li>\u65b0\u3057\u304f\u53d6\u5f97\u3057\u305f<code>slice</code>\u3067\u3001\u5143\u306e<code>UserSlice</code>\u306e\u5185\u5bb9\u3092\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002</li> <li>\u6700\u5f8c\u306b<code>nil</code>\u3092\u8fd4\u3057\u3001\u51e6\u7406\u304c\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u305f\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_130","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u65e2\u5b58\u306e\u30e6\u30fc\u30b6\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b9\u30e9\u30a4\u30b9\nusers := UserSlice{\n    &amp;User{UserID: 1},\n    &amp;User{UserID: 2},\n    &amp;User{UserID: 3},\n}\n\n// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u306e\u6700\u65b0\u306e\u60c5\u5831\u306b\u66f4\u65b0\nerr = users.ReloadAll(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\n// \u66f4\u65b0\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u8868\u793a\nfor _, user := range users {\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fcID: %d, \u540d\u524d: %s\\n\", user.UserID, user.Name)\n}\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>users</code>\u30b9\u30e9\u30a4\u30b9\u5185\u306e\u5404<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u518d\u53d6\u5f97\u3055\u308c\u3001\u6700\u65b0\u306e\u60c5\u5831\u306b\u66f4\u65b0\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#userexists","title":"<code>UserExists</code>\u95a2\u6570\u306e\u89e3\u8aac","text":""},{"location":"DB/model/users.go/#_131","title":"\u6982\u8981","text":"<p><code>UserExists</code>\u95a2\u6570\u306f\u3001\u6307\u5b9a\u3057\u305f<code>user_id</code>\u3092\u6301\u3064<code>User</code>\u30ec\u30b3\u30fc\u30c9\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_132","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func UserExists(ctx context.Context, exec boil.ContextExecutor, userID uint) (bool, error)\n</code></pre> <ul> <li><code>ctx</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li><code>userID</code>: \u5b58\u5728\u78ba\u8a8d\u3057\u305f\u3044<code>User</code>\u306e<code>user_id</code>\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>bool</code>: \u5b58\u5728\u3059\u308b\u5834\u5408\u306f<code>true</code>\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f<code>false</code>\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/users.go/#_133","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li>\u5b58\u5728\u78ba\u8a8d\u7528\u306eSQL\u30af\u30a8\u30ea\u306e\u4f5c\u6210</li> </ol> <pre><code>sql := \"select exists(select 1 from `users` where `user_id`=? limit 1)\"\n</code></pre> <ul> <li>\u6307\u5b9a\u3057\u305f<code>user_id</code>\u3092\u6301\u3064\u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308bSQL\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</li> <li> <p><code>EXISTS</code>\u53e5\u3092\u4f7f\u7528\u3057\u3066\u3001\u5b58\u5728\u306e\u6709\u7121\u3092\u52b9\u7387\u7684\u306b\u78ba\u8a8d\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u306e\u51fa\u529b\uff08\u4efb\u610f\uff09</p> </li> </ul> <pre><code>if boil.IsDebug(ctx) {\n    writer := boil.DebugWriterFrom(ctx)\n    fmt.Fprintln(writer, sql)\n    fmt.Fprintln(writer, userID)\n}\n</code></pre> <ul> <li> <p>\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u306e\u5834\u5408\u3001\u5b9f\u884c\u3059\u308bSQL\u30af\u30a8\u30ea\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ed\u30b0\u306b\u51fa\u529b\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u53d6\u5f97</p> </li> </ul> <pre><code>row := exec.QueryRowContext(ctx, sql, userID)\n\nerr := row.Scan(&amp;exists)\nif err != nil {\n    return false, errors.Wrap(err, \"models: unable to check if users exists\")\n}\n</code></pre> <ul> <li>\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3092<code>exists</code>\u5909\u6570\u306b\u30b9\u30ad\u30e3\u30f3\u3057\u307e\u3059\u3002</li> <li> <p>\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3057\u307e\u3059\u3002</p> </li> <li> <p>\u5b58\u5728\u7d50\u679c\u306e\u8fd4\u5374</p> </li> </ul> <pre><code>return exists, nil\n</code></pre> <ul> <li>\u5b58\u5728\u78ba\u8a8d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_134","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\nuserID := uint(1)\n\nexists, err := UserExists(ctx, db, userID)\nif err != nil {\n    log.Fatal(err)\n}\n\nif exists {\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fcID %d \u306f\u5b58\u5728\u3057\u307e\u3059\u3002\\n\", userID)\n} else {\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fcID %d \u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\\n\", userID)\n}\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u6307\u5b9a\u3057\u305f<code>userID</code>\u306e<code>User</code>\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u305d\u306e\u7d50\u679c\u306b\u5fdc\u3058\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#exists_1","title":"<code>Exists</code>\u30e1\u30bd\u30c3\u30c9\u306e\u89e3\u8aac","text":""},{"location":"DB/model/users.go/#_135","title":"\u6982\u8981","text":"<p><code>Exists</code>\u30e1\u30bd\u30c3\u30c9\u306f\u3001<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e<code>UserID</code>\u3092\u4f7f\u7528\u3057\u3066\u5b58\u5728\u78ba\u8a8d\u3092\u884c\u3044\u307e\u3059\u3002</p>"},{"location":"DB/model/users.go/#_136","title":"\u95a2\u6570\u30b7\u30b0\u30cd\u30c1\u30e3","text":"<pre><code>func (o *User) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error)\n</code></pre> <ul> <li><code>o</code>: <code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3002</li> <li><code>ctx</code>: \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3002</li> <li><code>exec</code>: \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u3002</li> <li>\u623b\u308a\u5024:</li> <li><code>bool</code>: \u5b58\u5728\u3059\u308b\u5834\u5408\u306f<code>true</code>\u3001\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f<code>false</code>\u3002</li> <li><code>error</code>: \u30a8\u30e9\u30fc\u60c5\u5831\u3002</li> </ul>"},{"location":"DB/model/users.go/#_137","title":"\u51e6\u7406\u306e\u6d41\u308c","text":"<ol> <li><code>UserExists</code>\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057</li> </ol> <pre><code>return UserExists(ctx, exec, o.UserID)\n</code></pre> <ul> <li><code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e<code>UserID</code>\u3092\u4f7f\u7528\u3057\u3066\u3001<code>UserExists</code>\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</li> <li>\u3053\u308c\u306b\u3088\u308a\u3001\u6307\u5b9a\u3057\u305f<code>UserID</code>\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002</li> </ul>"},{"location":"DB/model/users.go/#_138","title":"\u5229\u7528\u4f8b","text":"<pre><code>ctx := context.Background()\ndb, err := sql.Open(\"mysql\", \"user:password@/dbname\")\nif err != nil {\n    log.Fatal(err)\n}\n\nuser := &amp;User{UserID: 1}\n\nexists, err := user.Exists(ctx, db)\nif err != nil {\n    log.Fatal(err)\n}\n\nif exists {\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fcID %d \u306f\u5b58\u5728\u3057\u307e\u3059\u3002\\n\", user.UserID)\n} else {\n    fmt.Printf(\"\u30e6\u30fc\u30b6\u30fcID %d \u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\\n\", user.UserID)\n}\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3057\u3066\u5b58\u5728\u78ba\u8a8d\u3092\u884c\u3044\u3001\u305d\u306e\u7d50\u679c\u306b\u5fdc\u3058\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002</p> <p><code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u305d\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u5bfe\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u540c\u671f\u3084\u5b58\u5728\u78ba\u8a8d\u3092\u52b9\u7387\u7684\u306b\u884c\u3046\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u95a2\u6570\u3067\u3059\u3002</p> <ul> <li> <p><code>ReloadAll</code>: \u30b9\u30e9\u30a4\u30b9\u5185\u306e\u3059\u3079\u3066\u306e<code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u306e\u6700\u65b0\u72b6\u614b\u306b\u66f4\u65b0\u3057\u307e\u3059\u3002\u5927\u91cf\u306e<code>User</code>\u3092\u6271\u3046\u5834\u5408\u306b\u975e\u5e38\u306b\u4fbf\u5229\u3067\u3059\u3002</p> </li> <li> <p><code>UserExists</code>: \u7279\u5b9a\u306e<code>user_id</code>\u3092\u6301\u3064<code>User</code>\u30ec\u30b3\u30fc\u30c9\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u5b58\u5728\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u5b58\u5728\u78ba\u8a8d\u306e\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3067\u3059\u3002</p> </li> <li> <p><code>Exists</code>: <code>User</code>\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u81ea\u8eab\u306b\u5bfe\u3057\u3066\u3001\u5bfe\u5fdc\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u5b58\u5728\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u3068\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u72b6\u614b\u3092\u540c\u671f\u3055\u305b\u308b\u969b\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p> </li> </ul> <p>\u3053\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u3084\u95a2\u6570\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30fc\u30bf\u306e\u6574\u5408\u6027\u3092\u4fdd\u3061\u306a\u304c\u3089\u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\u958b\u767a\u8005\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8981\u4ef6\u306b\u5fdc\u3058\u3066\u3053\u308c\u3089\u306e\u6a5f\u80fd\u3092\u7d71\u5408\u3057\u3001\u5805\u7262\u306a\u30c7\u30fc\u30bf\u7ba1\u7406\u3092\u5b9f\u73fe\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"DB/model/users.go/#_139","title":"\u53c2\u8003\u8cc7\u6599","text":"<ul> <li>SQLBoiler \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8</li> <li>Go \u8a00\u8a9e \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c</li> <li>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30d1\u30c3\u30b1\u30fc\u30b8</li> </ul>"},{"location":"Git/Fetch%E3%81%A8Pull/","title":"Fetch\u3068pull\u306f\u3069\u3046\u9055\u3046\u306e\u304b","text":"<pre><code># Git\u306eFetch\u3068Pull\u306e\u9055\u3044\n\n## 1. Fetch\uff08\u30d5\u30a7\u30c3\u30c1\uff09\n\nFetch\u306f\u3001\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u6700\u65b0\u306e\u5909\u66f4\u3092\u53d6\u5f97\u3057\u307e\u3059\u304c\u3001\u30ed\u30fc\u30ab\u30eb\u306e\u4f5c\u696d\u30d6\u30e9\u30f3\u30c1\u306b\u306f\u76f4\u63a5\u53cd\u6620\u3057\u307e\u305b\u3093\u3002\n\n### \u7279\u5fb4:\n- \u30ea\u30e2\u30fc\u30c8\u306e\u5909\u66f4\u3092\u5b89\u5168\u306b\u78ba\u8a8d\u3067\u304d\u308b\n- \u30ed\u30fc\u30ab\u30eb\u306e\u4f5c\u696d\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u306a\u3044\n- \u5909\u66f4\u3092\u78ba\u8a8d\u3057\u3066\u304b\u3089\u7d71\u5408\u3059\u308b\u304b\u3069\u3046\u304b\u6c7a\u3081\u3089\u308c\u308b\n\n### \u4f7f\u7528\u4f8b:\n```bash\ngit fetch origin\n</code></pre>"},{"location":"Git/Fetch%E3%81%A8Pull/#2-pull","title":"2. Pull\uff08\u30d7\u30eb\uff09","text":"<p>Pull\u306f\u3001Fetch\u306e\u5f8c\u306b\u81ea\u52d5\u7684\u306b\u30de\u30fc\u30b8\u3092\u884c\u3046\u64cd\u4f5c\u3067\u3059\u3002\u30ea\u30e2\u30fc\u30c8\u306e\u5909\u66f4\u3092\u30ed\u30fc\u30ab\u30eb\u306e\u4f5c\u696d\u30d6\u30e9\u30f3\u30c1\u306b\u76f4\u63a5\u53cd\u6620\u3057\u307e\u3059\u3002</p>"},{"location":"Git/Fetch%E3%81%A8Pull/#_1","title":"\u7279\u5fb4:","text":"<ul> <li>\u30ea\u30e2\u30fc\u30c8\u306e\u5909\u66f4\u3092\u5373\u5ea7\u306b\u30ed\u30fc\u30ab\u30eb\u306b\u53cd\u6620</li> <li>Fetch\u3068\u30de\u30fc\u30b8\u3092\u4e00\u5ea6\u306b\u884c\u3046</li> <li>\u7af6\u5408\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b</li> </ul>"},{"location":"Git/Fetch%E3%81%A8Pull/#_2","title":"\u4f7f\u7528\u4f8b:","text":"<pre><code>git pull origin main\n</code></pre>"},{"location":"Git/Fetch%E3%81%A8Pull/#3","title":"3. \u4e3b\u306a\u9055\u3044","text":"<ul> <li>\u5b89\u5168\u6027: Fetch\u306e\u65b9\u304c\u5b89\u5168</li> <li>\u5373\u6642\u6027: Pull\u306e\u65b9\u304c\u5373\u6642\u7684</li> <li>\u5236\u5fa1: Fetch\u306e\u65b9\u304c\u7d30\u304b\u3044\u5236\u5fa1\u304c\u53ef\u80fd</li> </ul>"},{"location":"Git/Fetch%E3%81%A8Pull/#4","title":"4. \u4f7f\u3044\u5206\u3051","text":"<ul> <li>\u5909\u66f4\u3092\u78ba\u8a8d\u3057\u3066\u304b\u3089\u7d71\u5408\u3057\u305f\u3044\u5834\u5408: Fetch</li> <li>\u8fc5\u901f\u306b\u6700\u65b0\u306e\u72b6\u614b\u306b\u66f4\u65b0\u3057\u305f\u3044\u5834\u5408: Pull</li> <li>\u30c1\u30fc\u30e0\u958b\u767a\u3067\u614e\u91cd\u306b\u9032\u3081\u305f\u3044\u5834\u5408: Fetch</li> <li>\u500b\u4eba\u958b\u767a\u3067\u7d20\u65e9\u304f\u540c\u671f\u3057\u305f\u3044\u5834\u5408: Pull</li> </ul>"},{"location":"Git/Fetch%E3%81%A8Pull/#5","title":"5. \u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u4f8b","text":""},{"location":"Git/Fetch%E3%81%A8Pull/#fetch","title":"Fetch\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408:","text":"<ol> <li><code>git fetch origin</code></li> <li><code>git log --oneline --decorate --graph --all</code> \u3067\u5909\u66f4\u3092\u78ba\u8a8d</li> <li>\u554f\u984c\u306a\u3051\u308c\u3070 <code>git merge origin/main</code></li> </ol>"},{"location":"Git/Fetch%E3%81%A8Pull/#pull","title":"Pull\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408:","text":"<ol> <li><code>git pull origin main</code> ```</li> </ol>"},{"location":"Git/origin%28%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%29%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E5%89%8A%E9%99%A4/","title":"Origin(\u30ea\u30e2\u30fc\u30c8)\u30d6\u30e9\u30f3\u30c1\u524a\u9664","text":""},{"location":"Git/origin%28%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%29%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E5%89%8A%E9%99%A4/#_1","title":"\u30ea\u30e2\u30fc\u30c8\u30d6\u30e9\u30f3\u30c1\u3068\u306f","text":"<p>github\u4e0a\u306b\u3042\u308b\u30d6\u30e9\u30f3\u30c1\u306e\u4e8b\u3092\u6307\u3059</p> <pre><code>git push origin --delete \u30ea\u30e2\u30fc\u30c8\u30d6\u30e9\u30f3\u30c1\u540d\n</code></pre>"},{"location":"Google%20Maps/Maps%20JavaScript%20API/","title":"Maps JavaScript API","text":""},{"location":"Google%20Maps/Maps%20JavaScript%20API/#ui","title":"UI\u306e\u5236\u5fa1","text":"<p>UI\u306e\u8868\u793a\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb</p> <p>TypeScript\u5468\u308a\u306e\u6ce8\u610f\u70b9</p> <p>\u30ab\u30b9\u30bf\u30e0\u30de\u30fc\u30ab\u30fc</p>"}]}